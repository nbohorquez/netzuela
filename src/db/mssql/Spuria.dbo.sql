
USE spuria
GO
 IF NOT EXISTS(SELECT * FROM sys.schemas WHERE [name] = N'dbo')      
     EXEC (N'CREATE SCHEMA dbo')                                   
 GO                                                               

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'acceso'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'acceso'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[acceso]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[acceso]
(
   [AccesoID] int  NOT NULL,
   [Conectado] smallint  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [CorreoElectronico] varchar(45)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Contrasena] varchar(45)  NOT NULL,
   [FechaDeRegistro] datetime2(0)  NOT NULL,
   [FechaDeUltimoAcceso] datetime2(0) DEFAULT NULL  NULL,
   [DuracionDeUltimoAcceso] time  NOT NULL,
   [NumeroTotalDeAccesos] int  NOT NULL,
   [TiempoTotalDeAccesos] time  NOT NULL,
   [TiempoPromedioPorAcceso] time  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.acceso',
        N'SCHEMA', N'dbo',
        N'TABLE', N'acceso'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'accion'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'accion'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[accion]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[accion]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(13)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.accion',
        N'SCHEMA', N'dbo',
        N'TABLE', N'accion'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'administrador'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[administrador]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[administrador]
(
   [Rastreable_P] int  NOT NULL,
   [Usuario_P] int  NOT NULL,
   [AdministradorID] int IDENTITY(2, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Estatus] char(9)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Privilegios] char(7)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Nombre] varchar(45)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Apellido] varchar(45)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.administrador',
        N'SCHEMA', N'dbo',
        N'TABLE', N'administrador'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'buscable'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'buscable'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[buscable]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[buscable]
(
   [BuscableID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.buscable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'buscable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'busqueda'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'busqueda'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[busqueda]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[busqueda]
(
   [Rastreable_P] int  NOT NULL,
   [Etiquetable_P] int  NOT NULL,
   [BusquedaID] int IDENTITY(1, 1)  NOT NULL,
   [Usuario] int  NOT NULL,
   [FechaHora] datetime2(0)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   [Contenido] varchar(max)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.busqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'busqueda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificableseguible'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'calificableseguible'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[calificableseguible]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[calificableseguible]
(
   [CalificableSeguibleID] int IDENTITY(1, 1)  NOT NULL,
   [CalificacionGeneral] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificableseguible',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificableseguible'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacion'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'calificacion'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[calificacion]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[calificacion]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(4)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificacion',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificacion'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'calificacionresena'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[calificacionresena]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[calificacionresena]
(
   [Rastreable_P] int  NOT NULL,
   [Etiquetable_P] int  NOT NULL,
   [CalificableSeguibleID] int  NOT NULL,
   [ConsumidorID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Calificacion] char(4)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   [Resena] varchar(max)  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificacionresena',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificacionresena'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'categoria'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'categoria'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[categoria]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[categoria]
(
   [Etiquetable_P] int  NOT NULL,
   [CategoriaID] int IDENTITY(13, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Nombre] char(30)  NOT NULL,
   [HijoDeCategoria] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.categoria',
        N'SCHEMA', N'dbo',
        N'TABLE', N'categoria'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'ciudad'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'ciudad'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[ciudad]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[ciudad]
(
   [RegionGeografica_P] int  NOT NULL,
   [CiudadID] int IDENTITY(3, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.ciudad',
        N'SCHEMA', N'dbo',
        N'TABLE', N'ciudad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'cliente'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[cliente]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[cliente]
(
   [Rastreable_P] int  NOT NULL,
   [Describible_P] int  NOT NULL,
   [Usuario_P] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [RIF] char(10)  NOT NULL,
   [Categoria] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Estatus] char(9)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [NombreLegal] varchar(45)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [NombreComun] varchar(45) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Telefono] char(12)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Edificio_CC] char(20) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Piso] char(12) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Apartamento] char(12) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [LocalNo] char(12) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Casa] char(20) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Calle] char(12)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Sector_Urb_Barrio] char(20)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [PaginaWeb] char(40) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Facebook] char(80) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Twitter] char(80) DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cliente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cliente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cobrable'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'cobrable'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[cobrable]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[cobrable]
(
   [CobrableID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cobrable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cobrable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'codigodeerror'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'codigodeerror'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[codigodeerror]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[codigodeerror]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(40)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.codigodeerror',
        N'SCHEMA', N'dbo',
        N'TABLE', N'codigodeerror'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'consumidor'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[consumidor]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[consumidor]
(
   [Rastreable_P] int  NOT NULL,
   [Interlocutor_P] int  NOT NULL,
   [Usuario_P] int  NOT NULL,
   [ConsumidorID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Nombre] varchar(45)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Apellido] varchar(45)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Estatus] char(9)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Sexo] char(6)  NOT NULL,
   [FechaDeNacimiento] date  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [GrupoDeEdad] char(15)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [GradoDeInstruccion] char(16)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidorobjetivo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'consumidorobjetivo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[consumidorobjetivo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[consumidorobjetivo]
(
   [PublicidadID] int  NOT NULL,
   [ConsumidorID] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidorobjetivo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidorobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'contadordeexhibiciones'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'contadordeexhibiciones'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[contadordeexhibiciones]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[contadordeexhibiciones]
(
   [EstadisticasDeVisitasID] int  NOT NULL,
   [FechaInicio] datetime2(0)  NOT NULL,
   [FechaFin] datetime2(0) DEFAULT NULL  NULL,
   [ContadorDeExhibiciones] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.contadordeexhibiciones',
        N'SCHEMA', N'dbo',
        N'TABLE', N'contadordeexhibiciones'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'continente'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'continente'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[continente]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[continente]
(
   [RegionGeografica_P] int  NOT NULL,
   [ContinenteID] int IDENTITY(6, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.continente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'continente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'croquis'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'croquis'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[croquis]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[croquis]
(
   [Rastreable_P] int  NOT NULL,
   [CroquisID] int  NOT NULL,
   [Area] float(24) DEFAULT NULL  NULL,
   [Perimetro] float(24) DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.croquis',
        N'SCHEMA', N'dbo',
        N'TABLE', N'croquis'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'describible'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'describible'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[describible]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[describible]
(
   [DescribibleID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.describible',
        N'SCHEMA', N'dbo',
        N'TABLE', N'describible'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'descripcion'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'descripcion'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[descripcion]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[descripcion]
(
   [Rastreable_P] int  NOT NULL,
   [Etiquetable_P] int  NOT NULL,
   [DescripcionID] int IDENTITY(1, 1)  NOT NULL,
   [Describible] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   [Contenido] varchar(max)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.descripcion',
        N'SCHEMA', N'dbo',
        N'TABLE', N'descripcion'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'dia'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'dia'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[dia]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[dia]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(9)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.dia',
        N'SCHEMA', N'dbo',
        N'TABLE', N'dia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'dibujable'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'dibujable'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[dibujable]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[dibujable]
(
   [DibujableID] int IDENTITY(39, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.dibujable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'dibujable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticas'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estadisticas'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estadisticas]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estadisticas]
(
   [Rastreable_P] int  NOT NULL,
   [EstadisticasID] int IDENTITY(1, 1)  NOT NULL,
   [RegionGeografica] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticas'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdeinfluencia'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estadisticasdeinfluencia'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estadisticasdeinfluencia]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estadisticasdeinfluencia]
(
   [Estadisticas_P] int  NOT NULL,
   [EstadisticasDeInfluenciaID] int IDENTITY(1, 1)  NOT NULL,
   [Palabra] int  NOT NULL,
   [NumeroDeDescripciones] int  NOT NULL,
   [NumeroDeMensajes] int  NOT NULL,
   [NumeroDeCategorias] int  NOT NULL,
   [NumeroDeResenas] int  NOT NULL,
   [NumeroDePublicidades] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdeinfluencia',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdeinfluencia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdepopularidad'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estadisticasdepopularidad'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estadisticasdepopularidad]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estadisticasdepopularidad]
(
   [Estadisticas_P] int  NOT NULL,
   [EstadisticasDePopularidadID] int IDENTITY(1, 1)  NOT NULL,
   [CalificableSeguible] int  NOT NULL,
   [NumeroDeCalificaciones] int  NOT NULL,
   [NumeroDeResenas] int  NOT NULL,
   [NumeroDeSeguidores] int  NOT NULL,
   [NumeroDeMenciones] int  NOT NULL,
   [NumeroDeVendedores] int DEFAULT NULL  NULL,
   [NumeroDeMensajes] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdepopularidad',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdepopularidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdevisitas'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estadisticasdevisitas'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estadisticasdevisitas]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estadisticasdevisitas]
(
   [Estadisticas_P] int  NOT NULL,
   [EstadisticasDeVisitasID] int IDENTITY(1, 1)  NOT NULL,
   [Buscable] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdevisitas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdevisitas'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticastemporales'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estadisticastemporales'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estadisticastemporales]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estadisticastemporales]
(
   [EstadisticasID] int  NOT NULL,
   [FechaInicio] datetime2(0)  NOT NULL,
   [FechaFin] datetime2(0) DEFAULT NULL  NULL,
   [Contador] int  NOT NULL,
   [Ranking] int  NOT NULL,
   [Indice] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticastemporales',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticastemporales'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estado'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estado'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estado]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estado]
(
   [RegionGeografica_P] int  NOT NULL,
   [EstadoID] int IDENTITY(2, 1)  NOT NULL,
   [Pais] int  NOT NULL,
   [HusoHorarioNormal] time  NOT NULL,
   [HusoHorarioVerano] time DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estado',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estado'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estatus'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'estatus'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[estatus]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[estatus]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(9)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estatus',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estatus'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'etiqueta'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'etiqueta'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[etiqueta]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[etiqueta]
(
   [EtiquetableID] int  NOT NULL,
   [PalabraID] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.etiqueta',
        N'SCHEMA', N'dbo',
        N'TABLE', N'etiqueta'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'etiquetable'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'etiquetable'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[etiquetable]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[etiquetable]
(
   [EtiquetableID] int IDENTITY(13, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.etiquetable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'etiquetable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'factura'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'factura'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[factura]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[factura]
(
   [Rastreable_P] int  NOT NULL,
   [FacturaID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Cliente] char(10)  NOT NULL,
   [InicioDeMedicion] datetime2(0)  NOT NULL,
   [FinDeMedicion] datetime2(0)  NOT NULL,
   [Subtotal] decimal(10, 0)  NOT NULL,
   [Impuestos] decimal(10, 0)  NOT NULL,
   [Total] decimal(10, 0)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.factura',
        N'SCHEMA', N'dbo',
        N'TABLE', N'factura'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'foto'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'foto'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[foto]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[foto]
(
   [FotoID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [RutaDeFoto] char(80)  NOT NULL,
   [Describible] int  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.foto',
        N'SCHEMA', N'dbo',
        N'TABLE', N'foto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'gradodeinstruccion'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'gradodeinstruccion'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[gradodeinstruccion]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[gradodeinstruccion]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(16)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.gradodeinstruccion',
        N'SCHEMA', N'dbo',
        N'TABLE', N'gradodeinstruccion'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'gradodeinstruccionobjetivo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'gradodeinstruccionobjetivo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[gradodeinstruccionobjetivo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[gradodeinstruccionobjetivo]
(
   [PublicidadID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [GradoDeInstruccion] char(16)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.gradodeinstruccionobjetivo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'gradodeinstruccionobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'grupodeedad'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'grupodeedad'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[grupodeedad]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[grupodeedad]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(15)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.grupodeedad',
        N'SCHEMA', N'dbo',
        N'TABLE', N'grupodeedad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'grupodeedadobjetivo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'grupodeedadobjetivo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[grupodeedadobjetivo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[grupodeedadobjetivo]
(
   [PublicidadID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [GrupoDeEdad] char(15)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.grupodeedadobjetivo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'grupodeedadobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'horariodetrabajo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'horariodetrabajo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[horariodetrabajo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[horariodetrabajo]
(
   [TiendaID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Dia] char(9)  NOT NULL,
   [Laborable] smallint  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.horariodetrabajo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'horariodetrabajo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'husohorario'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'husohorario'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[husohorario]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[husohorario]
(
   [Valor] time  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.husohorario',
        N'SCHEMA', N'dbo',
        N'TABLE', N'husohorario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'idioma'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'idioma'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[idioma]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[idioma]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(10)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.idioma',
        N'SCHEMA', N'dbo',
        N'TABLE', N'idioma'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'interlocutor'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'interlocutor'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[interlocutor]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[interlocutor]
(
   [InterlocutorID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.interlocutor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'interlocutor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'inventario'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[inventario]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[inventario]
(
   [Rastreable_P] int  NOT NULL,
   [Cobrable_P] int  NOT NULL,
   [TiendaID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Codigo] char(15)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Descripcion] varchar(45) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Visibilidad] char(16)  NOT NULL,
   [ProductoID] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.inventario',
        N'SCHEMA', N'dbo',
        N'TABLE', N'inventario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'mensaje'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[mensaje]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[mensaje]
(
   [Rastreable_P] int  NOT NULL,
   [Etiquetable_P] int  NOT NULL,
   [MensajeID] int IDENTITY(1, 1)  NOT NULL,
   [Remitente] int  NOT NULL,
   [Destinatario] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   [Contenido] varchar(max)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.mensaje',
        N'SCHEMA', N'dbo',
        N'TABLE', N'mensaje'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'municipio'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'municipio'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[municipio]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[municipio]
(
   [RegionGeografica_P] int  NOT NULL,
   [MunicipioID] int IDENTITY(21, 1)  NOT NULL,
   [Estado] int  NOT NULL,
   [Ciudad] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.municipio',
        N'SCHEMA', N'dbo',
        N'TABLE', N'municipio'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'pais'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[pais]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[pais]
(
   [RegionGeografica_P] int  NOT NULL,
   [PaisID] int IDENTITY(2, 1)  NOT NULL,
   [Continente] int  NOT NULL,
   [Capital] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Idioma] char(10)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [MonedaLocal] varchar(45) DEFAULT NULL  NULL,
   [MonedaLocal_Dolar] decimal(10, 2) DEFAULT NULL  NULL,
   [PIB] decimal(15, 0) DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.pais',
        N'SCHEMA', N'dbo',
        N'TABLE', N'pais'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'paissubcontinente'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'paissubcontinente'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[paissubcontinente]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[paissubcontinente]
(
   [SubcontinenteID] int  NOT NULL,
   [PaisID] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.paissubcontinente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'paissubcontinente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'palabra'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'palabra'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[palabra]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[palabra]
(
   [PalabraID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Palabra_Frase] char(15)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.palabra',
        N'SCHEMA', N'dbo',
        N'TABLE', N'palabra'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'parroquia'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'parroquia'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[parroquia]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[parroquia]
(
   [RegionGeografica_P] int  NOT NULL,
   [ParroquiaID] int IDENTITY(10, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [CodigoPostal] char(10)  NOT NULL,
   [Municipio] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.parroquia',
        N'SCHEMA', N'dbo',
        N'TABLE', N'parroquia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'patrocinante'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'patrocinante'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[patrocinante]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[patrocinante]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Cliente_P] char(10)  NOT NULL,
   [PatrocinanteID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.patrocinante',
        N'SCHEMA', N'dbo',
        N'TABLE', N'patrocinante'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'preciocantidad'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'preciocantidad'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[preciocantidad]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[preciocantidad]
(
   [TiendaID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Codigo] char(15)  NOT NULL,
   [FechaInicio] datetime2(0)  NOT NULL,
   [FechaFin] datetime2(0) DEFAULT NULL  NULL,
   [Precio] decimal(10, 2)  NOT NULL,
   [Cantidad] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.preciocantidad',
        N'SCHEMA', N'dbo',
        N'TABLE', N'preciocantidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'privilegios'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'privilegios'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[privilegios]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[privilegios]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(7)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.privilegios',
        N'SCHEMA', N'dbo',
        N'TABLE', N'privilegios'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'producto'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[producto]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[producto]
(
   [Rastreable_P] int  NOT NULL,
   [Describible_P] int  NOT NULL,
   [Buscable_P] int  NOT NULL,
   [CalificableSeguible_P] int  NOT NULL,
   [ProductoID] int IDENTITY(1, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [TipoDeCodigo] char(7)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Codigo] char(15)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Estatus] char(9)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Fabricante] varchar(45)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Modelo] varchar(45) DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Nombre] varchar(45)  NOT NULL,
   [Categoria] int  NOT NULL,
   [DebutEnElMercado] date DEFAULT NULL  NULL,
   [Largo] float(24) DEFAULT NULL  NULL,
   [Ancho] float(24) DEFAULT NULL  NULL,
   [Alto] float(24) DEFAULT NULL  NULL,
   [Peso] float(24) DEFAULT NULL  NULL,
   [PaisDeOrigen] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.producto',
        N'SCHEMA', N'dbo',
        N'TABLE', N'producto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'publicidad'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[publicidad]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[publicidad]
(
   [Buscable_P] int  NOT NULL,
   [Describible_P] int  NOT NULL,
   [Rastreable_P] int  NOT NULL,
   [Etiquetable_P] int  NOT NULL,
   [Cobrable_P] int  NOT NULL,
   [PublicidadID] int IDENTITY(1, 1)  NOT NULL,
   [Patrocinante] int  NOT NULL,
   [TamanoDePoblacionObjetivo] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.publicidad',
        N'SCHEMA', N'dbo',
        N'TABLE', N'publicidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'punto'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'punto'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[punto]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[punto]
(
   [PuntoID] int IDENTITY(1, 1)  NOT NULL,
   [Latitud] decimal(9, 6)  NOT NULL,
   [Longitud] decimal(9, 6)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.punto',
        N'SCHEMA', N'dbo',
        N'TABLE', N'punto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'puntodecroquis'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'puntodecroquis'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[puntodecroquis]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[puntodecroquis]
(
   [CroquisID] int  NOT NULL,
   [PuntoID] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.puntodecroquis',
        N'SCHEMA', N'dbo',
        N'TABLE', N'puntodecroquis'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'rastreable'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'rastreable'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[rastreable]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[rastreable]
(
   [RastreableID] int IDENTITY(40, 1)  NOT NULL,
   [FechaDeCreacion] datetime2(0)  NOT NULL,
   [CreadoPor] int  NOT NULL,
   [FechaDeModificacion] datetime2(0)  NOT NULL,
   [ModificadoPor] int  NOT NULL,
   [FechaDeEliminacion] datetime2(0) DEFAULT NULL  NULL,
   [EliminadoPor] int DEFAULT NULL  NULL,
   [FechaDeAcceso] datetime2(0)  NOT NULL,
   [AccesadoPor] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.rastreable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'rastreable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeografica'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'regiongeografica'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[regiongeografica]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[regiongeografica]
(
   [Rastreable_P] int  NOT NULL,
   [Dibujable_P] int  NOT NULL,
   [RegionGeograficaID] int IDENTITY(39, 1)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   [Nombre] varchar(45)  NOT NULL,
   [Poblacion] bigint  NOT NULL,
   [Consumidores_Poblacion] float(24)  NOT NULL,
   [Tiendas_Poblacion] float(24)  NOT NULL,
   [Tiendas_Consumidores] float(24) DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeografica',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeografica'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeograficaobjetivo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'regiongeograficaobjetivo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[regiongeograficaobjetivo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[regiongeograficaobjetivo]
(
   [PublicidadID] int  NOT NULL,
   [RegionGeograficaID] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeograficaobjetivo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeograficaobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'registro'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'registro'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[registro]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[registro]
(
   [RegistroID] int IDENTITY(116, 1)  NOT NULL,
   [FechaHora] datetime2(0) DEFAULT NULL  NULL,
   [ActorActivo] int  NOT NULL,
   [ActorPasivo] int DEFAULT NULL  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Accion] char(13)  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   [Parametros] varchar(max)  NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [CodigoDeError] char(40)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.registro',
        N'SCHEMA', N'dbo',
        N'TABLE', N'registro'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'relaciondepalabras'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'relaciondepalabras'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[relaciondepalabras]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[relaciondepalabras]
(
   [Palabra1ID] int  NOT NULL,
   [Palabra2ID] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.relaciondepalabras',
        N'SCHEMA', N'dbo',
        N'TABLE', N'relaciondepalabras'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'resultadodebusqueda'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'resultadodebusqueda'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[resultadodebusqueda]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[resultadodebusqueda]
(
   [BusquedaID] int  NOT NULL,
   [BuscableID] int  NOT NULL,
   [Visitado] smallint  NOT NULL,
   [Relevancia] float(24)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.resultadodebusqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'resultadodebusqueda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'seguidor'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'seguidor'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[seguidor]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[seguidor]
(
   [Rastreable_P] int  NOT NULL,
   [ConsumidorID] int  NOT NULL,
   [CalificableSeguibleID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [AvisarSi] char(40)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.seguidor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'seguidor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'serviciovendido'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'serviciovendido'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[serviciovendido]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[serviciovendido]
(
   [FacturaID] int  NOT NULL,
   [CobrableID] int  NOT NULL,
   [Acumulado] decimal(10, 0)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.serviciovendido',
        N'SCHEMA', N'dbo',
        N'TABLE', N'serviciovendido'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'sexo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'sexo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[sexo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[sexo]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(6)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.sexo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'sexo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'sexoobjetivo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'sexoobjetivo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[sexoobjetivo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[sexoobjetivo]
(
   [PublicidadID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Sexo] char(6)  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.sexoobjetivo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'sexoobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'subcontinente'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'subcontinente'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[subcontinente]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[subcontinente]
(
   [RegionGeografica_P] int  NOT NULL,
   [SubcontinenteID] int IDENTITY(1, 1)  NOT NULL,
   [Continente] int  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.subcontinente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'subcontinente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tamano'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'tamano'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[tamano]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[tamano]
(
   [TiendaID] int  NOT NULL,
   [FechaInicio] datetime2(0)  NOT NULL,
   [FechaFin] datetime2(0) DEFAULT NULL  NULL,
   [NumeroTotalDeProductos] int  NOT NULL,
   [CantidadTotalDeProductos] int DEFAULT NULL  NULL,
   [Valor] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tamano',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tamano'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'tienda'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[tienda]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[tienda]
(
   [Buscable_P] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Cliente_P] char(10)  NOT NULL,
   [CalificableSeguible_P] int  NOT NULL,
   [Interlocutor_P] int  NOT NULL,
   [Dibujable_P] int  NOT NULL,
   [TiendaID] int IDENTITY(1, 1)  NOT NULL,
   [Abierto] smallint  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tienda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tienda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tiendasconsumidores'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'tiendasconsumidores'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[tiendasconsumidores]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[tiendasconsumidores]
(
   [RegionGeograficaID] int  NOT NULL,
   [FechaInicio] datetime2(0)  NOT NULL,
   [FechaFin] datetime2(0) DEFAULT NULL  NULL,
   [NumeroDeConsumidores] bigint  NOT NULL,
   [NumeroDeTiendas] bigint  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tiendasconsumidores',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tiendasconsumidores'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tipodecodigo'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'tipodecodigo'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[tipodecodigo]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[tipodecodigo]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(7)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tipodecodigo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tipodecodigo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'turno'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'turno'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[turno]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[turno]
(
   [TiendaID] int  NOT NULL,

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Dia] char(9)  NOT NULL,
   [HoraDeApertura] time  NOT NULL,
   [HoraDeCierre] time  NOT NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.turno',
        N'SCHEMA', N'dbo',
        N'TABLE', N'turno'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'usuario'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'usuario'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[usuario]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[usuario]
(
   [UsuarioID] int IDENTITY(2, 1)  NOT NULL,
   [Parroquia] int DEFAULT NULL  NULL,

   /*
   *   SSMA informational messages:
   *   M2SS0149: The ssma$rowid column has been added
   */

   [ssma$rowid] uniqueidentifier DEFAULT newid()  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.usuario',
        N'SCHEMA', N'dbo',
        N'TABLE', N'usuario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'visibilidad'  AND sc.name=N'dbo'  AND type in (N'U'))
BEGIN

  DECLARE @drop_statement nvarchar(500)

  DECLARE drop_cursor CURSOR FOR
      SELECT 'alter table '+quotename(schema_name(ob.schema_id))+
      '.'+quotename(object_name(ob.object_id))+ ' drop constraint ' + quotename(fk.name) 
      FROM sys.objects ob INNER JOIN sys.foreign_keys fk ON fk.parent_object_id = ob.object_id
      WHERE fk.referenced_object_id = 
          (
             SELECT so.object_id 
             FROM sys.objects so JOIN sys.schemas sc
             ON so.schema_id = sc.schema_id
             WHERE so.name = N'visibilidad'  AND sc.name=N'dbo'  AND type in (N'U')
           )

  OPEN drop_cursor

  FETCH NEXT FROM drop_cursor
  INTO @drop_statement

  WHILE @@FETCH_STATUS = 0
  BEGIN
     EXEC (@drop_statement)

     FETCH NEXT FROM drop_cursor
     INTO @drop_statement
  END

  CLOSE drop_cursor
  DEALLOCATE drop_cursor

  DROP TABLE [dbo].[visibilidad]
END 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE 
[dbo].[visibilidad]
(

   /*
   *   SSMA warning messages:
   *   M2SS0183: The following SQL clause was ignored during conversion: COLLATE latin1_spanish_ci.

   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   [Valor] char(16)  NOT NULL
)
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.visibilidad',
        N'SCHEMA', N'dbo',
        N'TABLE', N'visibilidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_acceso_AccesoID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[acceso] DROP CONSTRAINT [PK_acceso_AccesoID]
 GO



ALTER TABLE [dbo].[acceso]
 ADD CONSTRAINT [PK_acceso_AccesoID]
 PRIMARY KEY 
   CLUSTERED ([AccesoID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_accion_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[accion] DROP CONSTRAINT [PK_accion_Valor]
 GO



ALTER TABLE [dbo].[accion]
 ADD CONSTRAINT [PK_accion_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_administrador_AdministradorID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [PK_administrador_AdministradorID]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [PK_administrador_AdministradorID]
 PRIMARY KEY 
   CLUSTERED ([AdministradorID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_buscable_BuscableID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[buscable] DROP CONSTRAINT [PK_buscable_BuscableID]
 GO



ALTER TABLE [dbo].[buscable]
 ADD CONSTRAINT [PK_buscable_BuscableID]
 PRIMARY KEY 
   CLUSTERED ([BuscableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_busqueda_BusquedaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [PK_busqueda_BusquedaID]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [PK_busqueda_BusquedaID]
 PRIMARY KEY 
   CLUSTERED ([BusquedaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_calificableseguible_CalificableSeguibleID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[calificableseguible] DROP CONSTRAINT [PK_calificableseguible_CalificableSeguibleID]
 GO



ALTER TABLE [dbo].[calificableseguible]
 ADD CONSTRAINT [PK_calificableseguible_CalificableSeguibleID]
 PRIMARY KEY 
   CLUSTERED ([CalificableSeguibleID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_calificacion_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[calificacion] DROP CONSTRAINT [PK_calificacion_Valor]
 GO



ALTER TABLE [dbo].[calificacion]
 ADD CONSTRAINT [PK_calificacion_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_calificacionresena_CalificableSeguibleID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [PK_calificacionresena_CalificableSeguibleID]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [PK_calificacionresena_CalificableSeguibleID]
 PRIMARY KEY 
   CLUSTERED ([CalificableSeguibleID] ASC, [ConsumidorID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_categoria_CategoriaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[categoria] DROP CONSTRAINT [PK_categoria_CategoriaID]
 GO



ALTER TABLE [dbo].[categoria]
 ADD CONSTRAINT [PK_categoria_CategoriaID]
 PRIMARY KEY 
   CLUSTERED ([CategoriaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_ciudad_CiudadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[ciudad] DROP CONSTRAINT [PK_ciudad_CiudadID]
 GO



ALTER TABLE [dbo].[ciudad]
 ADD CONSTRAINT [PK_ciudad_CiudadID]
 PRIMARY KEY 
   CLUSTERED ([CiudadID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_cliente_RIF'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [PK_cliente_RIF]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [PK_cliente_RIF]
 PRIMARY KEY 
   CLUSTERED ([RIF] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_cobrable_CobrableID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[cobrable] DROP CONSTRAINT [PK_cobrable_CobrableID]
 GO



ALTER TABLE [dbo].[cobrable]
 ADD CONSTRAINT [PK_cobrable_CobrableID]
 PRIMARY KEY 
   CLUSTERED ([CobrableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_codigodeerror_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[codigodeerror] DROP CONSTRAINT [PK_codigodeerror_Valor]
 GO



ALTER TABLE [dbo].[codigodeerror]
 ADD CONSTRAINT [PK_codigodeerror_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_consumidor_ConsumidorID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [PK_consumidor_ConsumidorID]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [PK_consumidor_ConsumidorID]
 PRIMARY KEY 
   CLUSTERED ([ConsumidorID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_consumidorobjetivo_PublicidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[consumidorobjetivo] DROP CONSTRAINT [PK_consumidorobjetivo_PublicidadID]
 GO



ALTER TABLE [dbo].[consumidorobjetivo]
 ADD CONSTRAINT [PK_consumidorobjetivo_PublicidadID]
 PRIMARY KEY 
   CLUSTERED ([PublicidadID] ASC, [ConsumidorID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_contadordeexhibiciones_EstadisticasDeVisitasID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[contadordeexhibiciones] DROP CONSTRAINT [PK_contadordeexhibiciones_EstadisticasDeVisitasID]
 GO



ALTER TABLE [dbo].[contadordeexhibiciones]
 ADD CONSTRAINT [PK_contadordeexhibiciones_EstadisticasDeVisitasID]
 PRIMARY KEY 
   CLUSTERED ([EstadisticasDeVisitasID] ASC, [FechaInicio] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_continente_ContinenteID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[continente] DROP CONSTRAINT [PK_continente_ContinenteID]
 GO



ALTER TABLE [dbo].[continente]
 ADD CONSTRAINT [PK_continente_ContinenteID]
 PRIMARY KEY 
   CLUSTERED ([ContinenteID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_croquis_CroquisID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[croquis] DROP CONSTRAINT [PK_croquis_CroquisID]
 GO



ALTER TABLE [dbo].[croquis]
 ADD CONSTRAINT [PK_croquis_CroquisID]
 PRIMARY KEY 
   CLUSTERED ([CroquisID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_describible_DescribibleID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[describible] DROP CONSTRAINT [PK_describible_DescribibleID]
 GO



ALTER TABLE [dbo].[describible]
 ADD CONSTRAINT [PK_describible_DescribibleID]
 PRIMARY KEY 
   CLUSTERED ([DescribibleID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_descripcion_DescripcionID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [PK_descripcion_DescripcionID]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [PK_descripcion_DescripcionID]
 PRIMARY KEY 
   CLUSTERED ([DescripcionID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_dia_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[dia] DROP CONSTRAINT [PK_dia_Valor]
 GO



ALTER TABLE [dbo].[dia]
 ADD CONSTRAINT [PK_dia_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_dibujable_DibujableID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[dibujable] DROP CONSTRAINT [PK_dibujable_DibujableID]
 GO



ALTER TABLE [dbo].[dibujable]
 ADD CONSTRAINT [PK_dibujable_DibujableID]
 PRIMARY KEY 
   CLUSTERED ([DibujableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estadisticas_EstadisticasID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estadisticas] DROP CONSTRAINT [PK_estadisticas_EstadisticasID]
 GO



ALTER TABLE [dbo].[estadisticas]
 ADD CONSTRAINT [PK_estadisticas_EstadisticasID]
 PRIMARY KEY 
   CLUSTERED ([EstadisticasID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estadisticasdeinfluencia_EstadisticasDeInfluenciaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estadisticasdeinfluencia] DROP CONSTRAINT [PK_estadisticasdeinfluencia_EstadisticasDeInfluenciaID]
 GO



ALTER TABLE [dbo].[estadisticasdeinfluencia]
 ADD CONSTRAINT [PK_estadisticasdeinfluencia_EstadisticasDeInfluenciaID]
 PRIMARY KEY 
   CLUSTERED ([EstadisticasDeInfluenciaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estadisticasdepopularidad_EstadisticasDePopularidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estadisticasdepopularidad] DROP CONSTRAINT [PK_estadisticasdepopularidad_EstadisticasDePopularidadID]
 GO



ALTER TABLE [dbo].[estadisticasdepopularidad]
 ADD CONSTRAINT [PK_estadisticasdepopularidad_EstadisticasDePopularidadID]
 PRIMARY KEY 
   CLUSTERED ([EstadisticasDePopularidadID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estadisticasdevisitas_EstadisticasDeVisitasID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estadisticasdevisitas] DROP CONSTRAINT [PK_estadisticasdevisitas_EstadisticasDeVisitasID]
 GO



ALTER TABLE [dbo].[estadisticasdevisitas]
 ADD CONSTRAINT [PK_estadisticasdevisitas_EstadisticasDeVisitasID]
 PRIMARY KEY 
   CLUSTERED ([EstadisticasDeVisitasID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estadisticastemporales_EstadisticasID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estadisticastemporales] DROP CONSTRAINT [PK_estadisticastemporales_EstadisticasID]
 GO



ALTER TABLE [dbo].[estadisticastemporales]
 ADD CONSTRAINT [PK_estadisticastemporales_EstadisticasID]
 PRIMARY KEY 
   CLUSTERED ([EstadisticasID] ASC, [FechaInicio] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estado_EstadoID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [PK_estado_EstadoID]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [PK_estado_EstadoID]
 PRIMARY KEY 
   CLUSTERED ([EstadoID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_estatus_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[estatus] DROP CONSTRAINT [PK_estatus_Valor]
 GO



ALTER TABLE [dbo].[estatus]
 ADD CONSTRAINT [PK_estatus_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_etiqueta_EtiquetableID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[etiqueta] DROP CONSTRAINT [PK_etiqueta_EtiquetableID]
 GO



ALTER TABLE [dbo].[etiqueta]
 ADD CONSTRAINT [PK_etiqueta_EtiquetableID]
 PRIMARY KEY 
   CLUSTERED ([EtiquetableID] ASC, [PalabraID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_etiquetable_EtiquetableID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[etiquetable] DROP CONSTRAINT [PK_etiquetable_EtiquetableID]
 GO



ALTER TABLE [dbo].[etiquetable]
 ADD CONSTRAINT [PK_etiquetable_EtiquetableID]
 PRIMARY KEY 
   CLUSTERED ([EtiquetableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_factura_FacturaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[factura] DROP CONSTRAINT [PK_factura_FacturaID]
 GO



ALTER TABLE [dbo].[factura]
 ADD CONSTRAINT [PK_factura_FacturaID]
 PRIMARY KEY 
   CLUSTERED ([FacturaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_foto_FotoID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[foto] DROP CONSTRAINT [PK_foto_FotoID]
 GO



ALTER TABLE [dbo].[foto]
 ADD CONSTRAINT [PK_foto_FotoID]
 PRIMARY KEY 
   CLUSTERED ([FotoID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_gradodeinstruccion_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[gradodeinstruccion] DROP CONSTRAINT [PK_gradodeinstruccion_Valor]
 GO



ALTER TABLE [dbo].[gradodeinstruccion]
 ADD CONSTRAINT [PK_gradodeinstruccion_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_gradodeinstruccionobjetivo_PublicidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[gradodeinstruccionobjetivo] DROP CONSTRAINT [PK_gradodeinstruccionobjetivo_PublicidadID]
 GO



ALTER TABLE [dbo].[gradodeinstruccionobjetivo]
 ADD CONSTRAINT [PK_gradodeinstruccionobjetivo_PublicidadID]
 PRIMARY KEY 
   CLUSTERED ([PublicidadID] ASC, [GradoDeInstruccion] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_grupodeedad_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[grupodeedad] DROP CONSTRAINT [PK_grupodeedad_Valor]
 GO



ALTER TABLE [dbo].[grupodeedad]
 ADD CONSTRAINT [PK_grupodeedad_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_grupodeedadobjetivo_PublicidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[grupodeedadobjetivo] DROP CONSTRAINT [PK_grupodeedadobjetivo_PublicidadID]
 GO



ALTER TABLE [dbo].[grupodeedadobjetivo]
 ADD CONSTRAINT [PK_grupodeedadobjetivo_PublicidadID]
 PRIMARY KEY 
   CLUSTERED ([PublicidadID] ASC, [GrupoDeEdad] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_horariodetrabajo_TiendaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[horariodetrabajo] DROP CONSTRAINT [PK_horariodetrabajo_TiendaID]
 GO



ALTER TABLE [dbo].[horariodetrabajo]
 ADD CONSTRAINT [PK_horariodetrabajo_TiendaID]
 PRIMARY KEY 
   CLUSTERED ([TiendaID] ASC, [Dia] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_husohorario_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[husohorario] DROP CONSTRAINT [PK_husohorario_Valor]
 GO



ALTER TABLE [dbo].[husohorario]
 ADD CONSTRAINT [PK_husohorario_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_idioma_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[idioma] DROP CONSTRAINT [PK_idioma_Valor]
 GO



ALTER TABLE [dbo].[idioma]
 ADD CONSTRAINT [PK_idioma_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_interlocutor_InterlocutorID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[interlocutor] DROP CONSTRAINT [PK_interlocutor_InterlocutorID]
 GO



ALTER TABLE [dbo].[interlocutor]
 ADD CONSTRAINT [PK_interlocutor_InterlocutorID]
 PRIMARY KEY 
   CLUSTERED ([InterlocutorID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_inventario_TiendaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [PK_inventario_TiendaID]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [PK_inventario_TiendaID]
 PRIMARY KEY 
   CLUSTERED ([TiendaID] ASC, [Codigo] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_mensaje_MensajeID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [PK_mensaje_MensajeID]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [PK_mensaje_MensajeID]
 PRIMARY KEY 
   CLUSTERED ([MensajeID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_municipio_MunicipioID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[municipio] DROP CONSTRAINT [PK_municipio_MunicipioID]
 GO



ALTER TABLE [dbo].[municipio]
 ADD CONSTRAINT [PK_municipio_MunicipioID]
 PRIMARY KEY 
   CLUSTERED ([MunicipioID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_pais_PaisID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [PK_pais_PaisID]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [PK_pais_PaisID]
 PRIMARY KEY 
   CLUSTERED ([PaisID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_paissubcontinente_SubcontinenteID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[paissubcontinente] DROP CONSTRAINT [PK_paissubcontinente_SubcontinenteID]
 GO



ALTER TABLE [dbo].[paissubcontinente]
 ADD CONSTRAINT [PK_paissubcontinente_SubcontinenteID]
 PRIMARY KEY 
   CLUSTERED ([SubcontinenteID] ASC, [PaisID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_palabra_PalabraID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[palabra] DROP CONSTRAINT [PK_palabra_PalabraID]
 GO



ALTER TABLE [dbo].[palabra]
 ADD CONSTRAINT [PK_palabra_PalabraID]
 PRIMARY KEY 
   CLUSTERED ([PalabraID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_parroquia_ParroquiaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[parroquia] DROP CONSTRAINT [PK_parroquia_ParroquiaID]
 GO



ALTER TABLE [dbo].[parroquia]
 ADD CONSTRAINT [PK_parroquia_ParroquiaID]
 PRIMARY KEY 
   CLUSTERED ([ParroquiaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_patrocinante_PatrocinanteID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[patrocinante] DROP CONSTRAINT [PK_patrocinante_PatrocinanteID]
 GO



ALTER TABLE [dbo].[patrocinante]
 ADD CONSTRAINT [PK_patrocinante_PatrocinanteID]
 PRIMARY KEY 
   CLUSTERED ([PatrocinanteID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_preciocantidad_TiendaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[preciocantidad] DROP CONSTRAINT [PK_preciocantidad_TiendaID]
 GO



ALTER TABLE [dbo].[preciocantidad]
 ADD CONSTRAINT [PK_preciocantidad_TiendaID]
 PRIMARY KEY 
   CLUSTERED ([TiendaID] ASC, [Codigo] ASC, [FechaInicio] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_privilegios_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[privilegios] DROP CONSTRAINT [PK_privilegios_Valor]
 GO



ALTER TABLE [dbo].[privilegios]
 ADD CONSTRAINT [PK_privilegios_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_producto_ProductoID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [PK_producto_ProductoID]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [PK_producto_ProductoID]
 PRIMARY KEY 
   CLUSTERED ([ProductoID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_publicidad_PublicidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [PK_publicidad_PublicidadID]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [PK_publicidad_PublicidadID]
 PRIMARY KEY 
   CLUSTERED ([PublicidadID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_punto_PuntoID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[punto] DROP CONSTRAINT [PK_punto_PuntoID]
 GO



ALTER TABLE [dbo].[punto]
 ADD CONSTRAINT [PK_punto_PuntoID]
 PRIMARY KEY 
   CLUSTERED ([PuntoID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_puntodecroquis_CroquisID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[puntodecroquis] DROP CONSTRAINT [PK_puntodecroquis_CroquisID]
 GO



ALTER TABLE [dbo].[puntodecroquis]
 ADD CONSTRAINT [PK_puntodecroquis_CroquisID]
 PRIMARY KEY 
   CLUSTERED ([CroquisID] ASC, [PuntoID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_rastreable_RastreableID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[rastreable] DROP CONSTRAINT [PK_rastreable_RastreableID]
 GO



ALTER TABLE [dbo].[rastreable]
 ADD CONSTRAINT [PK_rastreable_RastreableID]
 PRIMARY KEY 
   CLUSTERED ([RastreableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_regiongeografica_RegionGeograficaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[regiongeografica] DROP CONSTRAINT [PK_regiongeografica_RegionGeograficaID]
 GO



ALTER TABLE [dbo].[regiongeografica]
 ADD CONSTRAINT [PK_regiongeografica_RegionGeograficaID]
 PRIMARY KEY 
   CLUSTERED ([RegionGeograficaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_regiongeograficaobjetivo_PublicidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[regiongeograficaobjetivo] DROP CONSTRAINT [PK_regiongeograficaobjetivo_PublicidadID]
 GO



ALTER TABLE [dbo].[regiongeograficaobjetivo]
 ADD CONSTRAINT [PK_regiongeograficaobjetivo_PublicidadID]
 PRIMARY KEY 
   CLUSTERED ([PublicidadID] ASC, [RegionGeograficaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_registro_RegistroID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[registro] DROP CONSTRAINT [PK_registro_RegistroID]
 GO



ALTER TABLE [dbo].[registro]
 ADD CONSTRAINT [PK_registro_RegistroID]
 PRIMARY KEY 
   CLUSTERED ([RegistroID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_relaciondepalabras_Palabra1ID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[relaciondepalabras] DROP CONSTRAINT [PK_relaciondepalabras_Palabra1ID]
 GO



ALTER TABLE [dbo].[relaciondepalabras]
 ADD CONSTRAINT [PK_relaciondepalabras_Palabra1ID]
 PRIMARY KEY 
   CLUSTERED ([Palabra1ID] ASC, [Palabra2ID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_resultadodebusqueda_BusquedaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[resultadodebusqueda] DROP CONSTRAINT [PK_resultadodebusqueda_BusquedaID]
 GO



ALTER TABLE [dbo].[resultadodebusqueda]
 ADD CONSTRAINT [PK_resultadodebusqueda_BusquedaID]
 PRIMARY KEY 
   CLUSTERED ([BusquedaID] ASC, [BuscableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_seguidor_ConsumidorID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[seguidor] DROP CONSTRAINT [PK_seguidor_ConsumidorID]
 GO



ALTER TABLE [dbo].[seguidor]
 ADD CONSTRAINT [PK_seguidor_ConsumidorID]
 PRIMARY KEY 
   CLUSTERED ([ConsumidorID] ASC, [CalificableSeguibleID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_serviciovendido_FacturaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[serviciovendido] DROP CONSTRAINT [PK_serviciovendido_FacturaID]
 GO



ALTER TABLE [dbo].[serviciovendido]
 ADD CONSTRAINT [PK_serviciovendido_FacturaID]
 PRIMARY KEY 
   CLUSTERED ([FacturaID] ASC, [CobrableID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_sexo_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[sexo] DROP CONSTRAINT [PK_sexo_Valor]
 GO



ALTER TABLE [dbo].[sexo]
 ADD CONSTRAINT [PK_sexo_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_sexoobjetivo_PublicidadID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[sexoobjetivo] DROP CONSTRAINT [PK_sexoobjetivo_PublicidadID]
 GO



ALTER TABLE [dbo].[sexoobjetivo]
 ADD CONSTRAINT [PK_sexoobjetivo_PublicidadID]
 PRIMARY KEY 
   CLUSTERED ([PublicidadID] ASC, [Sexo] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_subcontinente_SubcontinenteID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[subcontinente] DROP CONSTRAINT [PK_subcontinente_SubcontinenteID]
 GO



ALTER TABLE [dbo].[subcontinente]
 ADD CONSTRAINT [PK_subcontinente_SubcontinenteID]
 PRIMARY KEY 
   CLUSTERED ([SubcontinenteID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_tamano_TiendaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[tamano] DROP CONSTRAINT [PK_tamano_TiendaID]
 GO



ALTER TABLE [dbo].[tamano]
 ADD CONSTRAINT [PK_tamano_TiendaID]
 PRIMARY KEY 
   CLUSTERED ([TiendaID] ASC, [FechaInicio] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_tienda_TiendaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [PK_tienda_TiendaID]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [PK_tienda_TiendaID]
 PRIMARY KEY 
   CLUSTERED ([TiendaID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_tiendasconsumidores_RegionGeograficaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[tiendasconsumidores] DROP CONSTRAINT [PK_tiendasconsumidores_RegionGeograficaID]
 GO



ALTER TABLE [dbo].[tiendasconsumidores]
 ADD CONSTRAINT [PK_tiendasconsumidores_RegionGeograficaID]
 PRIMARY KEY 
   CLUSTERED ([RegionGeograficaID] ASC, [FechaInicio] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_tipodecodigo_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[tipodecodigo] DROP CONSTRAINT [PK_tipodecodigo_Valor]
 GO



ALTER TABLE [dbo].[tipodecodigo]
 ADD CONSTRAINT [PK_tipodecodigo_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_turno_TiendaID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[turno] DROP CONSTRAINT [PK_turno_TiendaID]
 GO



ALTER TABLE [dbo].[turno]
 ADD CONSTRAINT [PK_turno_TiendaID]
 PRIMARY KEY 
   CLUSTERED ([TiendaID] ASC, [Dia] ASC, [HoraDeApertura] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_usuario_UsuarioID'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[usuario] DROP CONSTRAINT [PK_usuario_UsuarioID]
 GO



ALTER TABLE [dbo].[usuario]
 ADD CONSTRAINT [PK_usuario_UsuarioID]
 PRIMARY KEY 
   CLUSTERED ([UsuarioID] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'PK_visibilidad_Valor'  AND sc.name=N'dbo'  AND type in (N'PK'))
ALTER TABLE [dbo].[visibilidad] DROP CONSTRAINT [PK_visibilidad_Valor]
 GO



ALTER TABLE [dbo].[visibilidad]
 ADD CONSTRAINT [PK_visibilidad_Valor]
 PRIMARY KEY 
   CLUSTERED ([Valor] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'acceso$CorreoElectronico_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[acceso] DROP CONSTRAINT [acceso$CorreoElectronico_UNIQUE]
 GO



ALTER TABLE [dbo].[acceso]
 ADD CONSTRAINT [acceso$CorreoElectronico_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([CorreoElectronico] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_administrador_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [UK_administrador_ssma$rowid]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [UK_administrador_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador$Usuario_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [administrador$Usuario_P_UNIQUE]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [administrador$Usuario_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Usuario_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [administrador$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [administrador$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_buscable_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[buscable] DROP CONSTRAINT [UK_buscable_ssma$rowid]
 GO



ALTER TABLE [dbo].[buscable]
 ADD CONSTRAINT [UK_buscable_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_busqueda_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [UK_busqueda_ssma$rowid]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [UK_busqueda_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'busqueda$Etiquetable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [busqueda$Etiquetable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [busqueda$Etiquetable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Etiquetable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'busqueda$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [busqueda$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [busqueda$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_calificableseguible_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[calificableseguible] DROP CONSTRAINT [UK_calificableseguible_ssma$rowid]
 GO



ALTER TABLE [dbo].[calificableseguible]
 ADD CONSTRAINT [UK_calificableseguible_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_calificacionresena_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [UK_calificacionresena_ssma$rowid]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [UK_calificacionresena_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$Etiquetable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$Etiquetable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$Etiquetable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Etiquetable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_categoria_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[categoria] DROP CONSTRAINT [UK_categoria_ssma$rowid]
 GO



ALTER TABLE [dbo].[categoria]
 ADD CONSTRAINT [UK_categoria_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'categoria$Etiquetable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[categoria] DROP CONSTRAINT [categoria$Etiquetable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[categoria]
 ADD CONSTRAINT [categoria$Etiquetable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Etiquetable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_ciudad_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[ciudad] DROP CONSTRAINT [UK_ciudad_ssma$rowid]
 GO



ALTER TABLE [dbo].[ciudad]
 ADD CONSTRAINT [UK_ciudad_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'ciudad$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[ciudad] DROP CONSTRAINT [ciudad$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[ciudad]
 ADD CONSTRAINT [ciudad$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_cliente_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [UK_cliente_ssma$rowid]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [UK_cliente_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$Telefono_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$Telefono_UNIQUE]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$Telefono_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Telefono] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$Describible_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$Describible_P_UNIQUE]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$Describible_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Describible_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$NombreLegal_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$NombreLegal_UNIQUE]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$NombreLegal_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([NombreLegal] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$Usuario_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$Usuario_P_UNIQUE]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$Usuario_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Usuario_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_cobrable_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[cobrable] DROP CONSTRAINT [UK_cobrable_ssma$rowid]
 GO



ALTER TABLE [dbo].[cobrable]
 ADD CONSTRAINT [UK_cobrable_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_consumidor_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [UK_consumidor_ssma$rowid]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [UK_consumidor_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$Interlocutor_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$Interlocutor_P_UNIQUE]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$Interlocutor_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Interlocutor_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$Usuario_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$Usuario_P_UNIQUE]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$Usuario_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Usuario_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_consumidorobjetivo_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[consumidorobjetivo] DROP CONSTRAINT [UK_consumidorobjetivo_ssma$rowid]
 GO



ALTER TABLE [dbo].[consumidorobjetivo]
 ADD CONSTRAINT [UK_consumidorobjetivo_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_contadordeexhibiciones_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[contadordeexhibiciones] DROP CONSTRAINT [UK_contadordeexhibiciones_ssma$rowid]
 GO



ALTER TABLE [dbo].[contadordeexhibiciones]
 ADD CONSTRAINT [UK_contadordeexhibiciones_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'contadordeexhibiciones$FechaFin_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[contadordeexhibiciones] DROP CONSTRAINT [contadordeexhibiciones$FechaFin_UNIQUE]
 GO



ALTER TABLE [dbo].[contadordeexhibiciones]
 ADD CONSTRAINT [contadordeexhibiciones$FechaFin_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([FechaFin] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_continente_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[continente] DROP CONSTRAINT [UK_continente_ssma$rowid]
 GO



ALTER TABLE [dbo].[continente]
 ADD CONSTRAINT [UK_continente_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'continente$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[continente] DROP CONSTRAINT [continente$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[continente]
 ADD CONSTRAINT [continente$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_croquis_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[croquis] DROP CONSTRAINT [UK_croquis_ssma$rowid]
 GO



ALTER TABLE [dbo].[croquis]
 ADD CONSTRAINT [UK_croquis_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'croquis$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[croquis] DROP CONSTRAINT [croquis$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[croquis]
 ADD CONSTRAINT [croquis$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_describible_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[describible] DROP CONSTRAINT [UK_describible_ssma$rowid]
 GO



ALTER TABLE [dbo].[describible]
 ADD CONSTRAINT [UK_describible_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_descripcion_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [UK_descripcion_ssma$rowid]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [UK_descripcion_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'descripcion$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [descripcion$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [descripcion$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'descripcion$Etiquetable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [descripcion$Etiquetable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [descripcion$Etiquetable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Etiquetable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_dibujable_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[dibujable] DROP CONSTRAINT [UK_dibujable_ssma$rowid]
 GO



ALTER TABLE [dbo].[dibujable]
 ADD CONSTRAINT [UK_dibujable_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_estadisticas_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticas] DROP CONSTRAINT [UK_estadisticas_ssma$rowid]
 GO



ALTER TABLE [dbo].[estadisticas]
 ADD CONSTRAINT [UK_estadisticas_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticas$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticas] DROP CONSTRAINT [estadisticas$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[estadisticas]
 ADD CONSTRAINT [estadisticas$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_estadisticasdeinfluencia_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticasdeinfluencia] DROP CONSTRAINT [UK_estadisticasdeinfluencia_ssma$rowid]
 GO



ALTER TABLE [dbo].[estadisticasdeinfluencia]
 ADD CONSTRAINT [UK_estadisticasdeinfluencia_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdeinfluencia$Estadisticas_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticasdeinfluencia] DROP CONSTRAINT [estadisticasdeinfluencia$Estadisticas_P_UNIQUE]
 GO



ALTER TABLE [dbo].[estadisticasdeinfluencia]
 ADD CONSTRAINT [estadisticasdeinfluencia$Estadisticas_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Estadisticas_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_estadisticasdepopularidad_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticasdepopularidad] DROP CONSTRAINT [UK_estadisticasdepopularidad_ssma$rowid]
 GO



ALTER TABLE [dbo].[estadisticasdepopularidad]
 ADD CONSTRAINT [UK_estadisticasdepopularidad_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdepopularidad$Estadisticas_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticasdepopularidad] DROP CONSTRAINT [estadisticasdepopularidad$Estadisticas_P_UNIQUE]
 GO



ALTER TABLE [dbo].[estadisticasdepopularidad]
 ADD CONSTRAINT [estadisticasdepopularidad$Estadisticas_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Estadisticas_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_estadisticasdevisitas_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticasdevisitas] DROP CONSTRAINT [UK_estadisticasdevisitas_ssma$rowid]
 GO



ALTER TABLE [dbo].[estadisticasdevisitas]
 ADD CONSTRAINT [UK_estadisticasdevisitas_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdevisitas$Estadisticas_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticasdevisitas] DROP CONSTRAINT [estadisticasdevisitas$Estadisticas_P_UNIQUE]
 GO



ALTER TABLE [dbo].[estadisticasdevisitas]
 ADD CONSTRAINT [estadisticasdevisitas$Estadisticas_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Estadisticas_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_estadisticastemporales_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estadisticastemporales] DROP CONSTRAINT [UK_estadisticastemporales_ssma$rowid]
 GO



ALTER TABLE [dbo].[estadisticastemporales]
 ADD CONSTRAINT [UK_estadisticastemporales_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_estado_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [UK_estado_ssma$rowid]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [UK_estado_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estado$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [estado$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [estado$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_etiqueta_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[etiqueta] DROP CONSTRAINT [UK_etiqueta_ssma$rowid]
 GO



ALTER TABLE [dbo].[etiqueta]
 ADD CONSTRAINT [UK_etiqueta_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_etiquetable_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[etiquetable] DROP CONSTRAINT [UK_etiquetable_ssma$rowid]
 GO



ALTER TABLE [dbo].[etiquetable]
 ADD CONSTRAINT [UK_etiquetable_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_factura_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[factura] DROP CONSTRAINT [UK_factura_ssma$rowid]
 GO



ALTER TABLE [dbo].[factura]
 ADD CONSTRAINT [UK_factura_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'factura$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[factura] DROP CONSTRAINT [factura$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[factura]
 ADD CONSTRAINT [factura$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_gradodeinstruccionobjetivo_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[gradodeinstruccionobjetivo] DROP CONSTRAINT [UK_gradodeinstruccionobjetivo_ssma$rowid]
 GO



ALTER TABLE [dbo].[gradodeinstruccionobjetivo]
 ADD CONSTRAINT [UK_gradodeinstruccionobjetivo_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_grupodeedadobjetivo_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[grupodeedadobjetivo] DROP CONSTRAINT [UK_grupodeedadobjetivo_ssma$rowid]
 GO



ALTER TABLE [dbo].[grupodeedadobjetivo]
 ADD CONSTRAINT [UK_grupodeedadobjetivo_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_horariodetrabajo_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[horariodetrabajo] DROP CONSTRAINT [UK_horariodetrabajo_ssma$rowid]
 GO



ALTER TABLE [dbo].[horariodetrabajo]
 ADD CONSTRAINT [UK_horariodetrabajo_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_interlocutor_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[interlocutor] DROP CONSTRAINT [UK_interlocutor_ssma$rowid]
 GO



ALTER TABLE [dbo].[interlocutor]
 ADD CONSTRAINT [UK_interlocutor_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_inventario_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [UK_inventario_ssma$rowid]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [UK_inventario_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$Cobrable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$Cobrable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$Cobrable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Cobrable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_mensaje_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [UK_mensaje_ssma$rowid]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [UK_mensaje_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje$Etiquetable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [mensaje$Etiquetable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [mensaje$Etiquetable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Etiquetable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [mensaje$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [mensaje$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_municipio_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[municipio] DROP CONSTRAINT [UK_municipio_ssma$rowid]
 GO



ALTER TABLE [dbo].[municipio]
 ADD CONSTRAINT [UK_municipio_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'municipio$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[municipio] DROP CONSTRAINT [municipio$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[municipio]
 ADD CONSTRAINT [municipio$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_pais_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [UK_pais_ssma$rowid]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [UK_pais_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais$Capital_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [pais$Capital_UNIQUE]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [pais$Capital_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Capital] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [pais$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [pais$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_paissubcontinente_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[paissubcontinente] DROP CONSTRAINT [UK_paissubcontinente_ssma$rowid]
 GO



ALTER TABLE [dbo].[paissubcontinente]
 ADD CONSTRAINT [UK_paissubcontinente_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_palabra_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[palabra] DROP CONSTRAINT [UK_palabra_ssma$rowid]
 GO



ALTER TABLE [dbo].[palabra]
 ADD CONSTRAINT [UK_palabra_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'palabra$Palabra_Frase_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[palabra] DROP CONSTRAINT [palabra$Palabra_Frase_UNIQUE]
 GO



ALTER TABLE [dbo].[palabra]
 ADD CONSTRAINT [palabra$Palabra_Frase_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Palabra_Frase] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_parroquia_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[parroquia] DROP CONSTRAINT [UK_parroquia_ssma$rowid]
 GO



ALTER TABLE [dbo].[parroquia]
 ADD CONSTRAINT [UK_parroquia_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'parroquia$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[parroquia] DROP CONSTRAINT [parroquia$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[parroquia]
 ADD CONSTRAINT [parroquia$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_patrocinante_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[patrocinante] DROP CONSTRAINT [UK_patrocinante_ssma$rowid]
 GO



ALTER TABLE [dbo].[patrocinante]
 ADD CONSTRAINT [UK_patrocinante_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'patrocinante$Cliente_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[patrocinante] DROP CONSTRAINT [patrocinante$Cliente_P_UNIQUE]
 GO



ALTER TABLE [dbo].[patrocinante]
 ADD CONSTRAINT [patrocinante$Cliente_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Cliente_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_preciocantidad_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[preciocantidad] DROP CONSTRAINT [UK_preciocantidad_ssma$rowid]
 GO



ALTER TABLE [dbo].[preciocantidad]
 ADD CONSTRAINT [UK_preciocantidad_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_producto_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [UK_producto_ssma$rowid]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [UK_producto_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$CodigoUniversal_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$CodigoUniversal_UNIQUE]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$CodigoUniversal_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Codigo] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$Describible_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$Describible_P_UNIQUE]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$Describible_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Describible_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$Buscable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$Buscable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$Buscable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Buscable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$CalificableSeguible_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$CalificableSeguible_P_UNIQUE]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$CalificableSeguible_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([CalificableSeguible_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_publicidad_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [UK_publicidad_ssma$rowid]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [UK_publicidad_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$Buscable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$Buscable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$Buscable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Buscable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$Describible_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$Describible_P_UNIQUE]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$Describible_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Describible_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$Etiquetable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$Etiquetable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$Etiquetable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Etiquetable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$Cobrable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$Cobrable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$Cobrable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Cobrable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_punto_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[punto] DROP CONSTRAINT [UK_punto_ssma$rowid]
 GO



ALTER TABLE [dbo].[punto]
 ADD CONSTRAINT [UK_punto_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_puntodecroquis_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[puntodecroquis] DROP CONSTRAINT [UK_puntodecroquis_ssma$rowid]
 GO



ALTER TABLE [dbo].[puntodecroquis]
 ADD CONSTRAINT [UK_puntodecroquis_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_rastreable_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[rastreable] DROP CONSTRAINT [UK_rastreable_ssma$rowid]
 GO



ALTER TABLE [dbo].[rastreable]
 ADD CONSTRAINT [UK_rastreable_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_regiongeografica_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[regiongeografica] DROP CONSTRAINT [UK_regiongeografica_ssma$rowid]
 GO



ALTER TABLE [dbo].[regiongeografica]
 ADD CONSTRAINT [UK_regiongeografica_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeografica$Dibujable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[regiongeografica] DROP CONSTRAINT [regiongeografica$Dibujable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[regiongeografica]
 ADD CONSTRAINT [regiongeografica$Dibujable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Dibujable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeografica$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[regiongeografica] DROP CONSTRAINT [regiongeografica$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[regiongeografica]
 ADD CONSTRAINT [regiongeografica$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_regiongeograficaobjetivo_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[regiongeograficaobjetivo] DROP CONSTRAINT [UK_regiongeograficaobjetivo_ssma$rowid]
 GO



ALTER TABLE [dbo].[regiongeograficaobjetivo]
 ADD CONSTRAINT [UK_regiongeograficaobjetivo_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_registro_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[registro] DROP CONSTRAINT [UK_registro_ssma$rowid]
 GO



ALTER TABLE [dbo].[registro]
 ADD CONSTRAINT [UK_registro_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_relaciondepalabras_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[relaciondepalabras] DROP CONSTRAINT [UK_relaciondepalabras_ssma$rowid]
 GO



ALTER TABLE [dbo].[relaciondepalabras]
 ADD CONSTRAINT [UK_relaciondepalabras_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_resultadodebusqueda_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[resultadodebusqueda] DROP CONSTRAINT [UK_resultadodebusqueda_ssma$rowid]
 GO



ALTER TABLE [dbo].[resultadodebusqueda]
 ADD CONSTRAINT [UK_resultadodebusqueda_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_seguidor_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[seguidor] DROP CONSTRAINT [UK_seguidor_ssma$rowid]
 GO



ALTER TABLE [dbo].[seguidor]
 ADD CONSTRAINT [UK_seguidor_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'seguidor$Rastreable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[seguidor] DROP CONSTRAINT [seguidor$Rastreable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[seguidor]
 ADD CONSTRAINT [seguidor$Rastreable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Rastreable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_serviciovendido_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[serviciovendido] DROP CONSTRAINT [UK_serviciovendido_ssma$rowid]
 GO



ALTER TABLE [dbo].[serviciovendido]
 ADD CONSTRAINT [UK_serviciovendido_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_sexoobjetivo_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[sexoobjetivo] DROP CONSTRAINT [UK_sexoobjetivo_ssma$rowid]
 GO



ALTER TABLE [dbo].[sexoobjetivo]
 ADD CONSTRAINT [UK_sexoobjetivo_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_subcontinente_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[subcontinente] DROP CONSTRAINT [UK_subcontinente_ssma$rowid]
 GO



ALTER TABLE [dbo].[subcontinente]
 ADD CONSTRAINT [UK_subcontinente_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'subcontinente$RegionGeografica_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[subcontinente] DROP CONSTRAINT [subcontinente$RegionGeografica_P_UNIQUE]
 GO



ALTER TABLE [dbo].[subcontinente]
 ADD CONSTRAINT [subcontinente$RegionGeografica_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([RegionGeografica_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_tamano_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tamano] DROP CONSTRAINT [UK_tamano_ssma$rowid]
 GO



ALTER TABLE [dbo].[tamano]
 ADD CONSTRAINT [UK_tamano_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_tienda_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [UK_tienda_ssma$rowid]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [UK_tienda_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$Buscable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$Buscable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$Buscable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Buscable_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$Cliente_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$Cliente_P_UNIQUE]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$Cliente_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Cliente_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$CalificableSeguible_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$CalificableSeguible_P_UNIQUE]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$CalificableSeguible_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([CalificableSeguible_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$Interlocutor_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$Interlocutor_P_UNIQUE]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$Interlocutor_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Interlocutor_P] ASC)

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$Dibujable_P_UNIQUE'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$Dibujable_P_UNIQUE]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$Dibujable_P_UNIQUE]
 UNIQUE 
   NONCLUSTERED ([Dibujable_P] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_tiendasconsumidores_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[tiendasconsumidores] DROP CONSTRAINT [UK_tiendasconsumidores_ssma$rowid]
 GO



ALTER TABLE [dbo].[tiendasconsumidores]
 ADD CONSTRAINT [UK_tiendasconsumidores_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_turno_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[turno] DROP CONSTRAINT [UK_turno_ssma$rowid]
 GO



ALTER TABLE [dbo].[turno]
 ADD CONSTRAINT [UK_turno_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'UK_usuario_ssma$rowid'  AND sc.name=N'dbo'  AND type in (N'UQ'))
ALTER TABLE [dbo].[usuario] DROP CONSTRAINT [UK_usuario_ssma$rowid]
 GO



ALTER TABLE [dbo].[usuario]
 ADD CONSTRAINT [UK_usuario_ssma$rowid]
 UNIQUE 
   NONCLUSTERED ([ssma$rowid] ASC)

GO


USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'acceso'  AND sc.name = N'dbo'  AND si.name = N'fk_Acceso_Usuario' AND so.type in (N'U'))
   DROP INDEX [dbo].[acceso].[fk_Acceso_Usuario] 
GO
CREATE NONCLUSTERED INDEX [fk_Acceso_Usuario] ON [dbo].[acceso]
(
   [AccesoID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'administrador'  AND sc.name = N'dbo'  AND si.name = N'fk_Administrador_Estatus' AND so.type in (N'U'))
   DROP INDEX [dbo].[administrador].[fk_Administrador_Estatus] 
GO
CREATE NONCLUSTERED INDEX [fk_Administrador_Estatus] ON [dbo].[administrador]
(
   [Estatus] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'administrador'  AND sc.name = N'dbo'  AND si.name = N'fk_Administrador_Privilegios' AND so.type in (N'U'))
   DROP INDEX [dbo].[administrador].[fk_Administrador_Privilegios] 
GO
CREATE NONCLUSTERED INDEX [fk_Administrador_Privilegios] ON [dbo].[administrador]
(
   [Privilegios] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'administrador'  AND sc.name = N'dbo'  AND si.name = N'fk_Administrador_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[administrador].[fk_Administrador_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Administrador_Rastreable] ON [dbo].[administrador]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'administrador'  AND sc.name = N'dbo'  AND si.name = N'fk_Administrador_Usuario' AND so.type in (N'U'))
   DROP INDEX [dbo].[administrador].[fk_Administrador_Usuario] 
GO
CREATE NONCLUSTERED INDEX [fk_Administrador_Usuario] ON [dbo].[administrador]
(
   [Usuario_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'busqueda'  AND sc.name = N'dbo'  AND si.name = N'fk_Busqueda_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[busqueda].[fk_Busqueda_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_Busqueda_Etiquetable] ON [dbo].[busqueda]
(
   [Etiquetable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'busqueda'  AND sc.name = N'dbo'  AND si.name = N'fk_Busqueda_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[busqueda].[fk_Busqueda_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Busqueda_Rastreable] ON [dbo].[busqueda]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'busqueda'  AND sc.name = N'dbo'  AND si.name = N'fk_Busqueda_Usuario' AND so.type in (N'U'))
   DROP INDEX [dbo].[busqueda].[fk_Busqueda_Usuario] 
GO
CREATE NONCLUSTERED INDEX [fk_Busqueda_Usuario] ON [dbo].[busqueda]
(
   [Usuario] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'calificacionresena'  AND sc.name = N'dbo'  AND si.name = N'fk_CalificacionResena_CalificableSeguible' AND so.type in (N'U'))
   DROP INDEX [dbo].[calificacionresena].[fk_CalificacionResena_CalificableSeguible] 
GO
CREATE NONCLUSTERED INDEX [fk_CalificacionResena_CalificableSeguible] ON [dbo].[calificacionresena]
(
   [CalificableSeguibleID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'calificacionresena'  AND sc.name = N'dbo'  AND si.name = N'fk_CalificacionResena_Calificacion' AND so.type in (N'U'))
   DROP INDEX [dbo].[calificacionresena].[fk_CalificacionResena_Calificacion] 
GO
CREATE NONCLUSTERED INDEX [fk_CalificacionResena_Calificacion] ON [dbo].[calificacionresena]
(
   [Calificacion] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'calificacionresena'  AND sc.name = N'dbo'  AND si.name = N'fk_CalificacionResena_Consumidor' AND so.type in (N'U'))
   DROP INDEX [dbo].[calificacionresena].[fk_CalificacionResena_Consumidor] 
GO
CREATE NONCLUSTERED INDEX [fk_CalificacionResena_Consumidor] ON [dbo].[calificacionresena]
(
   [ConsumidorID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'calificacionresena'  AND sc.name = N'dbo'  AND si.name = N'fk_CalificacionResena_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[calificacionresena].[fk_CalificacionResena_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_CalificacionResena_Etiquetable] ON [dbo].[calificacionresena]
(
   [Etiquetable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'calificacionresena'  AND sc.name = N'dbo'  AND si.name = N'fk_CalificacionResena_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[calificacionresena].[fk_CalificacionResena_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_CalificacionResena_Rastreable] ON [dbo].[calificacionresena]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'categoria'  AND sc.name = N'dbo'  AND si.name = N'fk_Categoria_Categoria' AND so.type in (N'U'))
   DROP INDEX [dbo].[categoria].[fk_Categoria_Categoria] 
GO
CREATE NONCLUSTERED INDEX [fk_Categoria_Categoria] ON [dbo].[categoria]
(
   [HijoDeCategoria] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'categoria'  AND sc.name = N'dbo'  AND si.name = N'fk_Categoria_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[categoria].[fk_Categoria_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_Categoria_Etiquetable] ON [dbo].[categoria]
(
   [Etiquetable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'ciudad'  AND sc.name = N'dbo'  AND si.name = N'fk_Ciudad_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[ciudad].[fk_Ciudad_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Ciudad_RegionGeografica] ON [dbo].[ciudad]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'cliente'  AND sc.name = N'dbo'  AND si.name = N'fk_Cliente_Categoria' AND so.type in (N'U'))
   DROP INDEX [dbo].[cliente].[fk_Cliente_Categoria] 
GO
CREATE NONCLUSTERED INDEX [fk_Cliente_Categoria] ON [dbo].[cliente]
(
   [Categoria] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'cliente'  AND sc.name = N'dbo'  AND si.name = N'fk_Cliente_Describible' AND so.type in (N'U'))
   DROP INDEX [dbo].[cliente].[fk_Cliente_Describible] 
GO
CREATE NONCLUSTERED INDEX [fk_Cliente_Describible] ON [dbo].[cliente]
(
   [Describible_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'cliente'  AND sc.name = N'dbo'  AND si.name = N'fk_Cliente_Estatus' AND so.type in (N'U'))
   DROP INDEX [dbo].[cliente].[fk_Cliente_Estatus] 
GO
CREATE NONCLUSTERED INDEX [fk_Cliente_Estatus] ON [dbo].[cliente]
(
   [Estatus] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'cliente'  AND sc.name = N'dbo'  AND si.name = N'fk_Cliente_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[cliente].[fk_Cliente_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Cliente_Rastreable] ON [dbo].[cliente]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'cliente'  AND sc.name = N'dbo'  AND si.name = N'fk_Cliente_Usuario' AND so.type in (N'U'))
   DROP INDEX [dbo].[cliente].[fk_Cliente_Usuario] 
GO
CREATE NONCLUSTERED INDEX [fk_Cliente_Usuario] ON [dbo].[cliente]
(
   [Usuario_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_Estatus' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_Estatus] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_Estatus] ON [dbo].[consumidor]
(
   [Estatus] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_GradoDeInstruccion' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_GradoDeInstruccion] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_GradoDeInstruccion] ON [dbo].[consumidor]
(
   [GradoDeInstruccion] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_GrupoDeEdad' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_GrupoDeEdad] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_GrupoDeEdad] ON [dbo].[consumidor]
(
   [GrupoDeEdad] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_Interlocutor' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_Interlocutor] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_Interlocutor] ON [dbo].[consumidor]
(
   [Interlocutor_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_Rastreable] ON [dbo].[consumidor]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_Sexo' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_Sexo] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_Sexo] ON [dbo].[consumidor]
(
   [Sexo] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Consumidor_Usuario' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidor].[fk_Consumidor_Usuario] 
GO
CREATE NONCLUSTERED INDEX [fk_Consumidor_Usuario] ON [dbo].[consumidor]
(
   [Usuario_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidorobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_ConsumidorObjetivo_Consumidor' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidorobjetivo].[fk_ConsumidorObjetivo_Consumidor] 
GO
CREATE NONCLUSTERED INDEX [fk_ConsumidorObjetivo_Consumidor] ON [dbo].[consumidorobjetivo]
(
   [ConsumidorID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'consumidorobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_ConsumidorObjetivo_Publicidad' AND so.type in (N'U'))
   DROP INDEX [dbo].[consumidorobjetivo].[fk_ConsumidorObjetivo_Publicidad] 
GO
CREATE NONCLUSTERED INDEX [fk_ConsumidorObjetivo_Publicidad] ON [dbo].[consumidorobjetivo]
(
   [PublicidadID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'contadordeexhibiciones'  AND sc.name = N'dbo'  AND si.name = N'fk_ContadorDeExhibiciones_EstadisticasDeVisitas' AND so.type in (N'U'))
   DROP INDEX [dbo].[contadordeexhibiciones].[fk_ContadorDeExhibiciones_EstadisticasDeVisitas] 
GO
CREATE NONCLUSTERED INDEX [fk_ContadorDeExhibiciones_EstadisticasDeVisitas] ON [dbo].[contadordeexhibiciones]
(
   [EstadisticasDeVisitasID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'continente'  AND sc.name = N'dbo'  AND si.name = N'fk_Continente_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[continente].[fk_Continente_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Continente_RegionGeografica] ON [dbo].[continente]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'croquis'  AND sc.name = N'dbo'  AND si.name = N'fk_Croquis_Dibujable' AND so.type in (N'U'))
   DROP INDEX [dbo].[croquis].[fk_Croquis_Dibujable] 
GO
CREATE NONCLUSTERED INDEX [fk_Croquis_Dibujable] ON [dbo].[croquis]
(
   [CroquisID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'croquis'  AND sc.name = N'dbo'  AND si.name = N'fk_Croquis_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[croquis].[fk_Croquis_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Croquis_Rastreable] ON [dbo].[croquis]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'descripcion'  AND sc.name = N'dbo'  AND si.name = N'fk_Descripcion_Describible' AND so.type in (N'U'))
   DROP INDEX [dbo].[descripcion].[fk_Descripcion_Describible] 
GO
CREATE NONCLUSTERED INDEX [fk_Descripcion_Describible] ON [dbo].[descripcion]
(
   [Describible] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'descripcion'  AND sc.name = N'dbo'  AND si.name = N'fk_Descripcion_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[descripcion].[fk_Descripcion_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_Descripcion_Etiquetable] ON [dbo].[descripcion]
(
   [Etiquetable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'descripcion'  AND sc.name = N'dbo'  AND si.name = N'fk_Descripcion_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[descripcion].[fk_Descripcion_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Descripcion_Rastreable] ON [dbo].[descripcion]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticas'  AND sc.name = N'dbo'  AND si.name = N'fk_Estadisticas_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticas].[fk_Estadisticas_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Estadisticas_Rastreable] ON [dbo].[estadisticas]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticas'  AND sc.name = N'dbo'  AND si.name = N'fk_Estadisticas_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticas].[fk_Estadisticas_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Estadisticas_RegionGeografica] ON [dbo].[estadisticas]
(
   [RegionGeografica] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticasdeinfluencia'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasDeInfluencia_Estadisticas' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticasdeinfluencia].[fk_EstadisticasDeInfluencia_Estadisticas] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasDeInfluencia_Estadisticas] ON [dbo].[estadisticasdeinfluencia]
(
   [Estadisticas_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticasdeinfluencia'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasDeInfluencia_Palabra' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticasdeinfluencia].[fk_EstadisticasDeInfluencia_Palabra] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasDeInfluencia_Palabra] ON [dbo].[estadisticasdeinfluencia]
(
   [Palabra] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticasdepopularidad'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasDePopularidad_CalificableSeguible' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticasdepopularidad].[fk_EstadisticasDePopularidad_CalificableSeguible] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasDePopularidad_CalificableSeguible] ON [dbo].[estadisticasdepopularidad]
(
   [CalificableSeguible] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticasdepopularidad'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasDePopularidad_Estadisticas' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticasdepopularidad].[fk_EstadisticasDePopularidad_Estadisticas] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasDePopularidad_Estadisticas] ON [dbo].[estadisticasdepopularidad]
(
   [Estadisticas_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticasdevisitas'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasDeVisitas_Buscable' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticasdevisitas].[fk_EstadisticasDeVisitas_Buscable] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasDeVisitas_Buscable] ON [dbo].[estadisticasdevisitas]
(
   [Buscable] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticasdevisitas'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasDeVisitas_Estadisticas' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticasdevisitas].[fk_EstadisticasDeVisitas_Estadisticas] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasDeVisitas_Estadisticas] ON [dbo].[estadisticasdevisitas]
(
   [Estadisticas_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estadisticastemporales'  AND sc.name = N'dbo'  AND si.name = N'fk_EstadisticasTemporales_Estadisticas' AND so.type in (N'U'))
   DROP INDEX [dbo].[estadisticastemporales].[fk_EstadisticasTemporales_Estadisticas] 
GO
CREATE NONCLUSTERED INDEX [fk_EstadisticasTemporales_Estadisticas] ON [dbo].[estadisticastemporales]
(
   [EstadisticasID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estado'  AND sc.name = N'dbo'  AND si.name = N'fk_Estado_HusoHorarioNormal' AND so.type in (N'U'))
   DROP INDEX [dbo].[estado].[fk_Estado_HusoHorarioNormal] 
GO
CREATE NONCLUSTERED INDEX [fk_Estado_HusoHorarioNormal] ON [dbo].[estado]
(
   [HusoHorarioNormal] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estado'  AND sc.name = N'dbo'  AND si.name = N'fk_Estado_HusoHorarioVerano' AND so.type in (N'U'))
   DROP INDEX [dbo].[estado].[fk_Estado_HusoHorarioVerano] 
GO
CREATE NONCLUSTERED INDEX [fk_Estado_HusoHorarioVerano] ON [dbo].[estado]
(
   [HusoHorarioVerano] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estado'  AND sc.name = N'dbo'  AND si.name = N'fk_Estado_Pais' AND so.type in (N'U'))
   DROP INDEX [dbo].[estado].[fk_Estado_Pais] 
GO
CREATE NONCLUSTERED INDEX [fk_Estado_Pais] ON [dbo].[estado]
(
   [Pais] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'estado'  AND sc.name = N'dbo'  AND si.name = N'fk_Estado_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[estado].[fk_Estado_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Estado_RegionGeografica] ON [dbo].[estado]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'etiqueta'  AND sc.name = N'dbo'  AND si.name = N'fk_Etiqueta_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[etiqueta].[fk_Etiqueta_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_Etiqueta_Etiquetable] ON [dbo].[etiqueta]
(
   [EtiquetableID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'etiqueta'  AND sc.name = N'dbo'  AND si.name = N'fk_Etiqueta_Palabra' AND so.type in (N'U'))
   DROP INDEX [dbo].[etiqueta].[fk_Etiqueta_Palabra] 
GO
CREATE NONCLUSTERED INDEX [fk_Etiqueta_Palabra] ON [dbo].[etiqueta]
(
   [PalabraID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'factura'  AND sc.name = N'dbo'  AND si.name = N'fk_Factura_Cliente' AND so.type in (N'U'))
   DROP INDEX [dbo].[factura].[fk_Factura_Cliente] 
GO
CREATE NONCLUSTERED INDEX [fk_Factura_Cliente] ON [dbo].[factura]
(
   [Cliente] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'factura'  AND sc.name = N'dbo'  AND si.name = N'fk_Factura_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[factura].[fk_Factura_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Factura_Rastreable] ON [dbo].[factura]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'foto'  AND sc.name = N'dbo'  AND si.name = N'fk_Foto_Describible' AND so.type in (N'U'))
   DROP INDEX [dbo].[foto].[fk_Foto_Describible] 
GO
CREATE NONCLUSTERED INDEX [fk_Foto_Describible] ON [dbo].[foto]
(
   [Describible] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'gradodeinstruccionobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_GradoDeInstruccionObjetivo_GradoDeInstruccion' AND so.type in (N'U'))
   DROP INDEX [dbo].[gradodeinstruccionobjetivo].[fk_GradoDeInstruccionObjetivo_GradoDeInstruccion] 
GO
CREATE NONCLUSTERED INDEX [fk_GradoDeInstruccionObjetivo_GradoDeInstruccion] ON [dbo].[gradodeinstruccionobjetivo]
(
   [GradoDeInstruccion] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'gradodeinstruccionobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_GradoDeInstruccionObjetivo_Publicidad' AND so.type in (N'U'))
   DROP INDEX [dbo].[gradodeinstruccionobjetivo].[fk_GradoDeInstruccionObjetivo_Publicidad] 
GO
CREATE NONCLUSTERED INDEX [fk_GradoDeInstruccionObjetivo_Publicidad] ON [dbo].[gradodeinstruccionobjetivo]
(
   [PublicidadID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'grupodeedadobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_GrupoDeEdadObjetivo_GrupoDeEdad' AND so.type in (N'U'))
   DROP INDEX [dbo].[grupodeedadobjetivo].[fk_GrupoDeEdadObjetivo_GrupoDeEdad] 
GO
CREATE NONCLUSTERED INDEX [fk_GrupoDeEdadObjetivo_GrupoDeEdad] ON [dbo].[grupodeedadobjetivo]
(
   [GrupoDeEdad] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'grupodeedadobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_GrupoDeEdadObjetivo_Publicidad' AND so.type in (N'U'))
   DROP INDEX [dbo].[grupodeedadobjetivo].[fk_GrupoDeEdadObjetivo_Publicidad] 
GO
CREATE NONCLUSTERED INDEX [fk_GrupoDeEdadObjetivo_Publicidad] ON [dbo].[grupodeedadobjetivo]
(
   [PublicidadID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'horariodetrabajo'  AND sc.name = N'dbo'  AND si.name = N'fk_HorarioDeTrabajo_Dia' AND so.type in (N'U'))
   DROP INDEX [dbo].[horariodetrabajo].[fk_HorarioDeTrabajo_Dia] 
GO
CREATE NONCLUSTERED INDEX [fk_HorarioDeTrabajo_Dia] ON [dbo].[horariodetrabajo]
(
   [Dia] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'horariodetrabajo'  AND sc.name = N'dbo'  AND si.name = N'fk_HorarioDeTrabajo_Tienda' AND so.type in (N'U'))
   DROP INDEX [dbo].[horariodetrabajo].[fk_HorarioDeTrabajo_Tienda] 
GO
CREATE NONCLUSTERED INDEX [fk_HorarioDeTrabajo_Tienda] ON [dbo].[horariodetrabajo]
(
   [TiendaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'inventario'  AND sc.name = N'dbo'  AND si.name = N'fk_Inventario_Cobrable' AND so.type in (N'U'))
   DROP INDEX [dbo].[inventario].[fk_Inventario_Cobrable] 
GO
CREATE NONCLUSTERED INDEX [fk_Inventario_Cobrable] ON [dbo].[inventario]
(
   [Cobrable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'inventario'  AND sc.name = N'dbo'  AND si.name = N'fk_Inventario_Producto' AND so.type in (N'U'))
   DROP INDEX [dbo].[inventario].[fk_Inventario_Producto] 
GO
CREATE NONCLUSTERED INDEX [fk_Inventario_Producto] ON [dbo].[inventario]
(
   [ProductoID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'inventario'  AND sc.name = N'dbo'  AND si.name = N'fk_Inventario_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[inventario].[fk_Inventario_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Inventario_Rastreable] ON [dbo].[inventario]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'inventario'  AND sc.name = N'dbo'  AND si.name = N'fk_Inventario_Tienda' AND so.type in (N'U'))
   DROP INDEX [dbo].[inventario].[fk_Inventario_Tienda] 
GO
CREATE NONCLUSTERED INDEX [fk_Inventario_Tienda] ON [dbo].[inventario]
(
   [TiendaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'inventario'  AND sc.name = N'dbo'  AND si.name = N'fk_Inventario_Visibilidad' AND so.type in (N'U'))
   DROP INDEX [dbo].[inventario].[fk_Inventario_Visibilidad] 
GO
CREATE NONCLUSTERED INDEX [fk_Inventario_Visibilidad] ON [dbo].[inventario]
(
   [Visibilidad] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'mensaje'  AND sc.name = N'dbo'  AND si.name = N'fk_Mensaje_Destinatario' AND so.type in (N'U'))
   DROP INDEX [dbo].[mensaje].[fk_Mensaje_Destinatario] 
GO
CREATE NONCLUSTERED INDEX [fk_Mensaje_Destinatario] ON [dbo].[mensaje]
(
   [Destinatario] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'mensaje'  AND sc.name = N'dbo'  AND si.name = N'fk_Mensaje_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[mensaje].[fk_Mensaje_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_Mensaje_Etiquetable] ON [dbo].[mensaje]
(
   [Etiquetable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'mensaje'  AND sc.name = N'dbo'  AND si.name = N'fk_Mensaje_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[mensaje].[fk_Mensaje_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Mensaje_Rastreable] ON [dbo].[mensaje]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'mensaje'  AND sc.name = N'dbo'  AND si.name = N'fk_Mensaje_Remitente' AND so.type in (N'U'))
   DROP INDEX [dbo].[mensaje].[fk_Mensaje_Remitente] 
GO
CREATE NONCLUSTERED INDEX [fk_Mensaje_Remitente] ON [dbo].[mensaje]
(
   [Remitente] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'municipio'  AND sc.name = N'dbo'  AND si.name = N'fk_Municipio_Ciudad' AND so.type in (N'U'))
   DROP INDEX [dbo].[municipio].[fk_Municipio_Ciudad] 
GO
CREATE NONCLUSTERED INDEX [fk_Municipio_Ciudad] ON [dbo].[municipio]
(
   [Ciudad] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'municipio'  AND sc.name = N'dbo'  AND si.name = N'fk_Municipio_Estado' AND so.type in (N'U'))
   DROP INDEX [dbo].[municipio].[fk_Municipio_Estado] 
GO
CREATE NONCLUSTERED INDEX [fk_Municipio_Estado] ON [dbo].[municipio]
(
   [Estado] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'municipio'  AND sc.name = N'dbo'  AND si.name = N'fk_Municipio_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[municipio].[fk_Municipio_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Municipio_RegionGeografica] ON [dbo].[municipio]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'pais'  AND sc.name = N'dbo'  AND si.name = N'fk_Pais_Ciudad' AND so.type in (N'U'))
   DROP INDEX [dbo].[pais].[fk_Pais_Ciudad] 
GO
CREATE NONCLUSTERED INDEX [fk_Pais_Ciudad] ON [dbo].[pais]
(
   [Capital] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'pais'  AND sc.name = N'dbo'  AND si.name = N'fk_Pais_Continente' AND so.type in (N'U'))
   DROP INDEX [dbo].[pais].[fk_Pais_Continente] 
GO
CREATE NONCLUSTERED INDEX [fk_Pais_Continente] ON [dbo].[pais]
(
   [Continente] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'pais'  AND sc.name = N'dbo'  AND si.name = N'fk_Pais_Idioma' AND so.type in (N'U'))
   DROP INDEX [dbo].[pais].[fk_Pais_Idioma] 
GO
CREATE NONCLUSTERED INDEX [fk_Pais_Idioma] ON [dbo].[pais]
(
   [Idioma] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'pais'  AND sc.name = N'dbo'  AND si.name = N'fk_Pais_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[pais].[fk_Pais_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Pais_RegionGeografica] ON [dbo].[pais]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'paissubcontinente'  AND sc.name = N'dbo'  AND si.name = N'fk_PaisSubcontinente_Pais' AND so.type in (N'U'))
   DROP INDEX [dbo].[paissubcontinente].[fk_PaisSubcontinente_Pais] 
GO
CREATE NONCLUSTERED INDEX [fk_PaisSubcontinente_Pais] ON [dbo].[paissubcontinente]
(
   [PaisID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'paissubcontinente'  AND sc.name = N'dbo'  AND si.name = N'fk_PaisSubcontinente_Subcontinente' AND so.type in (N'U'))
   DROP INDEX [dbo].[paissubcontinente].[fk_PaisSubcontinente_Subcontinente] 
GO
CREATE NONCLUSTERED INDEX [fk_PaisSubcontinente_Subcontinente] ON [dbo].[paissubcontinente]
(
   [SubcontinenteID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'parroquia'  AND sc.name = N'dbo'  AND si.name = N'fk_Parroquia_Municipio' AND so.type in (N'U'))
   DROP INDEX [dbo].[parroquia].[fk_Parroquia_Municipio] 
GO
CREATE NONCLUSTERED INDEX [fk_Parroquia_Municipio] ON [dbo].[parroquia]
(
   [Municipio] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'parroquia'  AND sc.name = N'dbo'  AND si.name = N'fk_Parroquia_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[parroquia].[fk_Parroquia_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Parroquia_RegionGeografica] ON [dbo].[parroquia]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'patrocinante'  AND sc.name = N'dbo'  AND si.name = N'fk_Patrocinante_Cliente' AND so.type in (N'U'))
   DROP INDEX [dbo].[patrocinante].[fk_Patrocinante_Cliente] 
GO
CREATE NONCLUSTERED INDEX [fk_Patrocinante_Cliente] ON [dbo].[patrocinante]
(
   [Cliente_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'preciocantidad'  AND sc.name = N'dbo'  AND si.name = N'fk_PrecioCantidad_Inventario' AND so.type in (N'U'))
   DROP INDEX [dbo].[preciocantidad].[fk_PrecioCantidad_Inventario] 
GO
CREATE NONCLUSTERED INDEX [fk_PrecioCantidad_Inventario] ON [dbo].[preciocantidad]
(
   [TiendaID] ASC,
   [Codigo] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_Buscable' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_Buscable] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_Buscable] ON [dbo].[producto]
(
   [Buscable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_CalificableSeguible' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_CalificableSeguible] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_CalificableSeguible] ON [dbo].[producto]
(
   [CalificableSeguible_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_Categoria' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_Categoria] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_Categoria] ON [dbo].[producto]
(
   [Categoria] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_Describible' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_Describible] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_Describible] ON [dbo].[producto]
(
   [Describible_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_Estatus' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_Estatus] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_Estatus] ON [dbo].[producto]
(
   [Estatus] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_Pais' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_Pais] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_Pais] ON [dbo].[producto]
(
   [PaisDeOrigen] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_Rastreable] ON [dbo].[producto]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'producto'  AND sc.name = N'dbo'  AND si.name = N'fk_Producto_TipoDeCodigo' AND so.type in (N'U'))
   DROP INDEX [dbo].[producto].[fk_Producto_TipoDeCodigo] 
GO
CREATE NONCLUSTERED INDEX [fk_Producto_TipoDeCodigo] ON [dbo].[producto]
(
   [TipoDeCodigo] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'publicidad'  AND sc.name = N'dbo'  AND si.name = N'fk_Publicidad_Buscable' AND so.type in (N'U'))
   DROP INDEX [dbo].[publicidad].[fk_Publicidad_Buscable] 
GO
CREATE NONCLUSTERED INDEX [fk_Publicidad_Buscable] ON [dbo].[publicidad]
(
   [Buscable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'publicidad'  AND sc.name = N'dbo'  AND si.name = N'fk_Publicidad_Cobrable' AND so.type in (N'U'))
   DROP INDEX [dbo].[publicidad].[fk_Publicidad_Cobrable] 
GO
CREATE NONCLUSTERED INDEX [fk_Publicidad_Cobrable] ON [dbo].[publicidad]
(
   [Cobrable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'publicidad'  AND sc.name = N'dbo'  AND si.name = N'fk_Publicidad_Describible' AND so.type in (N'U'))
   DROP INDEX [dbo].[publicidad].[fk_Publicidad_Describible] 
GO
CREATE NONCLUSTERED INDEX [fk_Publicidad_Describible] ON [dbo].[publicidad]
(
   [Describible_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'publicidad'  AND sc.name = N'dbo'  AND si.name = N'fk_Publicidad_Etiquetable' AND so.type in (N'U'))
   DROP INDEX [dbo].[publicidad].[fk_Publicidad_Etiquetable] 
GO
CREATE NONCLUSTERED INDEX [fk_Publicidad_Etiquetable] ON [dbo].[publicidad]
(
   [Etiquetable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'publicidad'  AND sc.name = N'dbo'  AND si.name = N'fk_Publicidad_Patrocinante' AND so.type in (N'U'))
   DROP INDEX [dbo].[publicidad].[fk_Publicidad_Patrocinante] 
GO
CREATE NONCLUSTERED INDEX [fk_Publicidad_Patrocinante] ON [dbo].[publicidad]
(
   [Patrocinante] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'publicidad'  AND sc.name = N'dbo'  AND si.name = N'fk_Publicidad_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[publicidad].[fk_Publicidad_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Publicidad_Rastreable] ON [dbo].[publicidad]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'puntodecroquis'  AND sc.name = N'dbo'  AND si.name = N'fk_PuntoDeCroquis_Croquis' AND so.type in (N'U'))
   DROP INDEX [dbo].[puntodecroquis].[fk_PuntoDeCroquis_Croquis] 
GO
CREATE NONCLUSTERED INDEX [fk_PuntoDeCroquis_Croquis] ON [dbo].[puntodecroquis]
(
   [CroquisID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'puntodecroquis'  AND sc.name = N'dbo'  AND si.name = N'fk_PuntoDeCroquis_Punto' AND so.type in (N'U'))
   DROP INDEX [dbo].[puntodecroquis].[fk_PuntoDeCroquis_Punto] 
GO
CREATE NONCLUSTERED INDEX [fk_PuntoDeCroquis_Punto] ON [dbo].[puntodecroquis]
(
   [PuntoID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'regiongeografica'  AND sc.name = N'dbo'  AND si.name = N'fk_RegionGeografica_Dibujable' AND so.type in (N'U'))
   DROP INDEX [dbo].[regiongeografica].[fk_RegionGeografica_Dibujable] 
GO
CREATE NONCLUSTERED INDEX [fk_RegionGeografica_Dibujable] ON [dbo].[regiongeografica]
(
   [Dibujable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'regiongeografica'  AND sc.name = N'dbo'  AND si.name = N'fk_RegionGeografica_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[regiongeografica].[fk_RegionGeografica_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_RegionGeografica_Rastreable] ON [dbo].[regiongeografica]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'regiongeograficaobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_RegionGeograficaObjetivo_Publicidad' AND so.type in (N'U'))
   DROP INDEX [dbo].[regiongeograficaobjetivo].[fk_RegionGeograficaObjetivo_Publicidad] 
GO
CREATE NONCLUSTERED INDEX [fk_RegionGeograficaObjetivo_Publicidad] ON [dbo].[regiongeograficaobjetivo]
(
   [PublicidadID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'regiongeograficaobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_RegionGeograficaObjetivo_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[regiongeograficaobjetivo].[fk_RegionGeograficaObjetivo_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_RegionGeograficaObjetivo_RegionGeografica] ON [dbo].[regiongeograficaobjetivo]
(
   [RegionGeograficaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'registro'  AND sc.name = N'dbo'  AND si.name = N'fk_Registro_Accion' AND so.type in (N'U'))
   DROP INDEX [dbo].[registro].[fk_Registro_Accion] 
GO
CREATE NONCLUSTERED INDEX [fk_Registro_Accion] ON [dbo].[registro]
(
   [Accion] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'registro'  AND sc.name = N'dbo'  AND si.name = N'fk_Registro_CodigoDeError' AND so.type in (N'U'))
   DROP INDEX [dbo].[registro].[fk_Registro_CodigoDeError] 
GO
CREATE NONCLUSTERED INDEX [fk_Registro_CodigoDeError] ON [dbo].[registro]
(
   [CodigoDeError] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'relaciondepalabras'  AND sc.name = N'dbo'  AND si.name = N'fk_RelacionDePalabras_Palabra1' AND so.type in (N'U'))
   DROP INDEX [dbo].[relaciondepalabras].[fk_RelacionDePalabras_Palabra1] 
GO
CREATE NONCLUSTERED INDEX [fk_RelacionDePalabras_Palabra1] ON [dbo].[relaciondepalabras]
(
   [Palabra1ID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'relaciondepalabras'  AND sc.name = N'dbo'  AND si.name = N'fk_RelacionDePalabras_Palabra2' AND so.type in (N'U'))
   DROP INDEX [dbo].[relaciondepalabras].[fk_RelacionDePalabras_Palabra2] 
GO
CREATE NONCLUSTERED INDEX [fk_RelacionDePalabras_Palabra2] ON [dbo].[relaciondepalabras]
(
   [Palabra2ID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'resultadodebusqueda'  AND sc.name = N'dbo'  AND si.name = N'fk_ResultadoDeBusqueda_Buscable' AND so.type in (N'U'))
   DROP INDEX [dbo].[resultadodebusqueda].[fk_ResultadoDeBusqueda_Buscable] 
GO
CREATE NONCLUSTERED INDEX [fk_ResultadoDeBusqueda_Buscable] ON [dbo].[resultadodebusqueda]
(
   [BuscableID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'resultadodebusqueda'  AND sc.name = N'dbo'  AND si.name = N'fk_ResultadoDeBusqueda_Busqueda' AND so.type in (N'U'))
   DROP INDEX [dbo].[resultadodebusqueda].[fk_ResultadoDeBusqueda_Busqueda] 
GO
CREATE NONCLUSTERED INDEX [fk_ResultadoDeBusqueda_Busqueda] ON [dbo].[resultadodebusqueda]
(
   [BusquedaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'seguidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Seguidor_CalificableSeguible' AND so.type in (N'U'))
   DROP INDEX [dbo].[seguidor].[fk_Seguidor_CalificableSeguible] 
GO
CREATE NONCLUSTERED INDEX [fk_Seguidor_CalificableSeguible] ON [dbo].[seguidor]
(
   [CalificableSeguibleID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'seguidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Seguidor_Consumidor' AND so.type in (N'U'))
   DROP INDEX [dbo].[seguidor].[fk_Seguidor_Consumidor] 
GO
CREATE NONCLUSTERED INDEX [fk_Seguidor_Consumidor] ON [dbo].[seguidor]
(
   [ConsumidorID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'seguidor'  AND sc.name = N'dbo'  AND si.name = N'fk_Seguidor_Rastreable' AND so.type in (N'U'))
   DROP INDEX [dbo].[seguidor].[fk_Seguidor_Rastreable] 
GO
CREATE NONCLUSTERED INDEX [fk_Seguidor_Rastreable] ON [dbo].[seguidor]
(
   [Rastreable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'serviciovendido'  AND sc.name = N'dbo'  AND si.name = N'fk_ServicioVendido_Cobrable' AND so.type in (N'U'))
   DROP INDEX [dbo].[serviciovendido].[fk_ServicioVendido_Cobrable] 
GO
CREATE NONCLUSTERED INDEX [fk_ServicioVendido_Cobrable] ON [dbo].[serviciovendido]
(
   [CobrableID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'serviciovendido'  AND sc.name = N'dbo'  AND si.name = N'fk_ServicioVendido_Factura' AND so.type in (N'U'))
   DROP INDEX [dbo].[serviciovendido].[fk_ServicioVendido_Factura] 
GO
CREATE NONCLUSTERED INDEX [fk_ServicioVendido_Factura] ON [dbo].[serviciovendido]
(
   [FacturaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'sexoobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_SexoObjetivo_Publicidad' AND so.type in (N'U'))
   DROP INDEX [dbo].[sexoobjetivo].[fk_SexoObjetivo_Publicidad] 
GO
CREATE NONCLUSTERED INDEX [fk_SexoObjetivo_Publicidad] ON [dbo].[sexoobjetivo]
(
   [PublicidadID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'sexoobjetivo'  AND sc.name = N'dbo'  AND si.name = N'fk_SexoObjetivo_Sexo' AND so.type in (N'U'))
   DROP INDEX [dbo].[sexoobjetivo].[fk_SexoObjetivo_Sexo] 
GO
CREATE NONCLUSTERED INDEX [fk_SexoObjetivo_Sexo] ON [dbo].[sexoobjetivo]
(
   [Sexo] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'subcontinente'  AND sc.name = N'dbo'  AND si.name = N'fk_Subcontinente_Continente' AND so.type in (N'U'))
   DROP INDEX [dbo].[subcontinente].[fk_Subcontinente_Continente] 
GO
CREATE NONCLUSTERED INDEX [fk_Subcontinente_Continente] ON [dbo].[subcontinente]
(
   [Continente] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'subcontinente'  AND sc.name = N'dbo'  AND si.name = N'fk_Subcontinente_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[subcontinente].[fk_Subcontinente_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_Subcontinente_RegionGeografica] ON [dbo].[subcontinente]
(
   [RegionGeografica_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tamano'  AND sc.name = N'dbo'  AND si.name = N'fk_Tamano_Tienda' AND so.type in (N'U'))
   DROP INDEX [dbo].[tamano].[fk_Tamano_Tienda] 
GO
CREATE NONCLUSTERED INDEX [fk_Tamano_Tienda] ON [dbo].[tamano]
(
   [TiendaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tienda'  AND sc.name = N'dbo'  AND si.name = N'fk_Tienda_Buscable' AND so.type in (N'U'))
   DROP INDEX [dbo].[tienda].[fk_Tienda_Buscable] 
GO
CREATE NONCLUSTERED INDEX [fk_Tienda_Buscable] ON [dbo].[tienda]
(
   [Buscable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tienda'  AND sc.name = N'dbo'  AND si.name = N'fk_Tienda_CalificableSeguible' AND so.type in (N'U'))
   DROP INDEX [dbo].[tienda].[fk_Tienda_CalificableSeguible] 
GO
CREATE NONCLUSTERED INDEX [fk_Tienda_CalificableSeguible] ON [dbo].[tienda]
(
   [CalificableSeguible_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tienda'  AND sc.name = N'dbo'  AND si.name = N'fk_Tienda_Cliente' AND so.type in (N'U'))
   DROP INDEX [dbo].[tienda].[fk_Tienda_Cliente] 
GO
CREATE NONCLUSTERED INDEX [fk_Tienda_Cliente] ON [dbo].[tienda]
(
   [Cliente_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tienda'  AND sc.name = N'dbo'  AND si.name = N'fk_Tienda_Dibujable' AND so.type in (N'U'))
   DROP INDEX [dbo].[tienda].[fk_Tienda_Dibujable] 
GO
CREATE NONCLUSTERED INDEX [fk_Tienda_Dibujable] ON [dbo].[tienda]
(
   [Dibujable_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tienda'  AND sc.name = N'dbo'  AND si.name = N'fk_Tienda_Interlocutor' AND so.type in (N'U'))
   DROP INDEX [dbo].[tienda].[fk_Tienda_Interlocutor] 
GO
CREATE NONCLUSTERED INDEX [fk_Tienda_Interlocutor] ON [dbo].[tienda]
(
   [Interlocutor_P] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'tiendasconsumidores'  AND sc.name = N'dbo'  AND si.name = N'fk_TiendasConsumidores_RegionGeografica' AND so.type in (N'U'))
   DROP INDEX [dbo].[tiendasconsumidores].[fk_TiendasConsumidores_RegionGeografica] 
GO
CREATE NONCLUSTERED INDEX [fk_TiendasConsumidores_RegionGeografica] ON [dbo].[tiendasconsumidores]
(
   [RegionGeograficaID] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'turno'  AND sc.name = N'dbo'  AND si.name = N'fk_Turno_HorarioDeTrabajo' AND so.type in (N'U'))
   DROP INDEX [dbo].[turno].[fk_Turno_HorarioDeTrabajo] 
GO
CREATE NONCLUSTERED INDEX [fk_Turno_HorarioDeTrabajo] ON [dbo].[turno]
(
   [TiendaID] ASC,
   [Dia] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF  EXISTS (
       SELECT * FROM sys.objects  so JOIN sys.indexes si
       ON so.object_id = si.object_id
       JOIN sys.schemas sc
       ON so.schema_id = sc.schema_id
       WHERE so.name = N'usuario'  AND sc.name = N'dbo'  AND si.name = N'fk_Usuario_Parroquia' AND so.type in (N'U'))
   DROP INDEX [dbo].[usuario].[fk_Usuario_Parroquia] 
GO
CREATE NONCLUSTERED INDEX [fk_Usuario_Parroquia] ON [dbo].[usuario]
(
   [Parroquia] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY] 
GO
GO

USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'acceso$fk_Acceso_Usuario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[acceso] DROP CONSTRAINT [acceso$fk_Acceso_Usuario]
 GO



ALTER TABLE [dbo].[acceso]
 ADD CONSTRAINT [acceso$fk_Acceso_Usuario]
 FOREIGN KEY 
   ([AccesoID])
 REFERENCES 
   [spuria].[dbo].[usuario]     ([UsuarioID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador$fk_Administrador_Estatus'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [administrador$fk_Administrador_Estatus]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [administrador$fk_Administrador_Estatus]
 FOREIGN KEY 
   ([Estatus])
 REFERENCES 
   [spuria].[dbo].[estatus]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador$fk_Administrador_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [administrador$fk_Administrador_Rastreable]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [administrador$fk_Administrador_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador$fk_Administrador_Privilegios'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [administrador$fk_Administrador_Privilegios]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [administrador$fk_Administrador_Privilegios]
 FOREIGN KEY 
   ([Privilegios])
 REFERENCES 
   [spuria].[dbo].[privilegios]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'administrador$fk_Administrador_Usuario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[administrador] DROP CONSTRAINT [administrador$fk_Administrador_Usuario]
 GO



ALTER TABLE [dbo].[administrador]
 ADD CONSTRAINT [administrador$fk_Administrador_Usuario]
 FOREIGN KEY 
   ([Usuario_P])
 REFERENCES 
   [spuria].[dbo].[usuario]     ([UsuarioID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'busqueda$fk_Busqueda_Usuario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [busqueda$fk_Busqueda_Usuario]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [busqueda$fk_Busqueda_Usuario]
 FOREIGN KEY 
   ([Usuario])
 REFERENCES 
   [spuria].[dbo].[usuario]     ([UsuarioID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'busqueda$fk_Busqueda_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [busqueda$fk_Busqueda_Etiquetable]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [busqueda$fk_Busqueda_Etiquetable]
 FOREIGN KEY 
   ([Etiquetable_P])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'busqueda$fk_Busqueda_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[busqueda] DROP CONSTRAINT [busqueda$fk_Busqueda_Rastreable]
 GO



ALTER TABLE [dbo].[busqueda]
 ADD CONSTRAINT [busqueda$fk_Busqueda_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$fk_CalificacionResena_Consumidor'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$fk_CalificacionResena_Consumidor]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$fk_CalificacionResena_Consumidor]
 FOREIGN KEY 
   ([ConsumidorID])
 REFERENCES 
   [spuria].[dbo].[consumidor]     ([ConsumidorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$fk_CalificacionResena_CalificableSeguible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$fk_CalificacionResena_CalificableSeguible]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$fk_CalificacionResena_CalificableSeguible]
 FOREIGN KEY 
   ([CalificableSeguibleID])
 REFERENCES 
   [spuria].[dbo].[calificableseguible]     ([CalificableSeguibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$fk_CalificacionResena_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$fk_CalificacionResena_Etiquetable]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$fk_CalificacionResena_Etiquetable]
 FOREIGN KEY 
   ([Etiquetable_P])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$fk_CalificacionResena_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$fk_CalificacionResena_Rastreable]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$fk_CalificacionResena_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'calificacionresena$fk_CalificacionResena_Calificacion'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[calificacionresena] DROP CONSTRAINT [calificacionresena$fk_CalificacionResena_Calificacion]
 GO



ALTER TABLE [dbo].[calificacionresena]
 ADD CONSTRAINT [calificacionresena$fk_CalificacionResena_Calificacion]
 FOREIGN KEY 
   ([Calificacion])
 REFERENCES 
   [spuria].[dbo].[calificacion]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'categoria$fk_Categoria_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[categoria] DROP CONSTRAINT [categoria$fk_Categoria_Etiquetable]
 GO



ALTER TABLE [dbo].[categoria]
 ADD CONSTRAINT [categoria$fk_Categoria_Etiquetable]
 FOREIGN KEY 
   ([Etiquetable_P])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'categoria$fk_Categoria_Categoria'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[categoria] DROP CONSTRAINT [categoria$fk_Categoria_Categoria]
 GO



ALTER TABLE [dbo].[categoria]
 ADD CONSTRAINT [categoria$fk_Categoria_Categoria]
 FOREIGN KEY 
   ([HijoDeCategoria])
 REFERENCES 
   [spuria].[dbo].[categoria]     ([CategoriaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'ciudad$fk_Ciudad_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[ciudad] DROP CONSTRAINT [ciudad$fk_Ciudad_RegionGeografica]
 GO



ALTER TABLE [dbo].[ciudad]
 ADD CONSTRAINT [ciudad$fk_Ciudad_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$fk_Cliente_Categoria'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$fk_Cliente_Categoria]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$fk_Cliente_Categoria]
 FOREIGN KEY 
   ([Categoria])
 REFERENCES 
   [spuria].[dbo].[categoria]     ([CategoriaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$fk_Cliente_Describible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$fk_Cliente_Describible]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$fk_Cliente_Describible]
 FOREIGN KEY 
   ([Describible_P])
 REFERENCES 
   [spuria].[dbo].[describible]     ([DescribibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$fk_Cliente_Estatus'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$fk_Cliente_Estatus]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$fk_Cliente_Estatus]
 FOREIGN KEY 
   ([Estatus])
 REFERENCES 
   [spuria].[dbo].[estatus]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$fk_Cliente_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$fk_Cliente_Rastreable]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$fk_Cliente_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'cliente$fk_Cliente_Usuario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[cliente] DROP CONSTRAINT [cliente$fk_Cliente_Usuario]
 GO



ALTER TABLE [dbo].[cliente]
 ADD CONSTRAINT [cliente$fk_Cliente_Usuario]
 FOREIGN KEY 
   ([Usuario_P])
 REFERENCES 
   [spuria].[dbo].[usuario]     ([UsuarioID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_Interlocutor'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_Interlocutor]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_Interlocutor]
 FOREIGN KEY 
   ([Interlocutor_P])
 REFERENCES 
   [spuria].[dbo].[interlocutor]     ([InterlocutorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_Estatus'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_Estatus]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_Estatus]
 FOREIGN KEY 
   ([Estatus])
 REFERENCES 
   [spuria].[dbo].[estatus]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_Sexo'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_Sexo]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_Sexo]
 FOREIGN KEY 
   ([Sexo])
 REFERENCES 
   [spuria].[dbo].[sexo]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_GradoDeInstruccion'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_GradoDeInstruccion]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_GradoDeInstruccion]
 FOREIGN KEY 
   ([GradoDeInstruccion])
 REFERENCES 
   [spuria].[dbo].[gradodeinstruccion]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_GrupoDeEdad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_GrupoDeEdad]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_GrupoDeEdad]
 FOREIGN KEY 
   ([GrupoDeEdad])
 REFERENCES 
   [spuria].[dbo].[grupodeedad]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_Rastreable]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidor$fk_Consumidor_Usuario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidor] DROP CONSTRAINT [consumidor$fk_Consumidor_Usuario]
 GO



ALTER TABLE [dbo].[consumidor]
 ADD CONSTRAINT [consumidor$fk_Consumidor_Usuario]
 FOREIGN KEY 
   ([Usuario_P])
 REFERENCES 
   [spuria].[dbo].[usuario]     ([UsuarioID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidorobjetivo$fk_ConsumidorObjetivo_Publicidad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidorobjetivo] DROP CONSTRAINT [consumidorobjetivo$fk_ConsumidorObjetivo_Publicidad]
 GO



ALTER TABLE [dbo].[consumidorobjetivo]
 ADD CONSTRAINT [consumidorobjetivo$fk_ConsumidorObjetivo_Publicidad]
 FOREIGN KEY 
   ([PublicidadID])
 REFERENCES 
   [spuria].[dbo].[publicidad]     ([PublicidadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'consumidorobjetivo$fk_ConsumidorObjetivo_Consumidor'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[consumidorobjetivo] DROP CONSTRAINT [consumidorobjetivo$fk_ConsumidorObjetivo_Consumidor]
 GO



ALTER TABLE [dbo].[consumidorobjetivo]
 ADD CONSTRAINT [consumidorobjetivo$fk_ConsumidorObjetivo_Consumidor]
 FOREIGN KEY 
   ([ConsumidorID])
 REFERENCES 
   [spuria].[dbo].[consumidor]     ([ConsumidorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'contadordeexhibiciones$fk_ContadorDeExhibiciones_EstadisticasDeVisitas'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[contadordeexhibiciones] DROP CONSTRAINT [contadordeexhibiciones$fk_ContadorDeExhibiciones_EstadisticasDeVisitas]
 GO



ALTER TABLE [dbo].[contadordeexhibiciones]
 ADD CONSTRAINT [contadordeexhibiciones$fk_ContadorDeExhibiciones_EstadisticasDeVisitas]
 FOREIGN KEY 
   ([EstadisticasDeVisitasID])
 REFERENCES 
   [spuria].[dbo].[estadisticasdevisitas]     ([EstadisticasDeVisitasID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'continente$fk_Continente_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[continente] DROP CONSTRAINT [continente$fk_Continente_RegionGeografica]
 GO



ALTER TABLE [dbo].[continente]
 ADD CONSTRAINT [continente$fk_Continente_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'croquis$fk_Croquis_Dibujable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[croquis] DROP CONSTRAINT [croquis$fk_Croquis_Dibujable]
 GO



ALTER TABLE [dbo].[croquis]
 ADD CONSTRAINT [croquis$fk_Croquis_Dibujable]
 FOREIGN KEY 
   ([CroquisID])
 REFERENCES 
   [spuria].[dbo].[dibujable]     ([DibujableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'croquis$fk_Croquis_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[croquis] DROP CONSTRAINT [croquis$fk_Croquis_Rastreable]
 GO



ALTER TABLE [dbo].[croquis]
 ADD CONSTRAINT [croquis$fk_Croquis_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'descripcion$fk_Descripcion_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [descripcion$fk_Descripcion_Etiquetable]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [descripcion$fk_Descripcion_Etiquetable]
 FOREIGN KEY 
   ([Etiquetable_P])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'descripcion$fk_Descripcion_Describible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [descripcion$fk_Descripcion_Describible]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [descripcion$fk_Descripcion_Describible]
 FOREIGN KEY 
   ([Describible])
 REFERENCES 
   [spuria].[dbo].[describible]     ([DescribibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'descripcion$fk_Descripcion_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[descripcion] DROP CONSTRAINT [descripcion$fk_Descripcion_Rastreable]
 GO



ALTER TABLE [dbo].[descripcion]
 ADD CONSTRAINT [descripcion$fk_Descripcion_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticas$fk_Estadisticas_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticas] DROP CONSTRAINT [estadisticas$fk_Estadisticas_RegionGeografica]
 GO



ALTER TABLE [dbo].[estadisticas]
 ADD CONSTRAINT [estadisticas$fk_Estadisticas_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticas$fk_Estadisticas_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticas] DROP CONSTRAINT [estadisticas$fk_Estadisticas_Rastreable]
 GO



ALTER TABLE [dbo].[estadisticas]
 ADD CONSTRAINT [estadisticas$fk_Estadisticas_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdeinfluencia$fk_EstadisticasDeInfluencia_Palabra'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticasdeinfluencia] DROP CONSTRAINT [estadisticasdeinfluencia$fk_EstadisticasDeInfluencia_Palabra]
 GO



ALTER TABLE [dbo].[estadisticasdeinfluencia]
 ADD CONSTRAINT [estadisticasdeinfluencia$fk_EstadisticasDeInfluencia_Palabra]
 FOREIGN KEY 
   ([Palabra])
 REFERENCES 
   [spuria].[dbo].[palabra]     ([PalabraID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdeinfluencia$fk_EstadisticasDeInfluencia_Estadisticas'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticasdeinfluencia] DROP CONSTRAINT [estadisticasdeinfluencia$fk_EstadisticasDeInfluencia_Estadisticas]
 GO



ALTER TABLE [dbo].[estadisticasdeinfluencia]
 ADD CONSTRAINT [estadisticasdeinfluencia$fk_EstadisticasDeInfluencia_Estadisticas]
 FOREIGN KEY 
   ([Estadisticas_P])
 REFERENCES 
   [spuria].[dbo].[estadisticas]     ([EstadisticasID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdepopularidad$fk_EstadisticasDePopularidad_CalificableSeguible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticasdepopularidad] DROP CONSTRAINT [estadisticasdepopularidad$fk_EstadisticasDePopularidad_CalificableSeguible]
 GO



ALTER TABLE [dbo].[estadisticasdepopularidad]
 ADD CONSTRAINT [estadisticasdepopularidad$fk_EstadisticasDePopularidad_CalificableSeguible]
 FOREIGN KEY 
   ([CalificableSeguible])
 REFERENCES 
   [spuria].[dbo].[calificableseguible]     ([CalificableSeguibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdepopularidad$fk_EstadisticasDePopularidad_Estadisticas'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticasdepopularidad] DROP CONSTRAINT [estadisticasdepopularidad$fk_EstadisticasDePopularidad_Estadisticas]
 GO



ALTER TABLE [dbo].[estadisticasdepopularidad]
 ADD CONSTRAINT [estadisticasdepopularidad$fk_EstadisticasDePopularidad_Estadisticas]
 FOREIGN KEY 
   ([Estadisticas_P])
 REFERENCES 
   [spuria].[dbo].[estadisticas]     ([EstadisticasID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdevisitas$fk_EstadisticasDeVisitas_Buscable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticasdevisitas] DROP CONSTRAINT [estadisticasdevisitas$fk_EstadisticasDeVisitas_Buscable]
 GO



ALTER TABLE [dbo].[estadisticasdevisitas]
 ADD CONSTRAINT [estadisticasdevisitas$fk_EstadisticasDeVisitas_Buscable]
 FOREIGN KEY 
   ([Buscable])
 REFERENCES 
   [spuria].[dbo].[buscable]     ([BuscableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticasdevisitas$fk_EstadisticasDeVisitas_Estadisticas'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticasdevisitas] DROP CONSTRAINT [estadisticasdevisitas$fk_EstadisticasDeVisitas_Estadisticas]
 GO



ALTER TABLE [dbo].[estadisticasdevisitas]
 ADD CONSTRAINT [estadisticasdevisitas$fk_EstadisticasDeVisitas_Estadisticas]
 FOREIGN KEY 
   ([Estadisticas_P])
 REFERENCES 
   [spuria].[dbo].[estadisticas]     ([EstadisticasID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estadisticastemporales$fk_EstadisticasTemporales_Estadisticas'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estadisticastemporales] DROP CONSTRAINT [estadisticastemporales$fk_EstadisticasTemporales_Estadisticas]
 GO



ALTER TABLE [dbo].[estadisticastemporales]
 ADD CONSTRAINT [estadisticastemporales$fk_EstadisticasTemporales_Estadisticas]
 FOREIGN KEY 
   ([EstadisticasID])
 REFERENCES 
   [spuria].[dbo].[estadisticas]     ([EstadisticasID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estado$fk_Estado_Pais'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [estado$fk_Estado_Pais]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [estado$fk_Estado_Pais]
 FOREIGN KEY 
   ([Pais])
 REFERENCES 
   [spuria].[dbo].[pais]     ([PaisID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estado$fk_Estado_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [estado$fk_Estado_RegionGeografica]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [estado$fk_Estado_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estado$fk_Estado_HusoHorarioNormal'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [estado$fk_Estado_HusoHorarioNormal]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [estado$fk_Estado_HusoHorarioNormal]
 FOREIGN KEY 
   ([HusoHorarioNormal])
 REFERENCES 
   [spuria].[dbo].[husohorario]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'estado$fk_Estado_HusoHorarioVerano'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[estado] DROP CONSTRAINT [estado$fk_Estado_HusoHorarioVerano]
 GO



ALTER TABLE [dbo].[estado]
 ADD CONSTRAINT [estado$fk_Estado_HusoHorarioVerano]
 FOREIGN KEY 
   ([HusoHorarioVerano])
 REFERENCES 
   [spuria].[dbo].[husohorario]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'etiqueta$fk_Etiqueta_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[etiqueta] DROP CONSTRAINT [etiqueta$fk_Etiqueta_Etiquetable]
 GO



ALTER TABLE [dbo].[etiqueta]
 ADD CONSTRAINT [etiqueta$fk_Etiqueta_Etiquetable]
 FOREIGN KEY 
   ([EtiquetableID])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'etiqueta$fk_Etiqueta_Palabra'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[etiqueta] DROP CONSTRAINT [etiqueta$fk_Etiqueta_Palabra]
 GO



ALTER TABLE [dbo].[etiqueta]
 ADD CONSTRAINT [etiqueta$fk_Etiqueta_Palabra]
 FOREIGN KEY 
   ([PalabraID])
 REFERENCES 
   [spuria].[dbo].[palabra]     ([PalabraID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'factura$fk_Factura_Cliente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[factura] DROP CONSTRAINT [factura$fk_Factura_Cliente]
 GO



ALTER TABLE [dbo].[factura]
 ADD CONSTRAINT [factura$fk_Factura_Cliente]
 FOREIGN KEY 
   ([Cliente])
 REFERENCES 
   [spuria].[dbo].[cliente]     ([RIF])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'factura$fk_Factura_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[factura] DROP CONSTRAINT [factura$fk_Factura_Rastreable]
 GO



ALTER TABLE [dbo].[factura]
 ADD CONSTRAINT [factura$fk_Factura_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'foto$fk_Foto_Describible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[foto] DROP CONSTRAINT [foto$fk_Foto_Describible]
 GO



ALTER TABLE [dbo].[foto]
 ADD CONSTRAINT [foto$fk_Foto_Describible]
 FOREIGN KEY 
   ([Describible])
 REFERENCES 
   [spuria].[dbo].[describible]     ([DescribibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'gradodeinstruccionobjetivo$fk_GradoDeInstruccionObjetivo_Publicidad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[gradodeinstruccionobjetivo] DROP CONSTRAINT [gradodeinstruccionobjetivo$fk_GradoDeInstruccionObjetivo_Publicidad]
 GO



ALTER TABLE [dbo].[gradodeinstruccionobjetivo]
 ADD CONSTRAINT [gradodeinstruccionobjetivo$fk_GradoDeInstruccionObjetivo_Publicidad]
 FOREIGN KEY 
   ([PublicidadID])
 REFERENCES 
   [spuria].[dbo].[publicidad]     ([PublicidadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'gradodeinstruccionobjetivo$fk_GradoDeInstruccionObjetivo_GradoDeInstruccion'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[gradodeinstruccionobjetivo] DROP CONSTRAINT [gradodeinstruccionobjetivo$fk_GradoDeInstruccionObjetivo_GradoDeInstruccion]
 GO



ALTER TABLE [dbo].[gradodeinstruccionobjetivo]
 ADD CONSTRAINT [gradodeinstruccionobjetivo$fk_GradoDeInstruccionObjetivo_GradoDeInstruccion]
 FOREIGN KEY 
   ([GradoDeInstruccion])
 REFERENCES 
   [spuria].[dbo].[gradodeinstruccion]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'grupodeedadobjetivo$fk_GrupoDeEdadObjetivo_Publicidad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[grupodeedadobjetivo] DROP CONSTRAINT [grupodeedadobjetivo$fk_GrupoDeEdadObjetivo_Publicidad]
 GO



ALTER TABLE [dbo].[grupodeedadobjetivo]
 ADD CONSTRAINT [grupodeedadobjetivo$fk_GrupoDeEdadObjetivo_Publicidad]
 FOREIGN KEY 
   ([PublicidadID])
 REFERENCES 
   [spuria].[dbo].[publicidad]     ([PublicidadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'grupodeedadobjetivo$fk_GrupoDeEdadObjetivo_GrupoDeEdad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[grupodeedadobjetivo] DROP CONSTRAINT [grupodeedadobjetivo$fk_GrupoDeEdadObjetivo_GrupoDeEdad]
 GO



ALTER TABLE [dbo].[grupodeedadobjetivo]
 ADD CONSTRAINT [grupodeedadobjetivo$fk_GrupoDeEdadObjetivo_GrupoDeEdad]
 FOREIGN KEY 
   ([GrupoDeEdad])
 REFERENCES 
   [spuria].[dbo].[grupodeedad]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'horariodetrabajo$fk_HorarioDeTrabajo_Tienda'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[horariodetrabajo] DROP CONSTRAINT [horariodetrabajo$fk_HorarioDeTrabajo_Tienda]
 GO



ALTER TABLE [dbo].[horariodetrabajo]
 ADD CONSTRAINT [horariodetrabajo$fk_HorarioDeTrabajo_Tienda]
 FOREIGN KEY 
   ([TiendaID])
 REFERENCES 
   [spuria].[dbo].[tienda]     ([TiendaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'horariodetrabajo$fk_HorarioDeTrabajo_Dia'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[horariodetrabajo] DROP CONSTRAINT [horariodetrabajo$fk_HorarioDeTrabajo_Dia]
 GO



ALTER TABLE [dbo].[horariodetrabajo]
 ADD CONSTRAINT [horariodetrabajo$fk_HorarioDeTrabajo_Dia]
 FOREIGN KEY 
   ([Dia])
 REFERENCES 
   [spuria].[dbo].[dia]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$fk_Inventario_Tienda'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$fk_Inventario_Tienda]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$fk_Inventario_Tienda]
 FOREIGN KEY 
   ([TiendaID])
 REFERENCES 
   [spuria].[dbo].[tienda]     ([TiendaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$fk_Inventario_Visibilidad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$fk_Inventario_Visibilidad]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$fk_Inventario_Visibilidad]
 FOREIGN KEY 
   ([Visibilidad])
 REFERENCES 
   [spuria].[dbo].[visibilidad]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$fk_Inventario_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$fk_Inventario_Rastreable]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$fk_Inventario_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$fk_Inventario_Cobrable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$fk_Inventario_Cobrable]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$fk_Inventario_Cobrable]
 FOREIGN KEY 
   ([Cobrable_P])
 REFERENCES 
   [spuria].[dbo].[cobrable]     ([CobrableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'inventario$fk_Inventario_Producto'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[inventario] DROP CONSTRAINT [inventario$fk_Inventario_Producto]
 GO



ALTER TABLE [dbo].[inventario]
 ADD CONSTRAINT [inventario$fk_Inventario_Producto]
 FOREIGN KEY 
   ([ProductoID])
 REFERENCES 
   [spuria].[dbo].[producto]     ([ProductoID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje$fk_Mensaje_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [mensaje$fk_Mensaje_Etiquetable]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [mensaje$fk_Mensaje_Etiquetable]
 FOREIGN KEY 
   ([Etiquetable_P])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje$fk_Mensaje_Remitente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [mensaje$fk_Mensaje_Remitente]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [mensaje$fk_Mensaje_Remitente]
 FOREIGN KEY 
   ([Remitente])
 REFERENCES 
   [spuria].[dbo].[interlocutor]     ([InterlocutorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje$fk_Mensaje_Destinatario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [mensaje$fk_Mensaje_Destinatario]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [mensaje$fk_Mensaje_Destinatario]
 FOREIGN KEY 
   ([Destinatario])
 REFERENCES 
   [spuria].[dbo].[interlocutor]     ([InterlocutorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'mensaje$fk_Mensaje_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[mensaje] DROP CONSTRAINT [mensaje$fk_Mensaje_Rastreable]
 GO



ALTER TABLE [dbo].[mensaje]
 ADD CONSTRAINT [mensaje$fk_Mensaje_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'municipio$fk_Municipio_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[municipio] DROP CONSTRAINT [municipio$fk_Municipio_RegionGeografica]
 GO



ALTER TABLE [dbo].[municipio]
 ADD CONSTRAINT [municipio$fk_Municipio_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'municipio$fk_Municipio_Estado'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[municipio] DROP CONSTRAINT [municipio$fk_Municipio_Estado]
 GO



ALTER TABLE [dbo].[municipio]
 ADD CONSTRAINT [municipio$fk_Municipio_Estado]
 FOREIGN KEY 
   ([Estado])
 REFERENCES 
   [spuria].[dbo].[estado]     ([EstadoID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'municipio$fk_Municipio_Ciudad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[municipio] DROP CONSTRAINT [municipio$fk_Municipio_Ciudad]
 GO



ALTER TABLE [dbo].[municipio]
 ADD CONSTRAINT [municipio$fk_Municipio_Ciudad]
 FOREIGN KEY 
   ([Ciudad])
 REFERENCES 
   [spuria].[dbo].[ciudad]     ([CiudadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais$fk_Pais_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [pais$fk_Pais_RegionGeografica]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [pais$fk_Pais_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais$fk_Pais_Continente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [pais$fk_Pais_Continente]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [pais$fk_Pais_Continente]
 FOREIGN KEY 
   ([Continente])
 REFERENCES 
   [spuria].[dbo].[continente]     ([ContinenteID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais$fk_Pais_Ciudad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [pais$fk_Pais_Ciudad]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [pais$fk_Pais_Ciudad]
 FOREIGN KEY 
   ([Capital])
 REFERENCES 
   [spuria].[dbo].[ciudad]     ([CiudadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'pais$fk_Pais_Idioma'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[pais] DROP CONSTRAINT [pais$fk_Pais_Idioma]
 GO



ALTER TABLE [dbo].[pais]
 ADD CONSTRAINT [pais$fk_Pais_Idioma]
 FOREIGN KEY 
   ([Idioma])
 REFERENCES 
   [spuria].[dbo].[idioma]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'paissubcontinente$fk_PaisSubcontinente_Subcontinente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[paissubcontinente] DROP CONSTRAINT [paissubcontinente$fk_PaisSubcontinente_Subcontinente]
 GO



ALTER TABLE [dbo].[paissubcontinente]
 ADD CONSTRAINT [paissubcontinente$fk_PaisSubcontinente_Subcontinente]
 FOREIGN KEY 
   ([SubcontinenteID])
 REFERENCES 
   [spuria].[dbo].[subcontinente]     ([SubcontinenteID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'paissubcontinente$fk_PaisSubcontinente_Pais'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[paissubcontinente] DROP CONSTRAINT [paissubcontinente$fk_PaisSubcontinente_Pais]
 GO



ALTER TABLE [dbo].[paissubcontinente]
 ADD CONSTRAINT [paissubcontinente$fk_PaisSubcontinente_Pais]
 FOREIGN KEY 
   ([PaisID])
 REFERENCES 
   [spuria].[dbo].[pais]     ([PaisID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'parroquia$fk_Parroquia_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[parroquia] DROP CONSTRAINT [parroquia$fk_Parroquia_RegionGeografica]
 GO



ALTER TABLE [dbo].[parroquia]
 ADD CONSTRAINT [parroquia$fk_Parroquia_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'parroquia$fk_Parroquia_Municipio'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[parroquia] DROP CONSTRAINT [parroquia$fk_Parroquia_Municipio]
 GO



ALTER TABLE [dbo].[parroquia]
 ADD CONSTRAINT [parroquia$fk_Parroquia_Municipio]
 FOREIGN KEY 
   ([Municipio])
 REFERENCES 
   [spuria].[dbo].[municipio]     ([MunicipioID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'patrocinante$fk_Patrocinante_Cliente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[patrocinante] DROP CONSTRAINT [patrocinante$fk_Patrocinante_Cliente]
 GO



ALTER TABLE [dbo].[patrocinante]
 ADD CONSTRAINT [patrocinante$fk_Patrocinante_Cliente]
 FOREIGN KEY 
   ([Cliente_P])
 REFERENCES 
   [spuria].[dbo].[cliente]     ([RIF])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'preciocantidad$fk_PrecioCantidad_Inventario'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[preciocantidad] DROP CONSTRAINT [preciocantidad$fk_PrecioCantidad_Inventario]
 GO



ALTER TABLE [dbo].[preciocantidad]
 ADD CONSTRAINT [preciocantidad$fk_PrecioCantidad_Inventario]
 FOREIGN KEY 
   ([TiendaID], [Codigo])
 REFERENCES 
   [spuria].[dbo].[inventario]     ([TiendaID], [Codigo])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_Categoria'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_Categoria]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_Categoria]
 FOREIGN KEY 
   ([Categoria])
 REFERENCES 
   [spuria].[dbo].[categoria]     ([CategoriaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_Estatus'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_Estatus]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_Estatus]
 FOREIGN KEY 
   ([Estatus])
 REFERENCES 
   [spuria].[dbo].[estatus]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_Pais'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_Pais]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_Pais]
 FOREIGN KEY 
   ([PaisDeOrigen])
 REFERENCES 
   [spuria].[dbo].[pais]     ([PaisID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_CalificableSeguible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_CalificableSeguible]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_CalificableSeguible]
 FOREIGN KEY 
   ([CalificableSeguible_P])
 REFERENCES 
   [spuria].[dbo].[calificableseguible]     ([CalificableSeguibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_Describible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_Describible]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_Describible]
 FOREIGN KEY 
   ([Describible_P])
 REFERENCES 
   [spuria].[dbo].[describible]     ([DescribibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_Rastreable]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_Buscable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_Buscable]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_Buscable]
 FOREIGN KEY 
   ([Buscable_P])
 REFERENCES 
   [spuria].[dbo].[buscable]     ([BuscableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'producto$fk_Producto_TipoDeCodigo'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[producto] DROP CONSTRAINT [producto$fk_Producto_TipoDeCodigo]
 GO



ALTER TABLE [dbo].[producto]
 ADD CONSTRAINT [producto$fk_Producto_TipoDeCodigo]
 FOREIGN KEY 
   ([TipoDeCodigo])
 REFERENCES 
   [spuria].[dbo].[tipodecodigo]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$fk_Publicidad_Etiquetable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$fk_Publicidad_Etiquetable]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$fk_Publicidad_Etiquetable]
 FOREIGN KEY 
   ([Etiquetable_P])
 REFERENCES 
   [spuria].[dbo].[etiquetable]     ([EtiquetableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$fk_Publicidad_Describible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$fk_Publicidad_Describible]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$fk_Publicidad_Describible]
 FOREIGN KEY 
   ([Describible_P])
 REFERENCES 
   [spuria].[dbo].[describible]     ([DescribibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$fk_Publicidad_Patrocinante'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$fk_Publicidad_Patrocinante]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$fk_Publicidad_Patrocinante]
 FOREIGN KEY 
   ([Patrocinante])
 REFERENCES 
   [spuria].[dbo].[patrocinante]     ([PatrocinanteID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$fk_Publicidad_Buscable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$fk_Publicidad_Buscable]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$fk_Publicidad_Buscable]
 FOREIGN KEY 
   ([Buscable_P])
 REFERENCES 
   [spuria].[dbo].[buscable]     ([BuscableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$fk_Publicidad_Cobrable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$fk_Publicidad_Cobrable]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$fk_Publicidad_Cobrable]
 FOREIGN KEY 
   ([Cobrable_P])
 REFERENCES 
   [spuria].[dbo].[cobrable]     ([CobrableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'publicidad$fk_Publicidad_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[publicidad] DROP CONSTRAINT [publicidad$fk_Publicidad_Rastreable]
 GO



ALTER TABLE [dbo].[publicidad]
 ADD CONSTRAINT [publicidad$fk_Publicidad_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'puntodecroquis$fk_PuntoDeCroquis_Punto'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[puntodecroquis] DROP CONSTRAINT [puntodecroquis$fk_PuntoDeCroquis_Punto]
 GO



ALTER TABLE [dbo].[puntodecroquis]
 ADD CONSTRAINT [puntodecroquis$fk_PuntoDeCroquis_Punto]
 FOREIGN KEY 
   ([PuntoID])
 REFERENCES 
   [spuria].[dbo].[punto]     ([PuntoID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'puntodecroquis$fk_PuntoDeCroquis_Croquis'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[puntodecroquis] DROP CONSTRAINT [puntodecroquis$fk_PuntoDeCroquis_Croquis]
 GO



ALTER TABLE [dbo].[puntodecroquis]
 ADD CONSTRAINT [puntodecroquis$fk_PuntoDeCroquis_Croquis]
 FOREIGN KEY 
   ([CroquisID])
 REFERENCES 
   [spuria].[dbo].[croquis]     ([CroquisID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeografica$fk_RegionGeografica_Dibujable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[regiongeografica] DROP CONSTRAINT [regiongeografica$fk_RegionGeografica_Dibujable]
 GO



ALTER TABLE [dbo].[regiongeografica]
 ADD CONSTRAINT [regiongeografica$fk_RegionGeografica_Dibujable]
 FOREIGN KEY 
   ([Dibujable_P])
 REFERENCES 
   [spuria].[dbo].[dibujable]     ([DibujableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeografica$fk_RegionGeografica_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[regiongeografica] DROP CONSTRAINT [regiongeografica$fk_RegionGeografica_Rastreable]
 GO



ALTER TABLE [dbo].[regiongeografica]
 ADD CONSTRAINT [regiongeografica$fk_RegionGeografica_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeograficaobjetivo$fk_RegionGeograficaObjetivo_Publicidad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[regiongeograficaobjetivo] DROP CONSTRAINT [regiongeograficaobjetivo$fk_RegionGeograficaObjetivo_Publicidad]
 GO



ALTER TABLE [dbo].[regiongeograficaobjetivo]
 ADD CONSTRAINT [regiongeograficaobjetivo$fk_RegionGeograficaObjetivo_Publicidad]
 FOREIGN KEY 
   ([PublicidadID])
 REFERENCES 
   [spuria].[dbo].[publicidad]     ([PublicidadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'regiongeograficaobjetivo$fk_RegionGeograficaObjetivo_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[regiongeograficaobjetivo] DROP CONSTRAINT [regiongeograficaobjetivo$fk_RegionGeograficaObjetivo_RegionGeografica]
 GO



ALTER TABLE [dbo].[regiongeograficaobjetivo]
 ADD CONSTRAINT [regiongeograficaobjetivo$fk_RegionGeograficaObjetivo_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeograficaID])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'registro$fk_Registro_Accion'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[registro] DROP CONSTRAINT [registro$fk_Registro_Accion]
 GO



ALTER TABLE [dbo].[registro]
 ADD CONSTRAINT [registro$fk_Registro_Accion]
 FOREIGN KEY 
   ([Accion])
 REFERENCES 
   [spuria].[dbo].[accion]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'registro$fk_Registro_CodigoDeError'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[registro] DROP CONSTRAINT [registro$fk_Registro_CodigoDeError]
 GO



ALTER TABLE [dbo].[registro]
 ADD CONSTRAINT [registro$fk_Registro_CodigoDeError]
 FOREIGN KEY 
   ([CodigoDeError])
 REFERENCES 
   [spuria].[dbo].[codigodeerror]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'relaciondepalabras$fk_RelacionDePalabras_Palabra1'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[relaciondepalabras] DROP CONSTRAINT [relaciondepalabras$fk_RelacionDePalabras_Palabra1]
 GO



ALTER TABLE [dbo].[relaciondepalabras]
 ADD CONSTRAINT [relaciondepalabras$fk_RelacionDePalabras_Palabra1]
 FOREIGN KEY 
   ([Palabra1ID])
 REFERENCES 
   [spuria].[dbo].[palabra]     ([PalabraID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'relaciondepalabras$fk_RelacionDePalabras_Palabra2'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[relaciondepalabras] DROP CONSTRAINT [relaciondepalabras$fk_RelacionDePalabras_Palabra2]
 GO



ALTER TABLE [dbo].[relaciondepalabras]
 ADD CONSTRAINT [relaciondepalabras$fk_RelacionDePalabras_Palabra2]
 FOREIGN KEY 
   ([Palabra2ID])
 REFERENCES 
   [spuria].[dbo].[palabra]     ([PalabraID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'resultadodebusqueda$fk_ResultadoDeBusqueda_Buscable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[resultadodebusqueda] DROP CONSTRAINT [resultadodebusqueda$fk_ResultadoDeBusqueda_Buscable]
 GO



ALTER TABLE [dbo].[resultadodebusqueda]
 ADD CONSTRAINT [resultadodebusqueda$fk_ResultadoDeBusqueda_Buscable]
 FOREIGN KEY 
   ([BuscableID])
 REFERENCES 
   [spuria].[dbo].[buscable]     ([BuscableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'resultadodebusqueda$fk_ResultadoDeBusqueda_Busqueda'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[resultadodebusqueda] DROP CONSTRAINT [resultadodebusqueda$fk_ResultadoDeBusqueda_Busqueda]
 GO



ALTER TABLE [dbo].[resultadodebusqueda]
 ADD CONSTRAINT [resultadodebusqueda$fk_ResultadoDeBusqueda_Busqueda]
 FOREIGN KEY 
   ([BusquedaID])
 REFERENCES 
   [spuria].[dbo].[busqueda]     ([BusquedaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'seguidor$fk_Seguidor_Consumidor'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[seguidor] DROP CONSTRAINT [seguidor$fk_Seguidor_Consumidor]
 GO



ALTER TABLE [dbo].[seguidor]
 ADD CONSTRAINT [seguidor$fk_Seguidor_Consumidor]
 FOREIGN KEY 
   ([ConsumidorID])
 REFERENCES 
   [spuria].[dbo].[consumidor]     ([ConsumidorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'seguidor$fk_Seguidor_CalificableSeguible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[seguidor] DROP CONSTRAINT [seguidor$fk_Seguidor_CalificableSeguible]
 GO



ALTER TABLE [dbo].[seguidor]
 ADD CONSTRAINT [seguidor$fk_Seguidor_CalificableSeguible]
 FOREIGN KEY 
   ([CalificableSeguibleID])
 REFERENCES 
   [spuria].[dbo].[calificableseguible]     ([CalificableSeguibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'seguidor$fk_Seguidor_Rastreable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[seguidor] DROP CONSTRAINT [seguidor$fk_Seguidor_Rastreable]
 GO



ALTER TABLE [dbo].[seguidor]
 ADD CONSTRAINT [seguidor$fk_Seguidor_Rastreable]
 FOREIGN KEY 
   ([Rastreable_P])
 REFERENCES 
   [spuria].[dbo].[rastreable]     ([RastreableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'serviciovendido$fk_ServicioVendido_Cobrable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[serviciovendido] DROP CONSTRAINT [serviciovendido$fk_ServicioVendido_Cobrable]
 GO



ALTER TABLE [dbo].[serviciovendido]
 ADD CONSTRAINT [serviciovendido$fk_ServicioVendido_Cobrable]
 FOREIGN KEY 
   ([CobrableID])
 REFERENCES 
   [spuria].[dbo].[cobrable]     ([CobrableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'serviciovendido$fk_ServicioVendido_Factura'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[serviciovendido] DROP CONSTRAINT [serviciovendido$fk_ServicioVendido_Factura]
 GO



ALTER TABLE [dbo].[serviciovendido]
 ADD CONSTRAINT [serviciovendido$fk_ServicioVendido_Factura]
 FOREIGN KEY 
   ([FacturaID])
 REFERENCES 
   [spuria].[dbo].[factura]     ([FacturaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'sexoobjetivo$fk_SexoObjetivo_Publicidad'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[sexoobjetivo] DROP CONSTRAINT [sexoobjetivo$fk_SexoObjetivo_Publicidad]
 GO



ALTER TABLE [dbo].[sexoobjetivo]
 ADD CONSTRAINT [sexoobjetivo$fk_SexoObjetivo_Publicidad]
 FOREIGN KEY 
   ([PublicidadID])
 REFERENCES 
   [spuria].[dbo].[publicidad]     ([PublicidadID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'sexoobjetivo$fk_SexoObjetivo_Sexo'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[sexoobjetivo] DROP CONSTRAINT [sexoobjetivo$fk_SexoObjetivo_Sexo]
 GO



ALTER TABLE [dbo].[sexoobjetivo]
 ADD CONSTRAINT [sexoobjetivo$fk_SexoObjetivo_Sexo]
 FOREIGN KEY 
   ([Sexo])
 REFERENCES 
   [spuria].[dbo].[sexo]     ([Valor])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'subcontinente$fk_Subcontinente_Continente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[subcontinente] DROP CONSTRAINT [subcontinente$fk_Subcontinente_Continente]
 GO



ALTER TABLE [dbo].[subcontinente]
 ADD CONSTRAINT [subcontinente$fk_Subcontinente_Continente]
 FOREIGN KEY 
   ([Continente])
 REFERENCES 
   [spuria].[dbo].[continente]     ([ContinenteID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'subcontinente$fk_Subcontinente_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[subcontinente] DROP CONSTRAINT [subcontinente$fk_Subcontinente_RegionGeografica]
 GO



ALTER TABLE [dbo].[subcontinente]
 ADD CONSTRAINT [subcontinente$fk_Subcontinente_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeografica_P])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tamano$fk_Tamano_Tienda'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tamano] DROP CONSTRAINT [tamano$fk_Tamano_Tienda]
 GO



ALTER TABLE [dbo].[tamano]
 ADD CONSTRAINT [tamano$fk_Tamano_Tienda]
 FOREIGN KEY 
   ([TiendaID])
 REFERENCES 
   [spuria].[dbo].[tienda]     ([TiendaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$fk_Tienda_Interlocutor'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$fk_Tienda_Interlocutor]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$fk_Tienda_Interlocutor]
 FOREIGN KEY 
   ([Interlocutor_P])
 REFERENCES 
   [spuria].[dbo].[interlocutor]     ([InterlocutorID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$fk_Tienda_CalificableSeguible'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$fk_Tienda_CalificableSeguible]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$fk_Tienda_CalificableSeguible]
 FOREIGN KEY 
   ([CalificableSeguible_P])
 REFERENCES 
   [spuria].[dbo].[calificableseguible]     ([CalificableSeguibleID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$fk_Tienda_Cliente'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$fk_Tienda_Cliente]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$fk_Tienda_Cliente]
 FOREIGN KEY 
   ([Cliente_P])
 REFERENCES 
   [spuria].[dbo].[cliente]     ([RIF])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$fk_Tienda_Dibujable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$fk_Tienda_Dibujable]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$fk_Tienda_Dibujable]
 FOREIGN KEY 
   ([Dibujable_P])
 REFERENCES 
   [spuria].[dbo].[dibujable]     ([DibujableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO

IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tienda$fk_Tienda_Buscable'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tienda] DROP CONSTRAINT [tienda$fk_Tienda_Buscable]
 GO



ALTER TABLE [dbo].[tienda]
 ADD CONSTRAINT [tienda$fk_Tienda_Buscable]
 FOREIGN KEY 
   ([Buscable_P])
 REFERENCES 
   [spuria].[dbo].[buscable]     ([BuscableID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'tiendasconsumidores$fk_TiendasConsumidores_RegionGeografica'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[tiendasconsumidores] DROP CONSTRAINT [tiendasconsumidores$fk_TiendasConsumidores_RegionGeografica]
 GO



ALTER TABLE [dbo].[tiendasconsumidores]
 ADD CONSTRAINT [tiendasconsumidores$fk_TiendasConsumidores_RegionGeografica]
 FOREIGN KEY 
   ([RegionGeograficaID])
 REFERENCES 
   [spuria].[dbo].[regiongeografica]     ([RegionGeograficaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'turno$fk_Turno_HorarioDeTrabajo'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[turno] DROP CONSTRAINT [turno$fk_Turno_HorarioDeTrabajo]
 GO



ALTER TABLE [dbo].[turno]
 ADD CONSTRAINT [turno$fk_Turno_HorarioDeTrabajo]
 FOREIGN KEY 
   ([TiendaID], [Dia])
 REFERENCES 
   [spuria].[dbo].[horariodetrabajo]     ([TiendaID], [Dia])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'usuario$fk_Usuario_Parroquia'  AND sc.name=N'dbo'  AND type in (N'F'))
ALTER TABLE [dbo].[usuario] DROP CONSTRAINT [usuario$fk_Usuario_Parroquia]
 GO



ALTER TABLE [dbo].[usuario]
 ADD CONSTRAINT [usuario$fk_Usuario_Parroquia]
 FOREIGN KEY 
   ([Parroquia])
 REFERENCES 
   [spuria].[dbo].[parroquia]     ([ParroquiaID])
    ON DELETE NO ACTION
    ON UPDATE NO ACTION

GO


USE spuria
GO
IF  EXISTS (select * from sys.objects so join sys.schemas sc on so.schema_id = sc.schema_id where so.name = N'inventariotienda' and sc.name=N'dbo' AND type in (N'V'))
 DROP VIEW [dbo].[inventariotienda]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   ALGORITHM =  UNDEFINED.
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*   M2SS0003: The following SQL clause was ignored during conversion:
*   SQL SECURITY DEFINER.
*/

CREATE VIEW dbo.inventariotienda (
   [TiendaID], 
   [Codigo], 
   [Descripcion], 
   [Precio], 
   [Cantidad])
AS 
   SELECT 
      inventario.TiendaID AS TiendaID, 
      inventario.Codigo AS Codigo, 
      inventario.Descripcion AS Descripcion, 
      preciocantidad.Precio AS Precio, 
      preciocantidad.Cantidad AS Cantidad
   FROM (dbo.inventario 
      LEFT JOIN dbo.preciocantidad 
      ON (((inventario.TiendaID = preciocantidad.TiendaID) AND (inventario.Codigo = preciocantidad.Codigo))))
   WHERE 
      CASE 
         WHEN CONVERT(varchar(20), preciocantidad.FechaFin, 120) IS NULL THEN 1
         ELSE 0
      END <> 0
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.inventariotienda',
        N'SCHEMA', N'dbo',
        N'VIEW', N'inventariotienda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarAdministrador_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarAdministrador_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarAdministrador_AfterUpdate
   ON dbo.administrador
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$AdministradorID int, 
               @new$Estatus nchar(9), 
               @old$Estatus nchar(9), 
               @new$Privilegios nchar(7), 
               @old$Privilegios nchar(7)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.AdministradorID, 
                     i.Estatus, 
                     i.Privilegios, 
                     d.Estatus, 
                     d.Privilegios
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$AdministradorID, 
                  @new$Estatus, 
                  @new$Privilegios, 
                  @old$Estatus, 
                  @old$Privilegios

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Estatus <> @old$Estatus
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'AdministradorID(columna): '
                               + 
                              CAST(@new$AdministradorID AS varchar(50))
                               + 
                              N'(Estatus)'
                               + 
                              CAST(@old$Estatus AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Estatus AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Privilegios <> @old$Privilegios
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'AdministradorID(columna): '
                               + 
                              CAST(@new$AdministradorID AS varchar(50))
                               + 
                              N'(Privilegios)'
                               + 
                              CAST(@old$Privilegios AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Privilegios AS char(1))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$AdministradorID, 
                        @new$Estatus, 
                        @new$Privilegios, 
                        @old$Estatus, 
                        @old$Privilegios

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.administrador.DespuesDeActualizarAdministrador',
        N'SCHEMA', N'dbo',
        N'TABLE', N'administrador',
        N'TRIGGER', N'DespuesDeActualizarAdministrador_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarCliente_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarCliente_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarCliente_AfterUpdate
   ON dbo.cliente
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$RIF nchar(10), 
               @new$Categoria int, 
               @old$Categoria int, 
               @new$Estatus nchar(9), 
               @old$Estatus nchar(9), 
               @new$NombreComun nvarchar(45), 
               @old$NombreComun nvarchar(45), 
               @new$Telefono nchar(12), 
               @old$Telefono nchar(12), 
               @new$Edificio_CC nchar(20), 
               @old$Edificio_CC nchar(20), 
               @new$Piso nchar(12), 
               @old$Piso nchar(12), 
               @new$Apartamento nchar(12), 
               @old$Apartamento nchar(12), 
               @new$LocalNo nchar(12), 
               @old$LocalNo nchar(12), 
               @new$Casa nchar(20), 
               @old$Casa nchar(20), 
               @new$Calle nchar(12), 
               @old$Calle nchar(12), 
               @new$Sector_Urb_Barrio nchar(20), 
               @old$Sector_Urb_Barrio nchar(20), 
               @new$PaginaWeb nchar(40), 
               @old$PaginaWeb nchar(40), 
               @new$Facebook nchar(80), 
               @old$Facebook nchar(80), 
               @new$Twitter nchar(80), 
               @old$Twitter nchar(80)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.RIF, 
                     i.Categoria, 
                     i.Estatus, 
                     i.NombreComun, 
                     i.Telefono, 
                     i.Edificio_CC, 
                     i.Piso, 
                     i.Apartamento, 
                     i.LocalNo, 
                     i.Casa, 
                     i.Calle, 
                     i.Sector_Urb_Barrio, 
                     i.PaginaWeb, 
                     i.Facebook, 
                     i.Twitter, 
                     d.Categoria, 
                     d.Estatus, 
                     d.NombreComun, 
                     d.Telefono, 
                     d.Edificio_CC, 
                     d.Piso, 
                     d.Apartamento, 
                     d.LocalNo, 
                     d.Casa, 
                     d.Calle, 
                     d.Sector_Urb_Barrio, 
                     d.PaginaWeb, 
                     d.Facebook, 
                     d.Twitter
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$RIF, 
                  @new$Categoria, 
                  @new$Estatus, 
                  @new$NombreComun, 
                  @new$Telefono, 
                  @new$Edificio_CC, 
                  @new$Piso, 
                  @new$Apartamento, 
                  @new$LocalNo, 
                  @new$Casa, 
                  @new$Calle, 
                  @new$Sector_Urb_Barrio, 
                  @new$PaginaWeb, 
                  @new$Facebook, 
                  @new$Twitter, 
                  @old$Categoria, 
                  @old$Estatus, 
                  @old$NombreComun, 
                  @old$Telefono, 
                  @old$Edificio_CC, 
                  @old$Piso, 
                  @old$Apartamento, 
                  @old$LocalNo, 
                  @old$Casa, 
                  @old$Calle, 
                  @old$Sector_Urb_Barrio, 
                  @old$PaginaWeb, 
                  @old$Facebook, 
                  @old$Twitter

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Categoria <> @old$Categoria
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Categoria)'
                               + 
                              CAST(@old$Categoria AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Categoria AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Estatus <> @old$Estatus
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Estatus)'
                               + 
                              CAST(@old$Estatus AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Estatus AS char(1))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$NombreComun <> @old$NombreComun
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(NombreComun)'
                               + 
                              CAST(@old$NombreComun AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NombreComun AS char(1))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$Telefono <> @old$Telefono
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Telefono)'
                               + 
                              CAST(@old$Telefono AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Telefono AS char(1))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                     IF @new$Edificio_CC <> @old$Edificio_CC
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Edificio_CC)'
                               + 
                              CAST(@old$Edificio_CC AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Edificio_CC AS char(1))

                           DECLARE
                              @procedure_return_value$5 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$5  OUTPUT

                           SELECT @bobo = @procedure_return_value$5

                        END

                     IF @new$Piso <> @old$Piso
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Piso)'
                               + 
                              CAST(@old$Piso AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Piso AS char(1))

                           DECLARE
                              @procedure_return_value$6 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$6  OUTPUT

                           SELECT @bobo = @procedure_return_value$6

                        END

                     IF @new$Apartamento <> @old$Apartamento
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Apartamento)'
                               + 
                              CAST(@old$Apartamento AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Apartamento AS char(1))

                           DECLARE
                              @procedure_return_value$7 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$7  OUTPUT

                           SELECT @bobo = @procedure_return_value$7

                        END

                     IF @new$LocalNo <> @old$LocalNo
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(LocalNo)'
                               + 
                              CAST(@old$LocalNo AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$LocalNo AS char(1))

                           DECLARE
                              @procedure_return_value$8 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$8  OUTPUT

                           SELECT @bobo = @procedure_return_value$8

                        END

                     IF @new$Casa <> @old$Casa
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Casa)'
                               + 
                              CAST(@old$Casa AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Casa AS char(1))

                           DECLARE
                              @procedure_return_value$9 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$9  OUTPUT

                           SELECT @bobo = @procedure_return_value$9

                        END

                     IF @new$Calle <> @old$Calle
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Calle)'
                               + 
                              CAST(@old$Calle AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Calle AS char(1))

                           DECLARE
                              @procedure_return_value$10 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$10  OUTPUT

                           SELECT @bobo = @procedure_return_value$10

                        END

                     IF @new$Sector_Urb_Barrio <> @old$Sector_Urb_Barrio
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Sector_Urb_Barrio)'
                               + 
                              CAST(@old$Sector_Urb_Barrio AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Sector_Urb_Barrio AS char(1))

                           DECLARE
                              @procedure_return_value$11 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$11  OUTPUT

                           SELECT @bobo = @procedure_return_value$11

                        END

                     IF @new$PaginaWeb <> @old$PaginaWeb
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(PaginaWeb)'
                               + 
                              CAST(@old$PaginaWeb AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$PaginaWeb AS char(1))

                           DECLARE
                              @procedure_return_value$12 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$12  OUTPUT

                           SELECT @bobo = @procedure_return_value$12

                        END

                     IF @new$Facebook <> @old$Facebook
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Facebook)'
                               + 
                              CAST(@old$Facebook AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Facebook AS char(1))

                           DECLARE
                              @procedure_return_value$13 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$13  OUTPUT

                           SELECT @bobo = @procedure_return_value$13

                        END

                     IF @new$Twitter <> @old$Twitter
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente(columna): '
                               + 
                              @new$RIF
                               + 
                              N'(Twitter)'
                               + 
                              CAST(@old$Twitter AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Twitter AS char(1))

                           DECLARE
                              @procedure_return_value$14 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$14  OUTPUT

                           SELECT @bobo = @procedure_return_value$14

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$RIF, 
                        @new$Categoria, 
                        @new$Estatus, 
                        @new$NombreComun, 
                        @new$Telefono, 
                        @new$Edificio_CC, 
                        @new$Piso, 
                        @new$Apartamento, 
                        @new$LocalNo, 
                        @new$Casa, 
                        @new$Calle, 
                        @new$Sector_Urb_Barrio, 
                        @new$PaginaWeb, 
                        @new$Facebook, 
                        @new$Twitter, 
                        @old$Categoria, 
                        @old$Estatus, 
                        @old$NombreComun, 
                        @old$Telefono, 
                        @old$Edificio_CC, 
                        @old$Piso, 
                        @old$Apartamento, 
                        @old$LocalNo, 
                        @old$Casa, 
                        @old$Calle, 
                        @old$Sector_Urb_Barrio, 
                        @old$PaginaWeb, 
                        @old$Facebook, 
                        @old$Twitter

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cliente.DespuesDeActualizarCliente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cliente',
        N'TRIGGER', N'DespuesDeActualizarCliente_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarConsumidor_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarConsumidor_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarConsumidor_AfterUpdate
   ON dbo.consumidor
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$ConsumidorID int, 
               @new$Nombre nvarchar(45), 
               @old$Nombre nvarchar(45), 
               @new$Apellido nvarchar(45), 
               @old$Apellido nvarchar(45), 
               @new$Estatus nchar(9), 
               @old$Estatus nchar(9), 
               @new$Sexo nchar(6), 
               @old$Sexo nchar(6), 
               @new$GradoDeInstruccion nchar(16), 
               @old$GradoDeInstruccion nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.ConsumidorID, 
                     i.Nombre, 
                     i.Apellido, 
                     i.Estatus, 
                     i.Sexo, 
                     i.GradoDeInstruccion, 
                     d.Nombre, 
                     d.Apellido, 
                     d.Estatus, 
                     d.Sexo, 
                     d.GradoDeInstruccion
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$ConsumidorID, 
                  @new$Nombre, 
                  @new$Apellido, 
                  @new$Estatus, 
                  @new$Sexo, 
                  @new$GradoDeInstruccion, 
                  @old$Nombre, 
                  @old$Apellido, 
                  @old$Estatus, 
                  @old$Sexo, 
                  @old$GradoDeInstruccion

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Nombre <> @old$Nombre
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Consumidor(columna): '
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N'(Nombre)'
                               + 
                              CAST(@old$Nombre AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Nombre AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Apellido <> @old$Apellido
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Consumidor(columna): '
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N'(Apellido)'
                               + 
                              CAST(@old$Apellido AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Apellido AS char(1))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$Estatus <> @old$Estatus
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Consumidor(columna): '
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N'(Estatus)'
                               + 
                              CAST(@old$Estatus AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Estatus AS char(1))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$Sexo <> @old$Sexo
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Consumidor(columna): '
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N'(Sexo)'
                               + 
                              CAST(@old$Sexo AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Sexo AS char(1))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                     IF @new$GradoDeInstruccion <> @old$GradoDeInstruccion
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Consumidor(columna): '
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N'(GradoDeInstruccion)'
                               + 
                              CAST(@old$GradoDeInstruccion AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$GradoDeInstruccion AS char(1))

                           DECLARE
                              @procedure_return_value$5 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$5  OUTPUT

                           SELECT @bobo = @procedure_return_value$5

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$ConsumidorID, 
                        @new$Nombre, 
                        @new$Apellido, 
                        @new$Estatus, 
                        @new$Sexo, 
                        @new$GradoDeInstruccion, 
                        @old$Nombre, 
                        @old$Apellido, 
                        @old$Estatus, 
                        @old$Sexo, 
                        @old$GradoDeInstruccion

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidor.DespuesDeActualizarConsumidor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidor',
        N'TRIGGER', N'DespuesDeActualizarConsumidor_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarHorarioDeTrabajo_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarHorarioDeTrabajo_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarHorarioDeTrabajo_AfterUpdate
   ON dbo.horariodetrabajo
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$Dia nchar(9), 
               @new$Laborable smallint, 
               @old$Laborable smallint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.TiendaID, i.Dia, i.Laborable, d.Laborable
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$TiendaID, @new$Dia, @new$Laborable, @old$Laborable

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente_P char(10)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Cliente_P = tienda.Cliente_P
                     FROM dbo.tienda, dbo.cliente
                     WHERE tienda.TiendaID = @new$TiendaID

                     SELECT @Rastreable_P = CAST(@Cliente_P AS bigint)

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente
                     WHERE cliente.RIF = @Cliente_P

                     IF @new$Laborable <> @old$Laborable
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->HorarioDeTrabajo(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              @new$Dia
                               + 
                              N'(Laborable): '
                               + 
                              CAST(@old$Laborable AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Laborable AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$TiendaID, @new$Dia, @new$Laborable, @old$Laborable

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.horariodetrabajo.DespuesDeActualizarHorarioDeTrabajo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'horariodetrabajo',
        N'TRIGGER', N'DespuesDeActualizarHorarioDeTrabajo_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarResultadoDeBusqueda_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarResultadoDeBusqueda_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarResultadoDeBusqueda_AfterUpdate
   ON dbo.resultadodebusqueda
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$BusquedaID int, 
               @new$BuscableID int, 
               @new$Visitado smallint, 
               @old$Visitado smallint, 
               @new$Relevancia float(24), 
               @old$Relevancia float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.BusquedaID, 
                     i.BuscableID, 
                     i.Visitado, 
                     i.Relevancia, 
                     d.Visitado, 
                     d.Relevancia
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$BusquedaID, 
                  @new$BuscableID, 
                  @new$Visitado, 
                  @new$Relevancia, 
                  @old$Visitado, 
                  @old$Relevancia

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = busqueda.Rastreable_P
                     FROM dbo.busqueda
                     WHERE busqueda.BusquedaID = @new$BusquedaID

                     IF @new$Visitado <> @old$Visitado
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Busqueda->ResultadoDeBusqueda(columna): '
                               + 
                              CAST(@new$BusquedaID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$BusquedaID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$BuscableID AS varchar(50))
                               + 
                              N')(Visitado): '
                               + 
                              CAST(@old$Visitado AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Visitado AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Relevancia <> @old$Relevancia
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Busqueda->ResultadoDeBusqueda(columna): '
                               + 
                              CAST(@new$BusquedaID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$BusquedaID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$BuscableID AS varchar(50))
                               + 
                              N')(Visitado): '
                               + 
                              CAST(@old$Relevancia AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Relevancia AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$BusquedaID, 
                        @new$BuscableID, 
                        @new$Visitado, 
                        @new$Relevancia, 
                        @old$Visitado, 
                        @old$Relevancia

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.resultadodebusqueda.DespuesDeActualizarResultadoDeBusqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'resultadodebusqueda',
        N'TRIGGER', N'DespuesDeActualizarResultadoDeBusqueda_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarTamano_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarTamano_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarTamano_AfterUpdate
   ON dbo.tamano
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @old$FechaFin datetime2(0), 
               @new$NumeroTotalDeProductos int, 
               @old$NumeroTotalDeProductos int, 
               @new$CantidadTotalDeProductos int, 
               @old$CantidadTotalDeProductos int, 
               @new$Valor int, 
               @old$Valor int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.NumeroTotalDeProductos, 
                     i.CantidadTotalDeProductos, 
                     i.Valor, 
                     d.FechaFin, 
                     d.NumeroTotalDeProductos, 
                     d.CantidadTotalDeProductos, 
                     d.Valor
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$NumeroTotalDeProductos, 
                  @new$CantidadTotalDeProductos, 
                  @new$Valor, 
                  @old$FechaFin, 
                  @old$NumeroTotalDeProductos, 
                  @old$CantidadTotalDeProductos, 
                  @old$Valor

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente_P char(10)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Cliente_P = tienda.Cliente_P
                     FROM dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente
                     WHERE cliente.RIF = @Cliente_P

                     IF @new$FechaFin <> @old$FechaFin
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->Tamano(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(FechaFin): '
                               + 
                              CONVERT(varchar(20), @old$FechaFin, 120)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(20), @new$FechaFin, 120)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$NumeroTotalDeProductos <> @old$NumeroTotalDeProductos
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->Tamano(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(NumeroTotalDeProductos): '
                               + 
                              CAST(@old$NumeroTotalDeProductos AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroTotalDeProductos AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$CantidadTotalDeProductos <> @old$CantidadTotalDeProductos
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->Tamano(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(CantidadTotalDeProductos): '
                               + 
                              CAST(@old$CantidadTotalDeProductos AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$CantidadTotalDeProductos AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$Valor <> @old$Valor
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->Tamano(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(Tamano): '
                               + 
                              CAST(@old$Valor AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Valor AS varchar(50))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$NumeroTotalDeProductos, 
                        @new$CantidadTotalDeProductos, 
                        @new$Valor, 
                        @old$FechaFin, 
                        @old$NumeroTotalDeProductos, 
                        @old$CantidadTotalDeProductos, 
                        @old$Valor

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tamano.DespuesDeActualizarTamano',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tamano',
        N'TRIGGER', N'DespuesDeActualizarTamano_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarTienda_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarTienda_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarTienda_AfterUpdate
   ON dbo.tienda
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Cliente_P nchar(10), 
               @new$TiendaID int, 
               @new$Abierto smallint, 
               @old$Abierto smallint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.Cliente_P, i.TiendaID, i.Abierto, d.Abierto
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Cliente_P, @new$TiendaID, @new$Abierto, @old$Abierto

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     IF @new$Abierto <> @old$Abierto
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda(columna): '
                               + 
                              CAST(@new$Cliente_P AS char(1))
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'(Abierto): '
                               + 
                              CAST(@old$Abierto AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Abierto AS varchar(50))

                           SELECT @Rastreable_P = cliente.Rastreable_P
                           FROM dbo.cliente
                           WHERE cliente.RIF = @new$Cliente_P

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Cliente_P, @new$TiendaID, @new$Abierto, @old$Abierto

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tienda.DespuesDeActualizarTienda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tienda',
        N'TRIGGER', N'DespuesDeActualizarTienda_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarTurno_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarTurno_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarTurno_AfterUpdate
   ON dbo.turno
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$Dia nchar(9), 
               @new$HoraDeApertura time, 
               @old$HoraDeApertura time, 
               @new$HoraDeCierre time, 
               @old$HoraDeCierre time

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.Dia, 
                     i.HoraDeApertura, 
                     i.HoraDeCierre, 
                     d.HoraDeApertura, 
                     d.HoraDeCierre
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$Dia, 
                  @new$HoraDeApertura, 
                  @new$HoraDeCierre, 
                  @old$HoraDeApertura, 
                  @old$HoraDeCierre

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente_P char(10)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Cliente_P = tienda.Cliente_P
                     FROM dbo.tienda, dbo.cliente
                     WHERE tienda.TiendaID = @new$TiendaID

                     SELECT @Rastreable_P = CAST(@Cliente_P AS bigint)

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente
                     WHERE cliente.RIF = @Cliente_P

                     IF @new$HoraDeApertura <> @old$HoraDeApertura
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->HorarioDeTrabajo->Turno(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              @new$Dia
                               + 
                              N'->(HoraDeApertura): '
                               + 
                              CONVERT(varchar(8), @old$HoraDeApertura, 108)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(8), @new$HoraDeApertura, 108)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$HoraDeCierre <> @old$HoraDeCierre
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Cliente->Tienda->HorarioDeTrabajo->Turno(columna): '
                               + 
                              @Cliente_P
                               + 
                              N'->'
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              @new$Dia
                               + 
                              N'->(HoraDeCierre): '
                               + 
                              CONVERT(varchar(8), @old$HoraDeCierre, 108)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(8), @new$HoraDeApertura, 108)

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$Dia, 
                        @new$HoraDeApertura, 
                        @new$HoraDeCierre, 
                        @old$HoraDeApertura, 
                        @old$HoraDeCierre

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.turno.DespuesDeActualizarTurno',
        N'SCHEMA', N'dbo',
        N'TABLE', N'turno',
        N'TRIGGER', N'DespuesDeActualizarTurno_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeActualizarUsuario_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeActualizarUsuario_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeActualizarUsuario_AfterUpdate
   ON dbo.usuario
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$UsuarioID int, 
               @new$Parroquia int, 
               @old$Parroquia int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.UsuarioID, i.Parroquia, d.Parroquia
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$UsuarioID, @new$Parroquia, @old$Parroquia

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente char(10)

                     DECLARE
                        @Cl int, 
                        @Ad int, 
                        @Co int, 
                        @Rastreable_P int, 
                        @bobo int

                     IF @new$Parroquia <> @old$Parroquia
                        BEGIN

                           SELECT @Cl = count_big(*)
                           FROM dbo.cliente
                           WHERE cliente.Usuario_P = @new$UsuarioID

                           SELECT @Ad = count_big(*)
                           FROM dbo.administrador
                           WHERE administrador.Usuario_P = @new$UsuarioID

                           SELECT @Co = count_big(*)
                           FROM dbo.consumidor
                           WHERE consumidor.Usuario_P = @new$UsuarioID

                           IF @Cl = 1
                              BEGIN

                                 SELECT @Cliente = cliente.RIF, @Rastreable_P = cliente.Rastreable_P
                                 FROM dbo.cliente
                                 WHERE cliente.Usuario_P = @new$UsuarioID

                                 SELECT @Parametros = N'Cliente<-Usuario(columna): ' + @Cliente + N'<-'

                              END

                           IF @Ad = 1
                              BEGIN

                                 SELECT @Ad = administrador.AdministradorID, @Rastreable_P = administrador.Rastreable_P
                                 FROM dbo.administrador
                                 WHERE administrador.Usuario_P = @new$UsuarioID

                                 /*
                                 *   SSMA informational messages:
                                 *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                                 */

                                 SELECT @Parametros = N'Administrador<-Usuario(columna): ' + CAST(@Ad AS varchar(50)) + N'<-'

                              END

                           IF @Co = 1
                              BEGIN

                                 SELECT @Co = consumidor.ConsumidorID, @Rastreable_P = consumidor.Rastreable_P
                                 FROM dbo.consumidor
                                 WHERE consumidor.Usuario_P = @new$UsuarioID

                                 /*
                                 *   SSMA informational messages:
                                 *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                                 */

                                 SELECT @Parametros = N'Consumidor<-Usuario(columna): ' + CAST(@Co AS varchar(50)) + N'<-'

                              END

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              @Parametros
                               + 
                              CAST(@new$UsuarioID AS varchar(50))
                               + 
                              N'(Parroquia): '
                               + 
                              CAST(@old$Parroquia AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Parroquia AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$UsuarioID, @new$Parroquia, @old$Parroquia

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.usuario.DespuesDeActualizarUsuario',
        N'SCHEMA', N'dbo',
        N'TABLE', N'usuario',
        N'TRIGGER', N'DespuesDeActualizarUsuario_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertar_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertar_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertar_AfterInsert
   ON dbo.busqueda
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @new$BusquedaID int, 
               @new$Usuario int, 
               @new$FechaHora datetime2(0), 
               @new$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Etiquetable_P, 
                     BusquedaID, 
                     Usuario, 
                     FechaHora, 
                     Contenido
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$BusquedaID, 
                  @new$Usuario, 
                  @new$FechaHora, 
                  @new$Contenido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Busqueda: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Etiquetable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$BusquedaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Usuario AS varchar(50))
                         + 
                        N','
                         + 
                        CONVERT(varchar(20), @new$FechaHora, 120)
                         + 
                        N','
                         + 
                        @new$Contenido

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$BusquedaID, 
                        @new$Usuario, 
                        @new$FechaHora, 
                        @new$Contenido

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.busqueda.DespuesDeInsertar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'busqueda',
        N'TRIGGER', N'DespuesDeInsertar_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarAdministrador_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarAdministrador_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarAdministrador_AfterInsert
   ON dbo.administrador
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Usuario_P int, 
               @new$AdministradorID int, 
               @new$Estatus nchar(9), 
               @new$Privilegios nchar(7), 
               @new$Nombre nvarchar(45), 
               @new$Apellido nvarchar(45)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Usuario_P, 
                     AdministradorID, 
                     Estatus, 
                     Privilegios, 
                     Nombre, 
                     Apellido
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Usuario_P, 
                  @new$AdministradorID, 
                  @new$Estatus, 
                  @new$Privilegios, 
                  @new$Nombre, 
                  @new$Apellido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Administrador: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Usuario_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$AdministradorID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Estatus
                         + 
                        N','
                         + 
                        @new$Privilegios
                         + 
                        N','
                         + 
                        @new$Nombre
                         + 
                        N','
                         + 
                        @new$Apellido

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Usuario_P, 
                        @new$AdministradorID, 
                        @new$Estatus, 
                        @new$Privilegios, 
                        @new$Nombre, 
                        @new$Apellido

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.administrador.DespuesDeInsertarAdministrador',
        N'SCHEMA', N'dbo',
        N'TABLE', N'administrador',
        N'TRIGGER', N'DespuesDeInsertarAdministrador_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarCliente_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarCliente_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarCliente_AfterInsert
   ON dbo.cliente
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Describible_P int, 
               @new$Usuario_P int, 
               @new$RIF nchar(10), 
               @new$Categoria int, 
               @new$Estatus nchar(9), 
               @new$NombreLegal nvarchar(45), 
               @new$NombreComun nvarchar(45), 
               @new$Telefono nchar(12), 
               @new$Calle nchar(12), 
               @new$Sector_Urb_Barrio nchar(20)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Describible_P, 
                     Usuario_P, 
                     RIF, 
                     Categoria, 
                     Estatus, 
                     NombreLegal, 
                     NombreComun, 
                     Telefono, 
                     Calle, 
                     Sector_Urb_Barrio
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Describible_P, 
                  @new$Usuario_P, 
                  @new$RIF, 
                  @new$Categoria, 
                  @new$Estatus, 
                  @new$NombreLegal, 
                  @new$NombreComun, 
                  @new$Telefono, 
                  @new$Calle, 
                  @new$Sector_Urb_Barrio

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Cliente: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Describible_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Usuario_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$RIF AS char(1))
                         + 
                        N','
                         + 
                        @new$RIF
                         + 
                        N','
                         + 
                        CAST(@new$Categoria AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Estatus
                         + 
                        N','
                         + 
                        @new$NombreLegal
                         + 
                        N','
                         + 
                        @new$NombreComun
                         + 
                        N','
                         + 
                        @new$Telefono
                         + 
                        N','
                         + 
                        @new$Calle
                         + 
                        N','
                         + 
                        @new$Sector_Urb_Barrio

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Describible_P, 
                        @new$Usuario_P, 
                        @new$RIF, 
                        @new$Categoria, 
                        @new$Estatus, 
                        @new$NombreLegal, 
                        @new$NombreComun, 
                        @new$Telefono, 
                        @new$Calle, 
                        @new$Sector_Urb_Barrio

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cliente.DespuesDeInsertarCliente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cliente',
        N'TRIGGER', N'DespuesDeInsertarCliente_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarConsumidor_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarConsumidor_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarConsumidor_AfterInsert
   ON dbo.consumidor
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Interlocutor_P int, 
               @new$Usuario_P int, 
               @new$ConsumidorID int, 
               @new$Nombre nvarchar(45), 
               @new$Apellido nvarchar(45), 
               @new$Estatus nchar(9), 
               @new$Sexo nchar(6), 
               @new$FechaDeNacimiento date, 
               @new$GrupoDeEdad nchar(15), 
               @new$GradoDeInstruccion nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Interlocutor_P, 
                     Usuario_P, 
                     ConsumidorID, 
                     Nombre, 
                     Apellido, 
                     Estatus, 
                     Sexo, 
                     FechaDeNacimiento, 
                     GrupoDeEdad, 
                     GradoDeInstruccion
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Interlocutor_P, 
                  @new$Usuario_P, 
                  @new$ConsumidorID, 
                  @new$Nombre, 
                  @new$Apellido, 
                  @new$Estatus, 
                  @new$Sexo, 
                  @new$FechaDeNacimiento, 
                  @new$GrupoDeEdad, 
                  @new$GradoDeInstruccion

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Consumidor: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Interlocutor_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Usuario_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$ConsumidorID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Nombre
                         + 
                        N','
                         + 
                        @new$Apellido
                         + 
                        N','
                         + 
                        @new$Estatus
                         + 
                        N','
                         + 
                        @new$Sexo
                         + 
                        N','
                         + 
                        CONVERT(varchar(10), @new$FechaDeNacimiento, 120)
                         + 
                        N','
                         + 
                        @new$GrupoDeEdad
                         + 
                        N','
                         + 
                        @new$GradoDeInstruccion

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Interlocutor_P, 
                        @new$Usuario_P, 
                        @new$ConsumidorID, 
                        @new$Nombre, 
                        @new$Apellido, 
                        @new$Estatus, 
                        @new$Sexo, 
                        @new$FechaDeNacimiento, 
                        @new$GrupoDeEdad, 
                        @new$GradoDeInstruccion

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidor.DespuesDeInsertarConsumidor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidor',
        N'TRIGGER', N'DespuesDeInsertarConsumidor_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarEstadisticas_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarEstadisticas_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarEstadisticas_AfterInsert
   ON dbo.estadisticas
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$EstadisticasID int, 
               @new$RegionGeografica int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT Rastreable_P, EstadisticasID, RegionGeografica
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Rastreable_P, @new$EstadisticasID, @new$RegionGeografica

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = 
                        N'Estadisticas: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$EstadisticasID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$RegionGeografica AS varchar(50))

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Rastreable_P, @new$EstadisticasID, @new$RegionGeografica

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticas.DespuesDeInsertarEstadisticas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticas',
        N'TRIGGER', N'DespuesDeInsertarEstadisticas_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarEstadisticasDeVisitas_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarEstadisticasDeVisitas_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarEstadisticasDeVisitas_AfterInsert
   ON dbo.estadisticasdevisitas
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Estadisticas_P int, 
               @new$EstadisticasDeVisitasID int, 
               @new$Buscable int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT Estadisticas_P, EstadisticasDeVisitasID, Buscable
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Estadisticas_P, @new$EstadisticasDeVisitasID, @new$Buscable

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Estadisticas->EstadisticasDeVisitas: '
                         + 
                        CAST(@new$Estadisticas_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$EstadisticasDeVisitasID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Buscable AS varchar(50))

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$Estadisticas_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Estadisticas_P, @new$EstadisticasDeVisitasID, @new$Buscable

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdevisitas.DespuesDeInsertarEstadisticasDeVisitas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdevisitas',
        N'TRIGGER', N'DespuesDeInsertarEstadisticasDeVisitas_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarHorarioDeTrabajo_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarHorarioDeTrabajo_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarHorarioDeTrabajo_AfterInsert
   ON dbo.horariodetrabajo
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$Dia nchar(9), 
               @new$Laborable smallint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT TiendaID, Dia, Laborable
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$TiendaID, @new$Dia, @new$Laborable

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente_P char(10)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Cliente_P = tienda.Cliente_P
                     FROM dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Cliente->Tienda->HorarioDeTrabajo: '
                         + 
                        @Cliente_P
                         + 
                        N'->'
                         + 
                        CAST(@new$TiendaID AS varchar(50))
                         + 
                        N'->('
                         + 
                        @new$Dia
                         + 
                        N','
                         + 
                        CAST(@new$Laborable AS varchar(50))
                         + 
                        N')'

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente, dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID AND cliente.RIF = @Cliente_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$TiendaID, @new$Dia, @new$Laborable

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.horariodetrabajo.DespuesDeInsertarHorarioDeTrabajo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'horariodetrabajo',
        N'TRIGGER', N'DespuesDeInsertarHorarioDeTrabajo_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarPatrocinante_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarPatrocinante_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarPatrocinante_AfterInsert
   ON dbo.patrocinante
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Cliente_P nchar(10), 
               @new$PatrocinanteID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT Cliente_P, PatrocinanteID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Cliente_P, @new$PatrocinanteID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente
                     WHERE cliente.RIF = @new$Cliente_P

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'Cliente->Patrocinante: ' + CAST(@new$Cliente_P AS char(1)) + N'->' + CAST(@new$PatrocinanteID AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Cliente_P, @new$PatrocinanteID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.patrocinante.DespuesDeInsertarPatrocinante',
        N'SCHEMA', N'dbo',
        N'TABLE', N'patrocinante',
        N'TRIGGER', N'DespuesDeInsertarPatrocinante_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarResultadoDeBusqueda_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarResultadoDeBusqueda_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarResultadoDeBusqueda_AfterInsert
   ON dbo.resultadodebusqueda
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$BusquedaID int, 
               @new$BuscableID int, 
               @new$Visitado smallint, 
               @new$Relevancia float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT BusquedaID, BuscableID, Visitado, Relevancia
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$BusquedaID, @new$BuscableID, @new$Visitado, @new$Relevancia

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Busqueda->ResultadoDeBusqueda: '
                         + 
                        CAST(@new$BusquedaID AS varchar(50))
                         + 
                        N'->('
                         + 
                        CAST(@new$BusquedaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$BuscableID AS varchar(50))
                         + 
                        N'): '
                         + 
                        CAST(@new$Visitado AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Relevancia AS varchar(50))

                     SELECT @Rastreable_P = busqueda.Rastreable_P
                     FROM dbo.busqueda
                     WHERE busqueda.BusquedaID = @new$BusquedaID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$BusquedaID, @new$BuscableID, @new$Visitado, @new$Relevancia

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.resultadodebusqueda.DespuesDeInsertarResultadoDeBusqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'resultadodebusqueda',
        N'TRIGGER', N'DespuesDeInsertarResultadoDeBusqueda_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarTamano_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarTamano_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarTamano_AfterInsert
   ON dbo.tamano
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$FechaInicio datetime2(0), 
               @new$NumeroTotalDeProductos int, 
               @new$CantidadTotalDeProductos int, 
               @new$Valor int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     TiendaID, 
                     FechaInicio, 
                     NumeroTotalDeProductos, 
                     CantidadTotalDeProductos, 
                     Valor
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$FechaInicio, 
                  @new$NumeroTotalDeProductos, 
                  @new$CantidadTotalDeProductos, 
                  @new$Valor

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente_P char(10)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Cliente_P = tienda.Cliente_P
                     FROM dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Cliente->Tienda->Tamano: '
                         + 
                        @Cliente_P
                         + 
                        N'->'
                         + 
                        CAST(@new$TiendaID AS varchar(50))
                         + 
                        N'->'
                         + 
                        CONVERT(varchar(20), @new$FechaInicio, 120)
                         + 
                        N': '
                         + 
                        CAST(@new$NumeroTotalDeProductos AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CantidadTotalDeProductos AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Valor AS varchar(50))

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente, dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID AND cliente.RIF = @Cliente_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$FechaInicio, 
                        @new$NumeroTotalDeProductos, 
                        @new$CantidadTotalDeProductos, 
                        @new$Valor

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tamano.DespuesDeInsertarTamano',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tamano',
        N'TRIGGER', N'DespuesDeInsertarTamano_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarTienda_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarTienda_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarTienda_AfterInsert
   ON dbo.tienda
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Buscable_P int, 
               @new$Cliente_P nchar(10), 
               @new$CalificableSeguible_P int, 
               @new$Interlocutor_P int, 
               @new$Dibujable_P int, 
               @new$TiendaID int, 
               @new$Abierto smallint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Buscable_P, 
                     Cliente_P, 
                     CalificableSeguible_P, 
                     Interlocutor_P, 
                     Dibujable_P, 
                     TiendaID, 
                     Abierto
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Buscable_P, 
                  @new$Cliente_P, 
                  @new$CalificableSeguible_P, 
                  @new$Interlocutor_P, 
                  @new$Dibujable_P, 
                  @new$TiendaID, 
                  @new$Abierto

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Cliente->Tienda: '
                         + 
                        CAST(@new$Cliente_P AS char(1))
                         + 
                        N'->'
                         + 
                        CAST(@new$TiendaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Buscable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CalificableSeguible_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Interlocutor_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Dibujable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Abierto AS varchar(50))

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente
                     WHERE cliente.RIF = @new$Cliente_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Buscable_P, 
                        @new$Cliente_P, 
                        @new$CalificableSeguible_P, 
                        @new$Interlocutor_P, 
                        @new$Dibujable_P, 
                        @new$TiendaID, 
                        @new$Abierto

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tienda.DespuesDeInsertarTienda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tienda',
        N'TRIGGER', N'DespuesDeInsertarTienda_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'DespuesDeInsertarTurno_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[DespuesDeInsertarTurno_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.DespuesDeInsertarTurno_AfterInsert
   ON dbo.turno
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$Dia nchar(9), 
               @new$HoraDeApertura time, 
               @new$HoraDeCierre time

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT TiendaID, Dia, HoraDeApertura, HoraDeCierre
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$TiendaID, @new$Dia, @new$HoraDeApertura, @new$HoraDeCierre

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Cliente_P char(10)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Cliente_P = tienda.Cliente_P
                     FROM dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Cliente->Tienda->HorarioDeTrabajo->Turno: '
                         + 
                        @Cliente_P
                         + 
                        N'->'
                         + 
                        CAST(@new$TiendaID AS varchar(50))
                         + 
                        N'->'
                         + 
                        @new$Dia
                         + 
                        N'->('
                         + 
                        CONVERT(varchar(8), @new$HoraDeApertura, 108)
                         + 
                        N','
                         + 
                        CONVERT(varchar(8), @new$HoraDeCierre, 108)
                         + 
                        N')'

                     SELECT @Rastreable_P = cliente.Rastreable_P
                     FROM dbo.cliente, dbo.tienda
                     WHERE tienda.TiendaID = @new$TiendaID AND cliente.RIF = @Cliente_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$TiendaID, @new$Dia, @new$HoraDeApertura, @new$HoraDeCierre

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.turno.DespuesDeInsertarTurno',
        N'SCHEMA', N'dbo',
        N'TABLE', N'turno',
        N'TRIGGER', N'DespuesDeInsertarTurno_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarAdministrador$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarAdministrador$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarAdministrador$IMPL  
   @a_Creador int,
   @a_Parroquia int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_CorreoElectronico varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Contrasena varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Estatus char(9),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Privilegios varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Apellido varchar(45),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @v_Usuario_P int, 
         @AdministradorID int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarUsuario$IMPL @a_Parroquia, @a_CorreoElectronico, @a_Contrasena, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Usuario_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value$2

      INSERT dbo.administrador(
         dbo.administrador.Rastreable_P, 
         dbo.administrador.Usuario_P, 
         dbo.administrador.Estatus, 
         dbo.administrador.Privilegios, 
         dbo.administrador.Nombre, 
         dbo.administrador.Apellido)
         VALUES (
            @v_Rastreable_P, 
            @v_Usuario_P, 
            @a_Estatus, 
            @a_Privilegios, 
            @a_Nombre, 
            @a_Apellido)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarAdministrador',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarAdministrador$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarBuscable$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarBuscable$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarBuscable$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.buscable
         DEFAULT VALUES

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarBuscable',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarBuscable$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarBusqueda$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarBusqueda$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarBusqueda$IMPL  
   @a_Creador int,
   @a_UsuarioID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Contenido varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Etiquetable_P int, 
         @v_Rastreable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarEtiquetable$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Etiquetable_P = @procedure_return_value$2

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.busqueda(
         dbo.busqueda.Rastreable_P, 
         dbo.busqueda.Etiquetable_P, 
         dbo.busqueda.Usuario, 
         dbo.busqueda.FechaHora, 
         dbo.busqueda.Contenido)
         VALUES (
            @v_Rastreable_P, 
            @v_Etiquetable_P, 
            @a_UsuarioID, 
            isnull(getdate(), getdate()), 
            @a_Contenido)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarBusqueda',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarBusqueda$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCalificableSeguible$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCalificableSeguible$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCalificableSeguible$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.calificableseguible(dbo.calificableseguible.CalificacionGeneral)
         VALUES (0)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCalificableSeguible',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCalificableSeguible$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCalificacionResena$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCalificacionResena$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCalificacionResena$IMPL  
   @a_Creador int,
   @a_CalificableSeguibleID int,
   @a_ConsumidorID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Calificacion char(4),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Resena varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Etiquetable_P int, 
         @v_Rastreable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarEtiquetable$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Etiquetable_P = @procedure_return_value$2

      INSERT dbo.calificacionresena(
         Rastreable_P, 
         Etiquetable_P, 
         CalificableSeguibleID, 
         ConsumidorID, 
         Calificacion, 
         Resena)
         VALUES (
            @v_Rastreable_P, 
            @v_Etiquetable_P, 
            @a_CalificableSeguibleID, 
            @a_ConsumidorID, 
            @a_Calificacion, 
            @a_Resena)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCalificacionResena',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCalificacionResena$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCategoria$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCategoria$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCategoria$IMPL  
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Nombre char(30),
   @a_HijoDeCategoria int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_Etiquetable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarEtiquetable$IMPL @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Etiquetable_P = @procedure_return_value

      SELECT @C = count_big(*)
      FROM dbo.categoria
      WHERE categoria.Nombre = @a_Nombre AND categoria.HijoDeCategoria = @a_HijoDeCategoria

      IF @C = 0
         INSERT dbo.categoria(dbo.categoria.Etiquetable_P, dbo.categoria.Nombre, dbo.categoria.HijoDeCategoria)
            VALUES (@v_Etiquetable_P, @a_Nombre, @a_HijoDeCategoria)
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCategoria',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCategoria$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCiudad$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCiudad$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCiudad$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_RegionGeografica_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_RegionGeografica_P = @procedure_return_value

      INSERT dbo.ciudad(dbo.ciudad.RegionGeografica_P)
         VALUES (@v_RegionGeografica_P)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCiudad',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCiudad$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCliente$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCliente$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCliente$IMPL  
   @a_Creador int,
   @a_Parroquia int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_CorreoElectronico varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Contrasena varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_RIF char(10),
   @a_Categoria int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Estatus char(9),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_NombreLegal varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_NombreComun varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Telefono char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Edificio_CC char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Piso char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Apartamento char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Local char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Casa char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Calle char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Sector_Urb_Barrio char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_PaginaWeb char(40),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Facebook char(80),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Twitter char(80),
   @returnvalue char(10)  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @v_Describible_P int, 
         @v_Usuario_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarUsuario$IMPL @a_Parroquia, @a_CorreoElectronico, @a_Contrasena, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Usuario_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value$2

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarDescribible$IMPL @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @v_Describible_P = @procedure_return_value$3

      INSERT dbo.cliente(
         Rastreable_P, 
         Describible_P, 
         Usuario_P, 
         RIF, 
         Categoria, 
         Estatus, 
         NombreLegal, 
         NombreComun, 
         Telefono, 
         Edificio_CC, 
         Piso, 
         Apartamento, 
         LocalNo, 
         Casa, 
         Calle, 
         Sector_Urb_Barrio, 
         PaginaWeb, 
         Facebook, 
         Twitter)
         VALUES (
            @v_Rastreable_P, 
            @v_Describible_P, 
            @v_Usuario_P, 
            @a_RIF, 
            @a_Categoria, 
            @a_Estatus, 
            @a_NombreLegal, 
            @a_NombreComun, 
            @a_Telefono, 
            @a_Edificio_CC, 
            @a_Piso, 
            @a_Apartamento, 
            @a_Local, 
            @a_Casa, 
            @a_Calle, 
            @a_Sector_Urb_Barrio, 
            @a_PaginaWeb, 
            @a_Facebook, 
            @a_Twitter)

      SET @returnvalue = @a_RIF

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCliente',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCliente$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCobrable$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCobrable$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCobrable$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.cobrable
         DEFAULT VALUES

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCobrable',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCobrable$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarConsumidor$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarConsumidor$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarConsumidor$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Apellido varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Estatus char(9),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Sexo char(6),
   @a_FechaDeNacimiento date,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_GrupoDeEdad char(15),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_GradoDeInstruccion char(16),
   @a_Parroquia int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_CorreoElectronico varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Contrasena varchar(45),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @v_Interlocutor_P int, 
         @v_UsuarioID int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarUsuario$IMPL @a_Parroquia, @a_CorreoElectronico, @a_Contrasena, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_UsuarioID = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value$2

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarInterlocutor$IMPL @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @v_Interlocutor_P = @procedure_return_value$3

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.consumidor(
         dbo.consumidor.Rastreable_P, 
         dbo.consumidor.Interlocutor_P, 
         dbo.consumidor.Usuario_P, 
         dbo.consumidor.Nombre, 
         dbo.consumidor.Apellido, 
         dbo.consumidor.Estatus, 
         dbo.consumidor.Sexo, 
         dbo.consumidor.FechaDeNacimiento, 
         dbo.consumidor.GrupoDeEdad, 
         dbo.consumidor.GradoDeInstruccion)
         VALUES (
            @v_Rastreable_P, 
            @v_Interlocutor_P, 
            @v_UsuarioID, 
            @a_Nombre, 
            @a_Apellido, 
            @a_Estatus, 
            @a_Sexo, 
            isnull(@a_FechaDeNacimiento, getdate()), 
            @a_GrupoDeEdad, 
            @a_GradoDeInstruccion)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarConsumidor',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarConsumidor$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarConsumidorObjetivo$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarConsumidorObjetivo$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarConsumidorObjetivo$IMPL  
   @a_PublicidadID int,
   @a_ConsumidorID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.consumidorobjetivo(PublicidadID, ConsumidorID)
         VALUES (@a_PublicidadID, @a_ConsumidorID)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarConsumidorObjetivo',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarConsumidorObjetivo$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarContadorDeExhibiciones$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarContadorDeExhibiciones$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarContadorDeExhibiciones$IMPL  
   @a_EstadisticasDeVisitasID int,
   @a_ContadorDeExhibiciones int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int

      SELECT @C = count_big(*)
      FROM dbo.contadordeexhibiciones
      WHERE contadordeexhibiciones.EstadisticasDeVisitasID = @a_EstadisticasDeVisitasID

      IF @C > 0
         UPDATE dbo.contadordeexhibiciones
            SET 
               FechaFin = getdate()
         WHERE contadordeexhibiciones.EstadisticasDeVisitasID = @a_EstadisticasDeVisitasID AND contadordeexhibiciones.FechaFin IS NULL

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.contadordeexhibiciones(EstadisticasDeVisitasID, FechaInicio, FechaFin, ContadorDeExhibiciones)
         VALUES (@a_EstadisticasDeVisitasID, isnull(getdate(), getdate()), NULL, @a_ContadorDeExhibiciones)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarContadorDeExhibiciones',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarContadorDeExhibiciones$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarContinente$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarContinente$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarContinente$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_RegionGeografica_P int

      SELECT @C = count_big(*)
      FROM dbo.continente, dbo.regiongeografica
      WHERE regiongeografica.Nombre = @a_Nombre AND regiongeografica.RegionGeograficaID = continente.RegionGeografica_P

      IF @C = 0
         BEGIN

            DECLARE
               @procedure_return_value int

            EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

            SELECT @v_RegionGeografica_P = @procedure_return_value

            INSERT dbo.continente(dbo.continente.RegionGeografica_P)
               VALUES (@v_RegionGeografica_P)

            SET @returnvalue = scope_identity()

            /*
            *   SSMA warning messages:
            *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
            */

            RETURN 

         END
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = NULL

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarContinente',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarContinente$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarCroquis$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarCroquis$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarCroquis$IMPL  
   @a_Creador int,
   @a_Dibujable int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      INSERT dbo.croquis(Rastreable_P, CroquisID, Area, Perimetro)
         VALUES (@v_Rastreable_P, @a_Dibujable, -1, -1)

      SET @returnvalue = @a_Dibujable

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarCroquis',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarCroquis$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarDescribible$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarDescribible$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarDescribible$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.describible
         DEFAULT VALUES

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarDescribible',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarDescribible$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarDescripcion$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarDescripcion$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarDescripcion$IMPL  
   @a_Creador int,
   @a_Describible int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Contenido varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Etiquetable_P int, 
         @v_Rastreable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarEtiquetable$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Etiquetable_P = @procedure_return_value$2

      INSERT dbo.descripcion(dbo.descripcion.Rastreable_P, dbo.descripcion.Etiquetable_P, dbo.descripcion.Describible, dbo.descripcion.Contenido)
         VALUES (@v_Rastreable_P, @v_Etiquetable_P, @a_Describible, @a_Contenido)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarDescripcion',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarDescripcion$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarDibujable$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarDibujable$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarDibujable$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.dibujable
         DEFAULT VALUES

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarDibujable',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarDibujable$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEstadisticas$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEstadisticas$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEstadisticas$IMPL  
   @a_Creador int,
   @a_RegionGeografica int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @EstaID int, 
         @Resultado int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      INSERT dbo.estadisticas(dbo.estadisticas.Rastreable_P, dbo.estadisticas.RegionGeografica)
         VALUES (@v_Rastreable_P, @a_RegionGeografica)

      /*
      *   SSMA warning messages:
      *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
      */

      SELECT @EstaID = scope_identity()

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarEstadisticasTemporales$IMPL 
         @EstaID, 
         0, 
         0, 
         0, 
         @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @Resultado = @procedure_return_value$2

      SET @returnvalue = @EstaID

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEstadisticas',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEstadisticas$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEstadisticasDeInfluencia$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEstadisticasDeInfluencia$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEstadisticasDeInfluencia$IMPL  
   @a_Creador int,
   @a_Palabra int,
   @a_RegionGeografica int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Estadisticas_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarEstadisticas$IMPL @a_Creador, @a_RegionGeografica, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Estadisticas_P = @procedure_return_value

      INSERT dbo.estadisticasdeinfluencia(
         dbo.estadisticasdeinfluencia.Estadisticas_P, 
         dbo.estadisticasdeinfluencia.Palabra, 
         dbo.estadisticasdeinfluencia.NumeroDeDescripciones, 
         dbo.estadisticasdeinfluencia.NumeroDeMensajes, 
         dbo.estadisticasdeinfluencia.NumeroDeCategorias, 
         dbo.estadisticasdeinfluencia.NumeroDeResenas, 
         dbo.estadisticasdeinfluencia.NumeroDePublicidades)
         VALUES (
            @v_Estadisticas_P, 
            @a_Palabra, 
            0, 
            0, 
            0, 
            0, 
            0)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEstadisticasDeInfluencia',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEstadisticasDeInfluencia$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEstadisticasDePopularidad$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEstadisticasDePopularidad$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEstadisticasDePopularidad$IMPL  
   @a_Creador int,
   @a_CalificableSeguible int,
   @a_RegionGeografica int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Estadisticas_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarEstadisticas$IMPL @a_Creador, @a_RegionGeografica, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Estadisticas_P = @procedure_return_value

      INSERT dbo.estadisticasdepopularidad(
         dbo.estadisticasdepopularidad.Estadisticas_P, 
         dbo.estadisticasdepopularidad.CalificableSeguible, 
         dbo.estadisticasdepopularidad.NumeroDeCalificaciones, 
         dbo.estadisticasdepopularidad.NumeroDeResenas, 
         dbo.estadisticasdepopularidad.NumeroDeSeguidores, 
         dbo.estadisticasdepopularidad.NumeroDeMenciones, 
         dbo.estadisticasdepopularidad.NumeroDeVendedores, 
         dbo.estadisticasdepopularidad.NumeroDeMensajes)
         VALUES (
            @v_Estadisticas_P, 
            @a_CalificableSeguible, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEstadisticasDePopularidad',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEstadisticasDePopularidad$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEstadisticasDeVisitas$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEstadisticasDeVisitas$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEstadisticasDeVisitas$IMPL  
   @a_Creador int,
   @a_Buscable int,
   @a_RegionGeografica int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Estadisticas_P int, 
         @EstaID int, 
         @Resultado int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarEstadisticas$IMPL @a_Creador, @a_RegionGeografica, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Estadisticas_P = @procedure_return_value

      INSERT dbo.estadisticasdevisitas(dbo.estadisticasdevisitas.Estadisticas_P, dbo.estadisticasdevisitas.Buscable)
         VALUES (@v_Estadisticas_P, @a_Buscable)

      /*
      *   SSMA warning messages:
      *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
      */

      SELECT @EstaID = scope_identity()

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarContadorDeExhibiciones$IMPL @EstaID, 0, @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @Resultado = @procedure_return_value$2

      SET @returnvalue = @EstaID

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEstadisticasDeVisitas',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEstadisticasDeVisitas$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEstadisticasTemporales$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEstadisticasTemporales$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEstadisticasTemporales$IMPL  
   @a_EstadisticasID int,
   @a_Contador int,
   @a_Ranking int,
   @a_Indice int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int

      SELECT @C = count_big(*)
      FROM dbo.estadisticastemporales
      WHERE estadisticastemporales.EstadisticasID = @a_EstadisticasID

      IF @C > 0
         UPDATE dbo.estadisticastemporales
            SET 
               FechaFin = getdate()
         WHERE estadisticastemporales.EstadisticasID = @a_EstadisticasID AND estadisticastemporales.FechaFin IS NULL

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.estadisticastemporales(
         EstadisticasID, 
         FechaInicio, 
         FechaFin, 
         Contador, 
         Ranking, 
         Indice)
         VALUES (
            @a_EstadisticasID, 
            isnull(getdate(), getdate()), 
            NULL, 
            @a_Contador, 
            @a_Ranking, 
            @a_Indice)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEstadisticasTemporales',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEstadisticasTemporales$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEstado$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEstado$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEstado$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @a_Pais int,
   @a_HusoHorarioNormal time,
   @a_HusoHorarioVerano time,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_RegionGeografica_P int

      SELECT @C = count_big(*)
      FROM dbo.estado, dbo.regiongeografica
      WHERE regiongeografica.Nombre = @a_Nombre AND estado.Pais = @a_Pais

      IF @C = 0
         BEGIN

            DECLARE
               @procedure_return_value int

            EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

            SELECT @v_RegionGeografica_P = @procedure_return_value

            INSERT dbo.estado(dbo.estado.RegionGeografica_P, dbo.estado.Pais, dbo.estado.HusoHorarioNormal, dbo.estado.HusoHorarioVerano)
               VALUES (@v_RegionGeografica_P, @a_Pais, @a_HusoHorarioNormal, @a_HusoHorarioVerano)

            SET @returnvalue = scope_identity()

            /*
            *   SSMA warning messages:
            *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
            */

            RETURN 

         END
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = NULL

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEstado',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEstado$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEtiqueta$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEtiqueta$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEtiqueta$IMPL  
   @a_EtiquetableID int,
   @a_PalabraID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.etiqueta(EtiquetableID, PalabraID)
         VALUES (@a_EtiquetableID, @a_PalabraID)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEtiqueta',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEtiqueta$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarEtiquetable$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarEtiquetable$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarEtiquetable$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.etiquetable
         DEFAULT VALUES

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarEtiquetable',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarEtiquetable$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarFactura$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarFactura$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarFactura$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Cliente char(10),
   @a_InicioDeMedicion datetime2(0),
   @a_FinDeMedicion datetime2(0),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.factura(
         dbo.factura.Rastreable_P, 
         dbo.factura.Cliente, 
         dbo.factura.InicioDeMedicion, 
         dbo.factura.FinDeMedicion, 
         dbo.factura.Subtotal, 
         dbo.factura.Impuestos, 
         dbo.factura.Total)
         VALUES (
            @v_Rastreable_P, 
            @a_Cliente, 
            isnull(@a_InicioDeMedicion, getdate()), 
            isnull(@a_FinDeMedicion, getdate()), 
            0, 
            0, 
            0)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarFactura',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarFactura$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarFoto$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarFoto$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarFoto$IMPL  
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_RutaDeFoto char(80),
   @a_Describible int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.foto(dbo.foto.RutaDeFoto, dbo.foto.Describible)
         VALUES (@a_RutaDeFoto, @a_Describible)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarFoto',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarFoto$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarGradoDeInstruccionObjetivo$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarGradoDeInstruccionObjetivo$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarGradoDeInstruccionObjetivo$IMPL  
   @a_PublicidadID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_GradoDeInstruccion char(16),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.gradodeinstruccionobjetivo(PublicidadID, GradoDeInstruccion)
         VALUES (@a_PublicidadID, @a_GradoDeInstruccion)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarGradoDeInstruccionObjetivo',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarGradoDeInstruccionObjetivo$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarGrupoDeEdadObjetivo$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarGrupoDeEdadObjetivo$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarGrupoDeEdadObjetivo$IMPL  
   @a_PublicidadID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_GrupoDeEdad char(15),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.grupodeedadobjetivo(PublicidadID, GrupoDeEdad)
         VALUES (@a_PublicidadID, @a_GrupoDeEdad)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarGrupoDeEdadObjetivo',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarGrupoDeEdadObjetivo$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarHorarioDeTrabajo$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarHorarioDeTrabajo$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarHorarioDeTrabajo$IMPL  
   @a_TiendaID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Dia char(9),
   @a_Laborable bit,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.horariodetrabajo(TiendaID, Dia, Laborable)
         VALUES (@a_TiendaID, @a_Dia, @a_Laborable)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarHorarioDeTrabajo',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarHorarioDeTrabajo$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarInterlocutor$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarInterlocutor$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarInterlocutor$IMPL  
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.interlocutor
         DEFAULT VALUES

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarInterlocutor',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarInterlocutor$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarInventario$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarInventario$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarInventario$IMPL  
   @a_Creador int,
   @a_TiendaID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Codigo char(15),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Descripcion varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Visibilidad char(16),
   @a_ProductoID int,
   @a_Precio decimal(10, 2),
   @a_Cantidad int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @v_Cobrable_P int, 
         @Resultado int, 
         @ResultadoSecundario int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarCobrable$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Cobrable_P = @procedure_return_value$2

      INSERT dbo.inventario(
         Rastreable_P, 
         Cobrable_P, 
         TiendaID, 
         Codigo, 
         Descripcion, 
         Visibilidad, 
         ProductoID)
         VALUES (
            @v_Rastreable_P, 
            @v_Cobrable_P, 
            @a_TiendaID, 
            @a_Codigo, 
            @a_Descripcion, 
            @a_Visibilidad, 
            @a_ProductoID)

      /*
      *   SSMA warning messages:
      *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
      */

      SELECT @Resultado = scope_identity()

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarPrecioCantidad$IMPL 
         @a_TiendaID, 
         @a_Codigo, 
         @a_Precio, 
         @a_Cantidad, 
         @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @ResultadoSecundario = @procedure_return_value$3

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarInventario',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarInventario$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarMensaje$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarMensaje$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarMensaje$IMPL  
   @a_Creador int,
   @a_Remitente int,
   @a_Destinatario int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Contenido varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @v_Etiquetable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarEtiquetable$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Etiquetable_P = @procedure_return_value$2

      INSERT dbo.mensaje(
         dbo.mensaje.Rastreable_P, 
         dbo.mensaje.Etiquetable_P, 
         dbo.mensaje.Remitente, 
         dbo.mensaje.Destinatario, 
         dbo.mensaje.Contenido)
         VALUES (
            @v_Rastreable_P, 
            @v_Etiquetable_P, 
            @a_Remitente, 
            @a_Destinatario, 
            @a_Contenido)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarMensaje',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarMensaje$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarMunicipio$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarMunicipio$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarMunicipio$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @a_Estado int,
   @a_Ciudad int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_RegionGeografica_P int

      SELECT @C = count_big(*)
      FROM dbo.municipio, dbo.regiongeografica
      WHERE regiongeografica.Nombre = @a_Nombre AND municipio.Estado = @a_Estado

      IF @C = 0
         BEGIN

            DECLARE
               @procedure_return_value int

            EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

            SELECT @v_RegionGeografica_P = @procedure_return_value

            INSERT dbo.municipio(dbo.municipio.RegionGeografica_P, dbo.municipio.Estado, dbo.municipio.Ciudad)
               VALUES (@v_RegionGeografica_P, @a_Estado, @a_Ciudad)

            SET @returnvalue = scope_identity()

            /*
            *   SSMA warning messages:
            *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
            */

            RETURN 

         END
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = NULL

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarMunicipio',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarMunicipio$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPais$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPais$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPais$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @a_Continente int,
   @a_Capital int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Idioma char(10),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_MonedaLocal varchar(45),
   @a_MonedaLocal_Dolar decimal(10, 2),
   @a_PIB decimal(15, 0),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_RegionGeografica_P int

      SELECT @C = count_big(*)
      FROM dbo.pais, dbo.regiongeografica
      WHERE regiongeografica.Nombre = @a_Nombre AND regiongeografica.RegionGeograficaID = pais.RegionGeografica_P

      IF @C = 0
         BEGIN

            DECLARE
               @procedure_return_value int

            EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

            SELECT @v_RegionGeografica_P = @procedure_return_value

            INSERT dbo.pais(
               dbo.pais.RegionGeografica_P, 
               dbo.pais.Continente, 
               dbo.pais.Capital, 
               dbo.pais.Idioma, 
               dbo.pais.MonedaLocal, 
               dbo.pais.MonedaLocal_Dolar, 
               dbo.pais.PIB)
               VALUES (
                  @v_RegionGeografica_P, 
                  @a_Continente, 
                  @a_Capital, 
                  @a_Idioma, 
                  @a_MonedaLocal, 
                  @a_MonedaLocal_Dolar, 
                  @a_PIB)

            SET @returnvalue = scope_identity()

            /*
            *   SSMA warning messages:
            *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
            */

            RETURN 

         END
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = NULL

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPais',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPais$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPaisSubcontinente$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPaisSubcontinente$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPaisSubcontinente$IMPL  
   @a_PaisID int,
   @a_SubcontinenteID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.paissubcontinente(SubcontinenteID, PaisID)
         VALUES (@a_PaisID, @a_SubcontinenteID)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPaisSubcontinente',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPaisSubcontinente$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPalabra$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPalabra$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPalabra$IMPL  
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Palabra_Frase char(15),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.palabra(dbo.palabra.Palabra_Frase)
         VALUES (@a_Palabra_Frase)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPalabra',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPalabra$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarParroquia$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarParroquia$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarParroquia$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @a_Municipio int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_CodigoPostal char(10),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_RegionGeografica_P int

      SELECT @C = count_big(*)
      FROM dbo.parroquia, dbo.regiongeografica
      WHERE regiongeografica.Nombre = @a_Nombre AND parroquia.Municipio = @a_Municipio

      IF @C = 0
         BEGIN

            DECLARE
               @procedure_return_value int

            EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

            SELECT @v_RegionGeografica_P = @procedure_return_value

            INSERT dbo.parroquia(dbo.parroquia.RegionGeografica_P, dbo.parroquia.CodigoPostal, dbo.parroquia.Municipio)
               VALUES (@v_RegionGeografica_P, @a_CodigoPostal, @a_Municipio)

            SET @returnvalue = scope_identity()

            /*
            *   SSMA warning messages:
            *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
            */

            RETURN 

         END
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = NULL

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarParroquia',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarParroquia$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPatrocinante$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPatrocinante$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPatrocinante$IMPL  
   @a_Creador int,
   @a_Parroquia int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_CorreoElectronico varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Contrasena varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_RIF char(10),
   @a_Categoria int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Estatus char(9),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_NombreLegal varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_NombreComun varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Telefono char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Edificio_CC char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Piso char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Apartamento char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Local char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Casa char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Calle char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Sector_Urb_Barrio char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_PaginaWeb char(40),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Facebook char(80),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Twitter char(80),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @v_Cliente_P char(10)

      DECLARE
         @procedure_return_value nvarchar(4000)

      EXECUTE dbo.InsertarCliente$IMPL 
         @a_Creador, 
         @a_Parroquia, 
         @a_CorreoElectronico, 
         @a_Contrasena, 
         @a_RIF, 
         @a_Categoria, 
         @a_Estatus, 
         @a_NombreLegal, 
         @a_NombreComun, 
         @a_Telefono, 
         @a_Edificio_CC, 
         @a_Piso, 
         @a_Apartamento, 
         @a_Local, 
         @a_Casa, 
         @a_Calle, 
         @a_Sector_Urb_Barrio, 
         @a_PaginaWeb, 
         @a_Facebook, 
         @a_Twitter, 
         @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Cliente_P = @procedure_return_value

      INSERT dbo.patrocinante(dbo.patrocinante.Cliente_P)
         VALUES (@v_Cliente_P)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPatrocinante',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPatrocinante$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPrecioCantidad$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPrecioCantidad$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPrecioCantidad$IMPL  
   @a_TiendaID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Codigo char(15),
   @a_Precio decimal(10, 2),
   @a_Cantidad int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int

      SELECT @C = count_big(*)
      FROM dbo.preciocantidad
      WHERE preciocantidad.TiendaID = @a_TiendaID AND preciocantidad.Codigo = @a_Codigo

      IF @C > 0
         UPDATE dbo.preciocantidad
            SET 
               FechaFin = getdate()
         WHERE 
            preciocantidad.TiendaID = @a_TiendaID AND 
            preciocantidad.Codigo = @a_Codigo AND 
            preciocantidad.FechaFin IS NULL

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.preciocantidad(
         TiendaID, 
         Codigo, 
         FechaInicio, 
         FechaFin, 
         Precio, 
         Cantidad)
         VALUES (
            @a_TiendaID, 
            @a_Codigo, 
            isnull(getdate(), getdate()), 
            NULL, 
            @a_Precio, 
            @a_Cantidad)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPrecioCantidad',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPrecioCantidad$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarProducto$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarProducto$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarProducto$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_TipoDeCodigo char(7),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Codigo char(15),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Estatus char(9),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Fabricante varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Modelo varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Categoria int,
   @a_DebutEnElMercado date,
   @a_Largo float(24),
   @a_Ancho float(24),
   @a_Alto float(24),
   @a_Peso float(24),
   @a_PaisDeOrigen int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int, 
         @v_Describible_P int, 
         @v_Buscable_P int, 
         @v_CalificableSeguible_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarDescribible$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Describible_P = @procedure_return_value$2

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarBuscable$IMPL @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @v_Buscable_P = @procedure_return_value$3

      DECLARE
         @procedure_return_value$4 int

      EXECUTE dbo.InsertarCalificableSeguible$IMPL @returnvalue = @procedure_return_value$4  OUTPUT

      SELECT @v_CalificableSeguible_P = @procedure_return_value$4

      INSERT dbo.producto(
         dbo.producto.Rastreable_P, 
         dbo.producto.Describible_P, 
         dbo.producto.Buscable_P, 
         dbo.producto.CalificableSeguible_P, 
         dbo.producto.TipoDeCodigo, 
         dbo.producto.Codigo, 
         dbo.producto.Estatus, 
         dbo.producto.Fabricante, 
         dbo.producto.Modelo, 
         dbo.producto.Nombre, 
         dbo.producto.Categoria, 
         dbo.producto.DebutEnElMercado, 
         dbo.producto.Largo, 
         dbo.producto.Ancho, 
         dbo.producto.Alto, 
         dbo.producto.Peso, 
         dbo.producto.PaisDeOrigen)
         VALUES (
            @v_Rastreable_P, 
            @v_Describible_P, 
            @v_Buscable_P, 
            @v_CalificableSeguible_P, 
            @a_TipoDeCodigo, 
            @a_Codigo, 
            @a_Estatus, 
            @a_Fabricante, 
            @a_Modelo, 
            @a_Nombre, 
            @a_Categoria, 
            @a_DebutEnElMercado, 
            @a_Largo, 
            @a_Ancho, 
            @a_Alto, 
            @a_Peso, 
            @a_PaisDeOrigen)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarProducto',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarProducto$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPublicidad$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPublicidad$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPublicidad$IMPL  
   @a_Creador int,
   @a_Patrocinante int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Buscable_P int, 
         @v_Describible_P int, 
         @v_Rastreable_P int, 
         @v_Etiquetable_P int, 
         @v_Cobrable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarBuscable$IMPL @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Buscable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarDescribible$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Describible_P = @procedure_return_value$2

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value$3

      DECLARE
         @procedure_return_value$4 int

      EXECUTE dbo.InsertarEtiquetable$IMPL @returnvalue = @procedure_return_value$4  OUTPUT

      SELECT @v_Etiquetable_P = @procedure_return_value$4

      DECLARE
         @procedure_return_value$5 int

      EXECUTE dbo.InsertarCobrable$IMPL @returnvalue = @procedure_return_value$5  OUTPUT

      SELECT @v_Cobrable_P = @procedure_return_value$5

      INSERT dbo.publicidad(
         dbo.publicidad.Buscable_P, 
         dbo.publicidad.Describible_P, 
         dbo.publicidad.Rastreable_P, 
         dbo.publicidad.Etiquetable_P, 
         dbo.publicidad.Cobrable_P, 
         dbo.publicidad.Patrocinante, 
         dbo.publicidad.TamanoDePoblacionObjetivo)
         VALUES (
            @v_Buscable_P, 
            @v_Describible_P, 
            @v_Rastreable_P, 
            @v_Etiquetable_P, 
            @v_Cobrable_P, 
            @a_Patrocinante, 
            NULL)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPublicidad',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPublicidad$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPunto$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPunto$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPunto$IMPL  
   @a_Latitud decimal(9, 6),
   @a_Longitud decimal(9, 6),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.punto(dbo.punto.Latitud, dbo.punto.Longitud)
         VALUES (@a_Latitud, @a_Longitud)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPunto',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPunto$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarPuntoDeCroquis$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarPuntoDeCroquis$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarPuntoDeCroquis$IMPL  
   @a_CroquisID int,
   @a_PuntoID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.puntodecroquis(CroquisID, PuntoID)
         VALUES (@a_CroquisID, @a_PuntoID)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarPuntoDeCroquis',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarPuntoDeCroquis$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarRastreable$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarRastreable$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarRastreable$IMPL  
   @a_Creador int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.rastreable(
         dbo.rastreable.FechaDeCreacion, 
         dbo.rastreable.CreadoPor, 
         dbo.rastreable.FechaDeModificacion, 
         dbo.rastreable.ModificadoPor, 
         dbo.rastreable.FechaDeEliminacion, 
         dbo.rastreable.EliminadoPor, 
         dbo.rastreable.FechaDeAcceso, 
         dbo.rastreable.AccesadoPor)
         VALUES (
            isnull(getdate(), getdate()), 
            @a_Creador, 
            isnull(getdate(), getdate()), 
            @a_Creador, 
            NULL, 
            NULL, 
            isnull(getdate(), getdate()), 
            @a_Creador)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarRastreable',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarRastreable$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarRegionGeografica$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarRegionGeografica$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarRegionGeografica$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_RegionGeografica_P int, 
         @v_Dibujable_P int, 
         @v_Rastreable_P int, 
         @Resultado int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarDibujable$IMPL @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Dibujable_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value$2

      INSERT dbo.regiongeografica(
         dbo.regiongeografica.Rastreable_P, 
         dbo.regiongeografica.Dibujable_P, 
         dbo.regiongeografica.Nombre, 
         dbo.regiongeografica.Poblacion, 
         dbo.regiongeografica.Consumidores_Poblacion, 
         dbo.regiongeografica.Tiendas_Poblacion, 
         dbo.regiongeografica.Tiendas_Consumidores)
         VALUES (
            @v_Rastreable_P, 
            @v_Dibujable_P, 
            @a_Nombre, 
            @a_Poblacion, 
            0, 
            0, 
            NULL)

      /*
      *   SSMA warning messages:
      *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
      */

      SELECT @v_RegionGeografica_P = scope_identity()

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarTiendasConsumidores$IMPL @v_RegionGeografica_P, 0, 0, @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @Resultado = @procedure_return_value$3

      SET @returnvalue = @v_RegionGeografica_P

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarRegionGeografica',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarRegionGeografica$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarRegionGeograficaObjetivo$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarRegionGeograficaObjetivo$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarRegionGeograficaObjetivo$IMPL  
   @a_PublicidadID int,
   @a_RegionGeograficaID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.regiongeograficaobjetivo(PublicidadID, RegionGeograficaID)
         VALUES (@a_PublicidadID, @a_RegionGeograficaID)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarRegionGeograficaObjetivo',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarRegionGeograficaObjetivo$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarRegistro$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarRegistro$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarRegistro$IMPL  
   @a_ActorActivo int,
   @a_ActorPasivo int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Accion char(13),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Parametros varchar(max),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_CodigoDeError char(10),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.registro(
         dbo.registro.FechaHora, 
         dbo.registro.ActorActivo, 
         dbo.registro.ActorPasivo, 
         dbo.registro.Accion, 
         dbo.registro.Parametros, 
         dbo.registro.CodigoDeError)
         VALUES (
            getdate(), 
            @a_ActorActivo, 
            @a_ActorPasivo, 
            @a_Accion, 
            @a_Parametros, 
            @a_CodigoDeError)

      SET @returnvalue = scope_identity()

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarRegistro',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarRegistro$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarRelacionDePalabras$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarRelacionDePalabras$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarRelacionDePalabras$IMPL  
   @a_Palabra1ID int,
   @a_Palabra2ID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.relaciondepalabras(Palabra1ID, Palabra2ID)
         VALUES (@a_Palabra1ID, @a_Palabra2ID)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarRelacionDePalabras',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarRelacionDePalabras$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarResultadoDeBusqueda$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarResultadoDeBusqueda$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarResultadoDeBusqueda$IMPL  
   @a_BusquedaID int,
   @a_BuscableID int,
   @a_Relevancia float(24),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      /*
      *   SSMA informational messages:
      *   M2SS0052: BOOLEAN literal was converted to SMALLINT literal
      */

      INSERT dbo.resultadodebusqueda(BusquedaID, BuscableID, Visitado, Relevancia)
         VALUES (@a_BusquedaID, @a_BuscableID, 0, @a_Relevancia)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarResultadoDeBusqueda',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarResultadoDeBusqueda$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarSeguidor$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarSeguidor$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarSeguidor$IMPL  
   @a_Creador int,
   @a_CalificableSeguibleID int,
   @a_ConsumidorID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_AvisarSi char(40),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Rastreable_P int

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRastreable$IMPL @a_Creador, @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Rastreable_P = @procedure_return_value

      INSERT dbo.seguidor(Rastreable_P, ConsumidorID, CalificableSeguibleID, AvisarSi)
         VALUES (@v_Rastreable_P, @a_ConsumidorID, @a_CalificableSeguibleID, @a_AvisarSi)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarSeguidor',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarSeguidor$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarServicioVendido$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarServicioVendido$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarServicioVendido$IMPL  
   @a_FacturaID int,
   @a_CobrableID int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.serviciovendido(FacturaID, CobrableID, Acumulado)
         VALUES (@a_FacturaID, @a_CobrableID, 0)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarServicioVendido',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarServicioVendido$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarSexoObjetivo$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarSexoObjetivo$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarSexoObjetivo$IMPL  
   @a_PublicidadID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Sexo char(6),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.sexoobjetivo(PublicidadID, Sexo)
         VALUES (@a_PublicidadID, @a_Sexo)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarSexoObjetivo',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarSexoObjetivo$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarSubcontinente$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarSubcontinente$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarSubcontinente$IMPL  
   @a_Creador int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Nombre varchar(45),
   @a_Poblacion bigint,
   @a_Continente int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @v_RegionGeografica_P int

      SELECT @C = count_big(*)
      FROM dbo.subcontinente, dbo.regiongeografica
      WHERE regiongeografica.Nombre = @a_Nombre AND subcontinente.Continente = @a_Continente

      IF @C = 0
         BEGIN

            DECLARE
               @procedure_return_value int

            EXECUTE dbo.InsertarRegionGeografica$IMPL @a_Creador, @a_Nombre, @a_Poblacion, @returnvalue = @procedure_return_value  OUTPUT

            SELECT @v_RegionGeografica_P = @procedure_return_value

            INSERT dbo.subcontinente(dbo.subcontinente.RegionGeografica_P, dbo.subcontinente.Continente)
               VALUES (@v_RegionGeografica_P, @a_Continente)

            SET @returnvalue = scope_identity()

            /*
            *   SSMA warning messages:
            *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
            */

            RETURN 

         END
      ELSE 
         BEGIN

            SET @returnvalue = 0

            /*
            *   SSMA informational messages:
            *   M2SS0052: BOOLEAN literal was converted to INT literal
            */

            RETURN 

         END

      SET @returnvalue = NULL

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarSubcontinente',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarSubcontinente$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarTamano$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarTamano$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarTamano$IMPL  
   @a_TiendaID int,
   @a_NumeroTotalDeProductos int,
   @a_CantidadTotalDeProductos int,
   @a_Valor int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int

      SELECT @C = count_big(*)
      FROM dbo.tamano
      WHERE tamano.TiendaID = @a_TiendaID

      IF @C > 0
         UPDATE dbo.tamano
            SET 
               FechaFin = getdate()
         WHERE tamano.TiendaID = @a_TiendaID AND tamano.FechaFin IS NULL

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.tamano(
         TiendaID, 
         FechaInicio, 
         FechaFin, 
         NumeroTotalDeProductos, 
         CantidadTotalDeProductos, 
         Valor)
         VALUES (
            @a_TiendaID, 
            isnull(getdate(), getdate()), 
            NULL, 
            @a_NumeroTotalDeProductos, 
            @a_CantidadTotalDeProductos, 
            @a_Valor)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarTamano',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarTamano$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarTienda$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarTienda$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarTienda$IMPL  
   @a_Creador int,
   @a_Parroquia int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_CorreoElectronico varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Contrasena varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_RIF char(10),
   @a_Categoria int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Estatus char(9),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_NombreLegal varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_NombreComun varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Telefono char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Edificio_CC char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Piso char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Apartamento char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Local char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Casa char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Calle char(12),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Sector_Urb_Barrio char(20),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_PaginaWeb char(40),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Facebook char(80),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Twitter char(80),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @v_Buscable_P int, 
         @v_CalificableSeguible_P int, 
         @v_Interlocutor_P int, 
         @v_Dibujable_P int, 
         @Resultado int, 
         @T int

      DECLARE
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @v_Cliente_P char(10)

      DECLARE
         @procedure_return_value nvarchar(4000)

      EXECUTE dbo.InsertarCliente$IMPL 
         @a_Creador, 
         @a_Parroquia, 
         @a_CorreoElectronico, 
         @a_Contrasena, 
         @a_RIF, 
         @a_Categoria, 
         @a_Estatus, 
         @a_NombreLegal, 
         @a_NombreComun, 
         @a_Telefono, 
         @a_Edificio_CC, 
         @a_Piso, 
         @a_Apartamento, 
         @a_Local, 
         @a_Casa, 
         @a_Calle, 
         @a_Sector_Urb_Barrio, 
         @a_PaginaWeb, 
         @a_Facebook, 
         @a_Twitter, 
         @returnvalue = @procedure_return_value  OUTPUT

      SELECT @v_Cliente_P = @procedure_return_value

      DECLARE
         @procedure_return_value$2 int

      EXECUTE dbo.InsertarBuscable$IMPL @returnvalue = @procedure_return_value$2  OUTPUT

      SELECT @v_Buscable_P = @procedure_return_value$2

      DECLARE
         @procedure_return_value$3 int

      EXECUTE dbo.InsertarCalificableSeguible$IMPL @returnvalue = @procedure_return_value$3  OUTPUT

      SELECT @v_CalificableSeguible_P = @procedure_return_value$3

      DECLARE
         @procedure_return_value$4 int

      EXECUTE dbo.InsertarInterlocutor$IMPL @returnvalue = @procedure_return_value$4  OUTPUT

      SELECT @v_Interlocutor_P = @procedure_return_value$4

      DECLARE
         @procedure_return_value$5 int

      EXECUTE dbo.InsertarDibujable$IMPL @returnvalue = @procedure_return_value$5  OUTPUT

      SELECT @v_Dibujable_P = @procedure_return_value$5

      /*
      *   SSMA informational messages:
      *   M2SS0052: BOOLEAN literal was converted to SMALLINT literal
      */

      INSERT dbo.tienda(
         dbo.tienda.Buscable_P, 
         dbo.tienda.Cliente_P, 
         dbo.tienda.CalificableSeguible_P, 
         dbo.tienda.Interlocutor_P, 
         dbo.tienda.Dibujable_P, 
         dbo.tienda.Abierto)
         VALUES (
            @v_Buscable_P, 
            @v_Cliente_P, 
            @v_CalificableSeguible_P, 
            @v_Interlocutor_P, 
            @v_Dibujable_P, 
            0)

      /*
      *   SSMA warning messages:
      *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
      */

      SELECT @T = scope_identity()

      DECLARE
         @procedure_return_value$6 int

      EXECUTE dbo.InsertarTamano$IMPL 
         @T, 
         0, 
         0, 
         0, 
         @returnvalue = @procedure_return_value$6  OUTPUT

      SELECT @Resultado = @procedure_return_value$6

      SET @returnvalue = @T

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarTienda',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarTienda$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarTiendasConsumidores$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarTiendasConsumidores$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarTiendasConsumidores$IMPL  
   @a_RegionGeograficaID int,
   @a_NumeroDeConsumidores int,
   @a_NumeroDeTiendas int,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @C int, 
         @Pob int

      SELECT @C = count_big(*)
      FROM dbo.tiendasconsumidores
      WHERE tiendasconsumidores.RegionGeograficaID = @a_RegionGeograficaID

      IF @C > 0
         UPDATE dbo.tiendasconsumidores
            SET 
               FechaFin = getdate()
         WHERE tiendasconsumidores.RegionGeograficaID = @a_RegionGeograficaID AND tiendasconsumidores.FechaFin IS NULL

      /*
      *   SSMA informational messages:
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.tiendasconsumidores(
         RegionGeograficaID, 
         FechaInicio, 
         FechaFin, 
         NumeroDeConsumidores, 
         NumeroDeTiendas)
         VALUES (
            @a_RegionGeograficaID, 
            isnull(getdate(), getdate()), 
            NULL, 
            @a_NumeroDeConsumidores, 
            @a_NumeroDeTiendas)

      SELECT @Pob = regiongeografica.Poblacion
      FROM dbo.regiongeografica
      WHERE regiongeografica.RegionGeograficaID = @a_RegionGeograficaID

      UPDATE dbo.regiongeografica
         SET 
            Consumidores_Poblacion = 
               CASE 
                  WHEN (@Pob > 0) THEN @a_NumeroDeConsumidores * 1.0 / @Pob
                  ELSE 0
               END, 
            Tiendas_Poblacion = 
               CASE 
                  WHEN (@Pob > 0) THEN @a_NumeroDeTiendas * 1.0 / @Pob
                  ELSE 0
               END
      WHERE regiongeografica.RegionGeograficaID = @a_RegionGeograficaID

      UPDATE dbo.regiongeografica
         SET 
            Tiendas_Consumidores = 
               CASE 
                  WHEN (@a_NumeroDeConsumidores > 0) THEN @a_NumeroDeTiendas * 1.0 / @a_NumeroDeConsumidores
                  ELSE NULL
               END
      WHERE regiongeografica.RegionGeograficaID = @a_RegionGeograficaID

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarTiendasConsumidores',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarTiendasConsumidores$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarTurno$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarTurno$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarTurno$IMPL  
   @a_TiendaID int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
   */

   @a_Dia char(9),
   @a_HoraDeApertura time,
   @a_HoraDeCierre time,
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      INSERT dbo.turno(TiendaID, Dia, HoraDeApertura, HoraDeCierre)
         VALUES (@a_TiendaID, @a_Dia, @a_HoraDeApertura, @a_HoraDeCierre)

      SET @returnvalue = 1

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarTurno',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarTurno$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'InsertarUsuario$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[InsertarUsuario$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.InsertarUsuario$IMPL  
   @a_Parroquia int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_CorreoElectronico varchar(45),
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR according to character set mapping for latin1 character set
   */

   @a_Contrasena varchar(45),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @AccesoID int

      INSERT dbo.usuario(dbo.usuario.Parroquia)
         VALUES (@a_Parroquia)

      /*
      *   SSMA warning messages:
      *   M2SS0240: The behaviour of Standard Function SCOPE_IDENTITY may not be same as in MySql
      */

      SELECT @AccesoID = scope_identity()

      /*
      *   SSMA informational messages:
      *   M2SS0052: BOOLEAN literal was converted to SMALLINT literal
      *   M2SS0231: Zero-date, zero-in-date and invalid dates to not null columns has been replaced with GetDate()/Constant date
      */

      INSERT dbo.acceso(
         AccesoID, 
         Conectado, 
         CorreoElectronico, 
         Contrasena, 
         FechaDeRegistro, 
         FechaDeUltimoAcceso, 
         DuracionDeUltimoAcceso, 
         NumeroTotalDeAccesos, 
         TiempoTotalDeAccesos, 
         TiempoPromedioPorAcceso)
         VALUES (
            @AccesoID, 
            0, 
            @a_CorreoElectronico, 
            @a_Contrasena, 
            isnull(getdate(), getdate()), 
            NULL, 
            m2ss.maketime(0, 0, 0), 
            0, 
            m2ss.maketime(0, 0, 0), 
            m2ss.maketime(0, 0, 0))

      SET @returnvalue = @AccesoID

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.InsertarUsuario',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'InsertarUsuario$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_administrador'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_administrador]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_administrador
   ON dbo.administrador
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Usuario_P int, 
               @old$Nombre nvarchar(45), 
               @old$Apellido nvarchar(45)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Usuario_P, 
                     Nombre, 
                     Apellido
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Usuario_P, 
                  @old$Nombre, 
                  @old$Apellido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Administrador: ' + @old$Nombre + N' ' + @old$Apellido

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.usuario
                     WHERE usuario.UsuarioID = @old$Usuario_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.administrador
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Usuario_P, 
                        @old$Nombre, 
                        @old$Apellido

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.administrador.AntesDeEliminarAdministrador',
        N'SCHEMA', N'dbo',
        N'TABLE', N'administrador',
        N'TRIGGER', N'InsteadOfDeleteOn_administrador'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_buscable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_buscable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_buscable
   ON dbo.buscable
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$BuscableID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, BuscableID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$BuscableID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.estadisticasdevisitas
                     WHERE estadisticasdevisitas.Buscable = @old$BuscableID

                     DELETE 
                     FROM dbo.resultadodebusqueda
                     WHERE resultadodebusqueda.BuscableID = @old$BuscableID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.buscable
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$BuscableID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.buscable.AntesDeEliminarBuscable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'buscable',
        N'TRIGGER', N'InsteadOfDeleteOn_buscable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_busqueda'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_busqueda]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_busqueda
   ON dbo.busqueda
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Etiquetable_P int, 
               @old$BusquedaID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, Etiquetable_P, BusquedaID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$Etiquetable_P, @old$BusquedaID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Busqueda: ' + CAST(@old$BusquedaID AS varchar(50))

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.etiquetable
                     WHERE etiquetable.EtiquetableID = @old$Etiquetable_P

                     DELETE 
                     FROM dbo.resultadodebusqueda
                     WHERE resultadodebusqueda.BusquedaID = @old$BusquedaID

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.busqueda
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$Etiquetable_P, @old$BusquedaID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.busqueda.AntesDeEliminarBusqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'busqueda',
        N'TRIGGER', N'InsteadOfDeleteOn_busqueda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_calificableseguible'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_calificableseguible]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_calificableseguible
   ON dbo.calificableseguible
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$CalificableSeguibleID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, CalificableSeguibleID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$CalificableSeguibleID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.calificacionresena
                     WHERE calificacionresena.CalificableSeguibleID = @old$CalificableSeguibleID

                     DELETE 
                     FROM dbo.seguidor
                     WHERE seguidor.CalificableSeguibleID = @old$CalificableSeguibleID

                     DELETE 
                     FROM dbo.estadisticasdepopularidad
                     WHERE estadisticasdepopularidad.CalificableSeguible = @old$CalificableSeguibleID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.calificableseguible
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$CalificableSeguibleID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificableseguible.t_CalificableSeguibleEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificableseguible',
        N'TRIGGER', N'InsteadOfDeleteOn_calificableseguible'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_calificacionresena'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_calificacionresena]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_calificacionresena
   ON dbo.calificacionresena
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Etiquetable_P int, 
               @old$CalificableSeguibleID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, Etiquetable_P, CalificableSeguibleID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$Etiquetable_P, @old$CalificableSeguibleID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Denominacion char(45)

                     DECLARE
                        @C int, 
                        @D int, 
                        @bobo int

                     SELECT @C = count_big(*)
                     FROM dbo.producto
                     WHERE producto.CalificableSeguible_P = @old$CalificableSeguibleID

                     SELECT @D = count_big(*)
                     FROM dbo.tienda
                     WHERE tienda.CalificableSeguible_P = @old$CalificableSeguibleID

                     IF @C = 1
                        BEGIN

                           SELECT @Denominacion = producto.Nombre
                           FROM dbo.producto
                           WHERE producto.CalificableSeguible_P = @old$CalificableSeguibleID

                           DECLARE
                              @procedure_return_value int

                           DECLARE
                              @temp nvarchar(4000)

                           SET @temp = N'CalificacionResena: ' + @Denominacion + N' (producto)'

                           EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END
                     ELSE 
                        BEGIN
                           IF @D = 1
                              BEGIN

                                 SELECT @Denominacion = cliente.NombreLegal
                                 FROM dbo.cliente, dbo.tienda
                                 WHERE tienda.CalificableSeguible_P = @old$CalificableSeguibleID AND cliente.RIF = tienda.Cliente_P

                                 DECLARE
                                    @procedure_return_value$2 int

                                 DECLARE
                                    @temp$2 nvarchar(4000)

                                 SET @temp$2 = N'CalificacionResena: ' + @Denominacion + N' (tienda)'

                                 EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp$2, @returnvalue = @procedure_return_value$2  OUTPUT

                                 SELECT @bobo = @procedure_return_value$2

                              END
                        END

                     DELETE 
                     FROM dbo.etiquetable
                     WHERE etiquetable.EtiquetableID = @old$Etiquetable_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.calificacionresena
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$Etiquetable_P, @old$CalificableSeguibleID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificacionresena.t_CalificacionResenaEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificacionresena',
        N'TRIGGER', N'InsteadOfDeleteOn_calificacionresena'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_categoria'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_categoria]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_categoria
   ON dbo.categoria
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Etiquetable_P int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Etiquetable_P
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Etiquetable_P

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.etiquetable
                     WHERE etiquetable.EtiquetableID = @old$Etiquetable_P
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.categoria
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Etiquetable_P

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.categoria.t_CategoriaEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'categoria',
        N'TRIGGER', N'InsteadOfDeleteOn_categoria'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_ciudad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_ciudad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_ciudad
   ON dbo.ciudad
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int, 
               @old$CiudadID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P, CiudadID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$CiudadID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     UPDATE dbo.municipio
                        SET 
                           Ciudad = NULL
                     WHERE municipio.Ciudad = @old$CiudadID

                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.ciudad
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$CiudadID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.ciudad.t_CiudadEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'ciudad',
        N'TRIGGER', N'InsteadOfDeleteOn_ciudad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_cliente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_cliente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_cliente
   ON dbo.cliente
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Describible_P int, 
               @old$Usuario_P int, 
               @old$RIF nchar(10), 
               @old$NombreLegal nvarchar(45)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Describible_P, 
                     Usuario_P, 
                     RIF, 
                     NombreLegal
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Describible_P, 
                  @old$Usuario_P, 
                  @old$RIF, 
                  @old$NombreLegal

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Cliente: ' + @old$RIF + N', ' + @old$NombreLegal

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.usuario
                     WHERE usuario.UsuarioID = @old$Usuario_P

                     DELETE 
                     FROM dbo.describible
                     WHERE describible.DescribibleID = @old$Describible_P

                     DELETE 
                     FROM dbo.factura
                     WHERE factura.Cliente = @old$RIF

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.cliente
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Describible_P, 
                        @old$Usuario_P, 
                        @old$RIF, 
                        @old$NombreLegal

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cliente.AnteDeEliminarCliente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cliente',
        N'TRIGGER', N'InsteadOfDeleteOn_cliente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_cobrable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_cobrable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_cobrable
   ON dbo.cobrable
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$CobrableID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, CobrableID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$CobrableID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.serviciovendido
                     WHERE serviciovendido.CobrableID = @old$CobrableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.cobrable
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$CobrableID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cobrable.t_CobrableEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cobrable',
        N'TRIGGER', N'InsteadOfDeleteOn_cobrable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_consumidor'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_consumidor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_consumidor
   ON dbo.consumidor
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Interlocutor_P int, 
               @old$Usuario_P int, 
               @old$ConsumidorID int, 
               @old$Nombre nvarchar(45), 
               @old$Apellido nvarchar(45)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Interlocutor_P, 
                     Usuario_P, 
                     ConsumidorID, 
                     Nombre, 
                     Apellido
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Interlocutor_P, 
                  @old$Usuario_P, 
                  @old$ConsumidorID, 
                  @old$Nombre, 
                  @old$Apellido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Consumidor: ' + @old$Nombre + N' ' + @old$Apellido

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.usuario
                     WHERE usuario.UsuarioID = @old$Usuario_P

                     DELETE 
                     FROM dbo.interlocutor
                     WHERE interlocutor.InterlocutorID = @old$Interlocutor_P

                     DELETE 
                     FROM dbo.seguidor
                     WHERE seguidor.ConsumidorID = @old$ConsumidorID

                     DELETE 
                     FROM dbo.calificacionresena
                     WHERE calificacionresena.ConsumidorID = @old$ConsumidorID

                     DELETE 
                     FROM dbo.consumidorobjetivo
                     WHERE consumidorobjetivo.ConsumidorID = @old$ConsumidorID

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.consumidor
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Interlocutor_P, 
                        @old$Usuario_P, 
                        @old$ConsumidorID, 
                        @old$Nombre, 
                        @old$Apellido

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidor.AntesDeEliminarConsumidor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidor',
        N'TRIGGER', N'InsteadOfDeleteOn_consumidor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_continente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_continente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_continente
   ON dbo.continente
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int, 
               @old$ContinenteID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P, ContinenteID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$ContinenteID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.subcontinente
                     WHERE subcontinente.Continente = @old$ContinenteID

                     DELETE 
                     FROM dbo.pais
                     WHERE pais.Continente = @old$ContinenteID

                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.continente
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$ContinenteID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.continente.t_ContinenteEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'continente',
        N'TRIGGER', N'InsteadOfDeleteOn_continente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_croquis'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_croquis]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_croquis
   ON dbo.croquis
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$CroquisID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, CroquisID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$CroquisID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Croquis: ' + CAST(@old$CroquisID AS varchar(50))

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.puntodecroquis
                     WHERE puntodecroquis.CroquisID = @old$CroquisID

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.croquis
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$CroquisID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.croquis.t_CroquisEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'croquis',
        N'TRIGGER', N'InsteadOfDeleteOn_croquis'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_describible'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_describible]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_describible
   ON dbo.describible
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$DescribibleID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, DescribibleID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$DescribibleID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.descripcion
                     WHERE descripcion.Describible = @old$DescribibleID

                     DELETE 
                     FROM dbo.foto
                     WHERE foto.Describible = @old$DescribibleID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.describible
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$DescribibleID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.describible.t_DescribibleEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'describible',
        N'TRIGGER', N'InsteadOfDeleteOn_describible'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_descripcion'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_descripcion]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_descripcion
   ON dbo.descripcion
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Etiquetable_P int, 
               @old$Describible int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, Etiquetable_P, Describible
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$Etiquetable_P, @old$Describible

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Descripcion: de ' + CAST(@old$Describible AS varchar(50))

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.etiquetable
                     WHERE etiquetable.EtiquetableID = @old$Etiquetable_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.descripcion
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$Etiquetable_P, @old$Describible

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.descripcion.t_DescripcionEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'descripcion',
        N'TRIGGER', N'InsteadOfDeleteOn_descripcion'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_dibujable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_dibujable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_dibujable
   ON dbo.dibujable
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$DibujableID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, DibujableID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$DibujableID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.croquis
                     WHERE croquis.CroquisID = @old$DibujableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.dibujable
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$DibujableID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.dibujable.t_DibujableEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'dibujable',
        N'TRIGGER', N'InsteadOfDeleteOn_dibujable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_estadisticas'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_estadisticas]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_estadisticas
   ON dbo.estadisticas
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$EstadisticasID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, EstadisticasID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$EstadisticasID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Estadisticas: ' + CAST(@old$EstadisticasID AS varchar(50))

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.estadisticastemporales
                     WHERE estadisticastemporales.EstadisticasID = @old$EstadisticasID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.estadisticas
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$EstadisticasID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticas.AntesDeEliminarEstadisticas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticas',
        N'TRIGGER', N'InsteadOfDeleteOn_estadisticas'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_estadisticasdeinfluencia'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_estadisticasdeinfluencia]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_estadisticasdeinfluencia
   ON dbo.estadisticasdeinfluencia
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Estadisticas_P int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Estadisticas_P
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Estadisticas_P

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @old$Estadisticas_P
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.estadisticasdeinfluencia
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Estadisticas_P

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdeinfluencia.t_EstadisticasDeInfluenciaEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdeinfluencia',
        N'TRIGGER', N'InsteadOfDeleteOn_estadisticasdeinfluencia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_estadisticasdepopularidad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_estadisticasdepopularidad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_estadisticasdepopularidad
   ON dbo.estadisticasdepopularidad
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Estadisticas_P int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Estadisticas_P
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Estadisticas_P

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @old$Estadisticas_P
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.estadisticasdepopularidad
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Estadisticas_P

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdepopularidad.t_EstadisticasDePopularidadEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdepopularidad',
        N'TRIGGER', N'InsteadOfDeleteOn_estadisticasdepopularidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_estadisticasdevisitas'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_estadisticasdevisitas]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_estadisticasdevisitas
   ON dbo.estadisticasdevisitas
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Estadisticas_P int, 
               @old$EstadisticasDeVisitasID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Estadisticas_P, EstadisticasDeVisitasID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Estadisticas_P, @old$EstadisticasDeVisitasID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.contadordeexhibiciones
                     WHERE contadordeexhibiciones.EstadisticasDeVisitasID = @old$EstadisticasDeVisitasID

                     DELETE 
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @old$Estadisticas_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.estadisticasdevisitas
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Estadisticas_P, @old$EstadisticasDeVisitasID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdevisitas.AntesDeEliminarEstadisticasDeVisitas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdevisitas',
        N'TRIGGER', N'InsteadOfDeleteOn_estadisticasdevisitas'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_estado'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_estado]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_estado
   ON dbo.estado
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int, 
               @old$EstadoID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P, EstadoID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$EstadoID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.municipio
                     WHERE municipio.Estado = @old$EstadoID

                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.estado
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$EstadoID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estado.t_EstadoEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estado',
        N'TRIGGER', N'InsteadOfDeleteOn_estado'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_etiquetable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_etiquetable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_etiquetable
   ON dbo.etiquetable
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$EtiquetableID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, EtiquetableID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$EtiquetableID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.etiqueta
                     WHERE etiqueta.EtiquetableID = @old$EtiquetableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.etiquetable
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$EtiquetableID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.etiquetable.t_EtiquetableEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'etiquetable',
        N'TRIGGER', N'InsteadOfDeleteOn_etiquetable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_factura'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_factura]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_factura
   ON dbo.factura
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$FacturaID int, 
               @old$Cliente nchar(10)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, FacturaID, Cliente
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$FacturaID, @old$Cliente

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Factura: ' + CAST(@old$FacturaID AS varchar(50)) + N' de ' + @old$Cliente

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.serviciovendido
                     WHERE serviciovendido.FacturaID = @old$FacturaID

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.factura
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$FacturaID, @old$Cliente

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.factura.t_FacturaEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'factura',
        N'TRIGGER', N'InsteadOfDeleteOn_factura'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_horariodetrabajo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_horariodetrabajo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_horariodetrabajo
   ON dbo.horariodetrabajo
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$TiendaID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, TiendaID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$TiendaID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.turno
                     WHERE turno.TiendaID = @old$TiendaID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.horariodetrabajo
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$TiendaID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.horariodetrabajo.AntesDeEliminarHorarioDeTrabajo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'horariodetrabajo',
        N'TRIGGER', N'InsteadOfDeleteOn_horariodetrabajo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_interlocutor'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_interlocutor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_interlocutor
   ON dbo.interlocutor
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$InterlocutorID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, InterlocutorID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$InterlocutorID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.mensaje
                     WHERE mensaje.Remitente = @old$InterlocutorID OR mensaje.Destinatario = @old$InterlocutorID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.interlocutor
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$InterlocutorID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.interlocutor.t_InterlocutorEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'interlocutor',
        N'TRIGGER', N'InsteadOfDeleteOn_interlocutor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_inventario'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_inventario]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_inventario
   ON dbo.inventario
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Cobrable_P int, 
               @old$TiendaID int, 
               @old$Codigo nchar(15), 
               @old$Descripcion nvarchar(45)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Cobrable_P, 
                     TiendaID, 
                     Codigo, 
                     Descripcion
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Cobrable_P, 
                  @old$TiendaID, 
                  @old$Codigo, 
                  @old$Descripcion

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Denominacion char(45), 
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                        */

                        @Tienda char(45)

                     DECLARE
                        @bobo int

                     SELECT @Tienda = cliente.NombreLegal
                     FROM dbo.cliente, dbo.tienda
                     WHERE tienda.TiendaID = @old$TiendaID AND cliente.RIF = tienda.Cliente_P

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Inventario: ' + @old$Descripcion + N' (producto) de ' + @Tienda + N' (tienda)'

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.preciocantidad
                     WHERE preciocantidad.TiendaID = @old$TiendaID AND preciocantidad.Codigo = @old$Codigo

                     DELETE 
                     FROM dbo.cobrable
                     WHERE cobrable.CobrableID = @old$Cobrable_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.inventario
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Cobrable_P, 
                        @old$TiendaID, 
                        @old$Codigo, 
                        @old$Descripcion

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.inventario.t_InventarioEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'inventario',
        N'TRIGGER', N'InsteadOfDeleteOn_inventario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_mensaje'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_mensaje]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_mensaje
   ON dbo.mensaje
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Etiquetable_P int, 
               @old$Remitente int, 
               @old$Destinatario int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Etiquetable_P, 
                     Remitente, 
                     Destinatario
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$Remitente, 
                  @old$Destinatario

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Mensaje: ' + N'de ' + CAST(@old$Remitente AS varchar(50)) + N' para ' + CAST(@old$Destinatario AS varchar(50))

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.etiquetable
                     WHERE etiquetable.EtiquetableID = @old$Etiquetable_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.mensaje
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$Remitente, 
                        @old$Destinatario

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.mensaje.t_MensajeEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'mensaje',
        N'TRIGGER', N'InsteadOfDeleteOn_mensaje'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_municipio'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_municipio]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_municipio
   ON dbo.municipio
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int, 
               @old$MunicipioID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P, MunicipioID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$MunicipioID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.parroquia
                     WHERE parroquia.Municipio = @old$MunicipioID

                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.municipio
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$MunicipioID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.municipio.t_MunicipioEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'municipio',
        N'TRIGGER', N'InsteadOfDeleteOn_municipio'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_pais'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_pais]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_pais
   ON dbo.pais
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int, 
               @old$PaisID int, 
               @old$Capital int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P, PaisID, Capital
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$PaisID, @old$Capital

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.estado
                     WHERE estado.Pais = @old$PaisID

                     DELETE 
                     FROM dbo.ciudad
                     WHERE ciudad.CiudadID = @old$Capital

                     DELETE 
                     FROM dbo.paissubcontinente
                     WHERE paissubcontinente.PaisID = @old$PaisID

                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.pais
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$PaisID, @old$Capital

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.pais.t_PaisEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'pais',
        N'TRIGGER', N'InsteadOfDeleteOn_pais'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_palabra'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_palabra]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_palabra
   ON dbo.palabra
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$PalabraID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, PalabraID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$PalabraID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.relaciondepalabras
                     WHERE relaciondepalabras.Palabra1ID = @old$PalabraID OR relaciondepalabras.Palabra2ID = @old$PalabraID

                     DELETE 
                     FROM dbo.estadisticasdeinfluencia
                     WHERE estadisticasdeinfluencia.Palabra = @old$PalabraID

                     DELETE 
                     FROM dbo.etiqueta
                     WHERE etiqueta.PalabraID = @old$PalabraID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.palabra
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$PalabraID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.palabra.t_PalabraEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'palabra',
        N'TRIGGER', N'InsteadOfDeleteOn_palabra'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_parroquia'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_parroquia]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_parroquia
   ON dbo.parroquia
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.parroquia
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.parroquia.t_ParroquiaEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'parroquia',
        N'TRIGGER', N'InsteadOfDeleteOn_parroquia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_patrocinante'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_patrocinante]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_patrocinante
   ON dbo.patrocinante
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Cliente_P nchar(10), 
               @old$PatrocinanteID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Cliente_P, PatrocinanteID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Cliente_P, @old$PatrocinanteID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.publicidad
                     WHERE publicidad.Patrocinante = @old$PatrocinanteID

                     DELETE 
                     FROM dbo.cliente
                     WHERE cliente.RIF = @old$Cliente_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.patrocinante
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Cliente_P, @old$PatrocinanteID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.patrocinante.AntesDeEliminarPatrocinante',
        N'SCHEMA', N'dbo',
        N'TABLE', N'patrocinante',
        N'TRIGGER', N'InsteadOfDeleteOn_patrocinante'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_producto'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_producto]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_producto
   ON dbo.producto
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Describible_P int, 
               @old$Buscable_P int, 
               @old$CalificableSeguible_P int, 
               @old$ProductoID int, 
               @old$Nombre nvarchar(45)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Describible_P, 
                     Buscable_P, 
                     CalificableSeguible_P, 
                     ProductoID, 
                     Nombre
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Describible_P, 
                  @old$Buscable_P, 
                  @old$CalificableSeguible_P, 
                  @old$ProductoID, 
                  @old$Nombre

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Producto: ' + CAST(@old$ProductoID AS varchar(50)) + N', ' + @old$Nombre

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.inventario
                     WHERE inventario.ProductoID = @old$ProductoID

                     DELETE 
                     FROM dbo.describible
                     WHERE describible.DescribibleID = @old$Describible_P

                     DELETE 
                     FROM dbo.buscable
                     WHERE buscable.BuscableID = @old$Buscable_P

                     DELETE 
                     FROM dbo.calificableseguible
                     WHERE calificableseguible.CalificableSeguibleID = @old$CalificableSeguible_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.producto
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Describible_P, 
                        @old$Buscable_P, 
                        @old$CalificableSeguible_P, 
                        @old$ProductoID, 
                        @old$Nombre

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.producto.t_ProductoEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'producto',
        N'TRIGGER', N'InsteadOfDeleteOn_producto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_publicidad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_publicidad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_publicidad
   ON dbo.publicidad
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Buscable_P int, 
               @old$Describible_P int, 
               @old$Rastreable_P int, 
               @old$Etiquetable_P int, 
               @old$Cobrable_P int, 
               @old$PublicidadID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Buscable_P, 
                     Describible_P, 
                     Rastreable_P, 
                     Etiquetable_P, 
                     Cobrable_P, 
                     PublicidadID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Buscable_P, 
                  @old$Describible_P, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$Cobrable_P, 
                  @old$PublicidadID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Publicidad: ' + CAST(@old$PublicidadID AS varchar(50))

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.etiquetable
                     WHERE etiquetable.EtiquetableID = @old$Etiquetable_P

                     DELETE 
                     FROM dbo.describible
                     WHERE describible.DescribibleID = @old$Describible_P

                     DELETE 
                     FROM dbo.buscable
                     WHERE buscable.BuscableID = @old$Buscable_P

                     DELETE 
                     FROM dbo.cobrable
                     WHERE cobrable.CobrableID = @old$Cobrable_P

                     DELETE 
                     FROM dbo.consumidorobjetivo
                     WHERE consumidorobjetivo.PublicidadID = @old$PublicidadID

                     DELETE 
                     FROM dbo.grupodeedadobjetivo
                     WHERE grupodeedadobjetivo.PublicidadID = @old$PublicidadID

                     DELETE 
                     FROM dbo.gradodeinstruccionobjetivo
                     WHERE gradodeinstruccionobjetivo.PublicidadID = @old$PublicidadID

                     DELETE 
                     FROM dbo.regiongeograficaobjetivo
                     WHERE regiongeograficaobjetivo.PublicidadID = @old$PublicidadID

                     DELETE 
                     FROM dbo.sexoobjetivo
                     WHERE sexoobjetivo.PublicidadID = @old$PublicidadID

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.publicidad
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Buscable_P, 
                        @old$Describible_P, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$Cobrable_P, 
                        @old$PublicidadID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.publicidad.t_PublicidadEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'publicidad',
        N'TRIGGER', N'InsteadOfDeleteOn_publicidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_punto'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_punto]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_punto
   ON dbo.punto
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$PuntoID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, PuntoID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$PuntoID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     DELETE 
                     FROM dbo.puntodecroquis
                     WHERE puntodecroquis.PuntoID = @old$PuntoID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.punto
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$PuntoID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.punto.t_PuntoEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'punto',
        N'TRIGGER', N'InsteadOfDeleteOn_punto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_regiongeografica'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_regiongeografica]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_regiongeografica
   ON dbo.regiongeografica
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$Dibujable_P int, 
               @old$RegionGeograficaID int, 
               @old$Nombre nvarchar(45)

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Rastreable_P, 
                     Dibujable_P, 
                     RegionGeograficaID, 
                     Nombre
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Rastreable_P, 
                  @old$Dibujable_P, 
                  @old$RegionGeograficaID, 
                  @old$Nombre

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'RegionGeografica: ' + @old$Nombre

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.tiendasconsumidores
                     WHERE tiendasconsumidores.RegionGeograficaID = @old$RegionGeograficaID

                     DELETE 
                     FROM dbo.regiongeograficaobjetivo
                     WHERE regiongeograficaobjetivo.RegionGeograficaID = @old$RegionGeograficaID

                     DELETE 
                     FROM dbo.estadisticas
                     WHERE estadisticas.RegionGeografica = @old$RegionGeograficaID

                     DELETE 
                     FROM dbo.dibujable
                     WHERE dibujable.DibujableID = @old$Dibujable_P

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.regiongeografica
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Rastreable_P, 
                        @old$Dibujable_P, 
                        @old$RegionGeograficaID, 
                        @old$Nombre

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeografica.t_RegionGeograficaEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeografica',
        N'TRIGGER', N'InsteadOfDeleteOn_regiongeografica'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_seguidor'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_seguidor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_seguidor
   ON dbo.seguidor
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Rastreable_P int, 
               @old$ConsumidorID int, 
               @old$CalificableSeguibleID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, Rastreable_P, ConsumidorID, CalificableSeguibleID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$Rastreable_P, @old$ConsumidorID, @old$CalificableSeguibleID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = N'Seguidor: ' + CAST(@old$ConsumidorID AS varchar(50)) + N' (consumidor) de ' + CAST(@old$CalificableSeguibleID AS varchar(50)) + N' (calificable/seguible)'

                     EXECUTE dbo.RegistrarEliminacion$IMPL @old$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                     DELETE 
                     FROM dbo.rastreable
                     WHERE rastreable.RastreableID = @old$Rastreable_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.seguidor
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$Rastreable_P, @old$ConsumidorID, @old$CalificableSeguibleID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.seguidor.t_SeguidorEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'seguidor',
        N'TRIGGER', N'InsteadOfDeleteOn_seguidor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_subcontinente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_subcontinente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_subcontinente
   ON dbo.subcontinente
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$RegionGeografica_P int, 
               @old$SubcontinenteID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, RegionGeografica_P, SubcontinenteID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$SubcontinenteID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.paissubcontinente
                     WHERE paissubcontinente.SubcontinenteID = @old$SubcontinenteID

                     DELETE 
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @old$RegionGeografica_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.subcontinente
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$RegionGeografica_P, @old$SubcontinenteID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.subcontinente.t_SubcontinenteEliminar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'subcontinente',
        N'TRIGGER', N'InsteadOfDeleteOn_subcontinente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_tienda'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_tienda]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_tienda
   ON dbo.tienda
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$Buscable_P int, 
               @old$Cliente_P nchar(10), 
               @old$CalificableSeguible_P int, 
               @old$Interlocutor_P int, 
               @old$Dibujable_P int, 
               @old$TiendaID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     ssma$rowid, 
                     Buscable_P, 
                     Cliente_P, 
                     CalificableSeguible_P, 
                     Interlocutor_P, 
                     Dibujable_P, 
                     TiendaID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO 
                  @old$ssma$rowid, 
                  @old$Buscable_P, 
                  @old$Cliente_P, 
                  @old$CalificableSeguible_P, 
                  @old$Interlocutor_P, 
                  @old$Dibujable_P, 
                  @old$TiendaID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.interlocutor
                     WHERE interlocutor.InterlocutorID = @old$Interlocutor_P

                     DELETE 
                     FROM dbo.calificableseguible
                     WHERE calificableseguible.CalificableSeguibleID = @old$CalificableSeguible_P

                     DELETE 
                     FROM dbo.dibujable
                     WHERE dibujable.DibujableID = @old$Dibujable_P

                     DELETE 
                     FROM dbo.buscable
                     WHERE buscable.BuscableID = @old$Buscable_P

                     DELETE 
                     FROM dbo.tamano
                     WHERE tamano.TiendaID = @old$TiendaID

                     DELETE 
                     FROM dbo.horariodetrabajo
                     WHERE horariodetrabajo.TiendaID = @old$TiendaID

                     DELETE 
                     FROM dbo.inventario
                     WHERE inventario.TiendaID = @old$TiendaID

                     DELETE 
                     FROM dbo.cliente
                     WHERE cliente.RIF = @old$Cliente_P

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.tienda
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO 
                        @old$ssma$rowid, 
                        @old$Buscable_P, 
                        @old$Cliente_P, 
                        @old$CalificableSeguible_P, 
                        @old$Interlocutor_P, 
                        @old$Dibujable_P, 
                        @old$TiendaID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tienda.AntesDeEliminarTienda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tienda',
        N'TRIGGER', N'InsteadOfDeleteOn_tienda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfDeleteOn_usuario'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfDeleteOn_usuario]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfDeleteOn_usuario
   ON dbo.usuario
    INSTEAD OF DELETE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @old$UsuarioID int

            DECLARE
                ForEachDeletedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT ssma$rowid, UsuarioID
                  FROM deleted

            OPEN ForEachDeletedRowTriggerCursor

            FETCH ForEachDeletedRowTriggerCursor
                INTO @old$ssma$rowid, @old$UsuarioID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     DELETE 
                     FROM dbo.acceso
                     WHERE acceso.AccesoID = @old$UsuarioID

                     DELETE 
                     FROM dbo.busqueda
                     WHERE busqueda.BusquedaID = @old$UsuarioID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  DELETE dbo.usuario
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachDeletedRowTriggerCursor
                      INTO @old$ssma$rowid, @old$UsuarioID

               END

            CLOSE ForEachDeletedRowTriggerCursor

            DEALLOCATE ForEachDeletedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.usuario.AntesDeEliminarUsuario',
        N'SCHEMA', N'dbo',
        N'TABLE', N'usuario',
        N'TRIGGER', N'InsteadOfDeleteOn_usuario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_administrador'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_administrador]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_administrador
   ON dbo.administrador
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Usuario_P int, 
               @old$Usuario_P int, 
               @new$AdministradorID int, 
               @old$AdministradorID int, 
               @new$Estatus nchar(9), 
               @new$Privilegios nchar(7), 
               @new$Nombre nvarchar(45), 
               @old$Nombre nvarchar(45), 
               @new$Apellido nvarchar(45), 
               @old$Apellido nvarchar(45)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Usuario_P, 
                     i.AdministradorID, 
                     i.Estatus, 
                     i.Privilegios, 
                     i.Nombre, 
                     i.Apellido, 
                     d.Rastreable_P, 
                     d.Usuario_P, 
                     d.AdministradorID, 
                     d.Nombre, 
                     d.Apellido, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Usuario_P, 
                  @new$AdministradorID, 
                  @new$Estatus, 
                  @new$Privilegios, 
                  @new$Nombre, 
                  @new$Apellido, 
                  @old$Rastreable_P, 
                  @old$Usuario_P, 
                  @old$AdministradorID, 
                  @old$Nombre, 
                  @old$Apellido, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Usuario_P <> @old$Usuario_P
                        SET @new$Usuario_P = @old$Usuario_P

                     IF @new$AdministradorID <> @old$AdministradorID
                        SET @new$AdministradorID = @old$AdministradorID

                     IF @new$Nombre <> @old$Nombre
                        SET @new$Nombre = @old$Nombre

                     IF @new$Apellido <> @old$Apellido
                        SET @new$Apellido = @old$Apellido

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.administrador
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Usuario_P = @new$Usuario_P, 
                        AdministradorID = @new$AdministradorID, 
                        Estatus = @new$Estatus, 
                        Privilegios = @new$Privilegios, 
                        Nombre = @new$Nombre, 
                        Apellido = @new$Apellido
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Usuario_P, 
                        @new$AdministradorID, 
                        @new$Estatus, 
                        @new$Privilegios, 
                        @new$Nombre, 
                        @new$Apellido, 
                        @old$Rastreable_P, 
                        @old$Usuario_P, 
                        @old$AdministradorID, 
                        @old$Nombre, 
                        @old$Apellido, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.administrador.AntesDeActualizarAdministrador',
        N'SCHEMA', N'dbo',
        N'TABLE', N'administrador',
        N'TRIGGER', N'InsteadOfUpdateOn_administrador'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_buscable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_buscable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_buscable
   ON dbo.buscable
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$BuscableID int, 
               @old$BuscableID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.BuscableID, d.BuscableID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$BuscableID, @old$BuscableID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$BuscableID <> @old$BuscableID
                        SET @new$BuscableID = @old$BuscableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.buscable
                     SET 
                        BuscableID = @new$BuscableID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$BuscableID, @old$BuscableID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.buscable.AntesDeActualizarBuscable',
        N'SCHEMA', N'dbo',
        N'TABLE', N'buscable',
        N'TRIGGER', N'InsteadOfUpdateOn_buscable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_busqueda'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_busqueda]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_busqueda
   ON dbo.busqueda
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @old$Etiquetable_P int, 
               @new$BusquedaID int, 
               @old$BusquedaID int, 
               @new$Usuario int, 
               @old$Usuario int, 
               @new$FechaHora datetime2(0), 
               @old$FechaHora datetime2(0), 
               @new$Contenido nvarchar(max), 
               @old$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Etiquetable_P, 
                     i.BusquedaID, 
                     i.Usuario, 
                     i.FechaHora, 
                     i.Contenido, 
                     d.Rastreable_P, 
                     d.Etiquetable_P, 
                     d.BusquedaID, 
                     d.Usuario, 
                     d.FechaHora, 
                     d.Contenido, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$BusquedaID, 
                  @new$Usuario, 
                  @new$FechaHora, 
                  @new$Contenido, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$BusquedaID, 
                  @old$Usuario, 
                  @old$FechaHora, 
                  @old$Contenido, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Etiquetable_P <> @old$Etiquetable_P
                        SET @new$Etiquetable_P = @old$Etiquetable_P

                     IF @new$BusquedaID <> @old$BusquedaID
                        SET @new$BusquedaID = @old$BusquedaID

                     IF @new$Usuario <> @old$Usuario
                        SET @new$Usuario = @old$Usuario

                     IF @new$FechaHora <> @old$FechaHora
                        SET @new$FechaHora = @old$FechaHora

                     IF @new$Contenido <> @old$Contenido
                        SET @new$Contenido = @old$Contenido

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.busqueda
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Etiquetable_P = @new$Etiquetable_P, 
                        BusquedaID = @new$BusquedaID, 
                        Usuario = @new$Usuario, 
                        FechaHora = @new$FechaHora, 
                        Contenido = @new$Contenido
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$BusquedaID, 
                        @new$Usuario, 
                        @new$FechaHora, 
                        @new$Contenido, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$BusquedaID, 
                        @old$Usuario, 
                        @old$FechaHora, 
                        @old$Contenido, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.busqueda.AntesDeActualizarBusqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'busqueda',
        N'TRIGGER', N'InsteadOfUpdateOn_busqueda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_calificableseguible'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_calificableseguible]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_calificableseguible
   ON dbo.calificableseguible
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$CalificableSeguibleID int, 
               @old$CalificableSeguibleID int, 
               @new$CalificacionGeneral int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.CalificableSeguibleID, i.CalificacionGeneral, d.CalificableSeguibleID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$CalificableSeguibleID, @new$CalificacionGeneral, @old$CalificableSeguibleID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$CalificableSeguibleID <> @old$CalificableSeguibleID
                        SET @new$CalificableSeguibleID = @old$CalificableSeguibleID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.calificableseguible
                     SET 
                        CalificableSeguibleID = @new$CalificableSeguibleID, 
                        CalificacionGeneral = @new$CalificacionGeneral
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$CalificableSeguibleID, @new$CalificacionGeneral, @old$CalificableSeguibleID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificableseguible.t_CalificableSeguibleModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificableseguible',
        N'TRIGGER', N'InsteadOfUpdateOn_calificableseguible'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_calificacionresena'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_calificacionresena]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_calificacionresena
   ON dbo.calificacionresena
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @old$Etiquetable_P int, 
               @new$CalificableSeguibleID int, 
               @old$CalificableSeguibleID int, 
               @new$ConsumidorID int, 
               @old$ConsumidorID int, 
               @new$Calificacion nchar(4), 
               @new$Resena nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Etiquetable_P, 
                     i.CalificableSeguibleID, 
                     i.ConsumidorID, 
                     i.Calificacion, 
                     i.Resena, 
                     d.Rastreable_P, 
                     d.Etiquetable_P, 
                     d.CalificableSeguibleID, 
                     d.ConsumidorID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$CalificableSeguibleID, 
                  @new$ConsumidorID, 
                  @new$Calificacion, 
                  @new$Resena, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$CalificableSeguibleID, 
                  @old$ConsumidorID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Etiquetable_P <> @old$Etiquetable_P
                        SET @new$Etiquetable_P = @old$Etiquetable_P

                     IF @new$CalificableSeguibleID <> @old$CalificableSeguibleID
                        SET @new$CalificableSeguibleID = @old$CalificableSeguibleID

                     IF @new$ConsumidorID <> @old$ConsumidorID
                        SET @new$ConsumidorID = @old$ConsumidorID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.calificacionresena
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Etiquetable_P = @new$Etiquetable_P, 
                        CalificableSeguibleID = @new$CalificableSeguibleID, 
                        ConsumidorID = @new$ConsumidorID, 
                        Calificacion = @new$Calificacion, 
                        Resena = @new$Resena
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$CalificableSeguibleID, 
                        @new$ConsumidorID, 
                        @new$Calificacion, 
                        @new$Resena, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$CalificableSeguibleID, 
                        @old$ConsumidorID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificacionresena.t_CalificacionResenaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificacionresena',
        N'TRIGGER', N'InsteadOfUpdateOn_calificacionresena'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_categoria'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_categoria]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_categoria
   ON dbo.categoria
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Etiquetable_P int, 
               @old$Etiquetable_P int, 
               @new$CategoriaID int, 
               @old$CategoriaID int, 
               @new$Nombre nchar(30), 
               @new$HijoDeCategoria int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Etiquetable_P, 
                     i.CategoriaID, 
                     i.Nombre, 
                     i.HijoDeCategoria, 
                     d.Etiquetable_P, 
                     d.CategoriaID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Etiquetable_P, 
                  @new$CategoriaID, 
                  @new$Nombre, 
                  @new$HijoDeCategoria, 
                  @old$Etiquetable_P, 
                  @old$CategoriaID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Etiquetable_P <> @old$Etiquetable_P
                        SET @new$Etiquetable_P = @old$Etiquetable_P

                     IF @new$CategoriaID <> @old$CategoriaID
                        SET @new$CategoriaID = @old$CategoriaID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.categoria
                     SET 
                        Etiquetable_P = @new$Etiquetable_P, 
                        CategoriaID = @new$CategoriaID, 
                        Nombre = @new$Nombre, 
                        HijoDeCategoria = @new$HijoDeCategoria
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Etiquetable_P, 
                        @new$CategoriaID, 
                        @new$Nombre, 
                        @new$HijoDeCategoria, 
                        @old$Etiquetable_P, 
                        @old$CategoriaID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.categoria.t_CategoriaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'categoria',
        N'TRIGGER', N'InsteadOfUpdateOn_categoria'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_ciudad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_ciudad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_ciudad
   ON dbo.ciudad
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$CiudadID int, 
               @old$CiudadID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.CiudadID, 
                     d.RegionGeografica_P, 
                     d.CiudadID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$CiudadID, 
                  @old$RegionGeografica_P, 
                  @old$CiudadID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$CiudadID <> @old$CiudadID
                        SET @new$CiudadID = @old$CiudadID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.ciudad
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        CiudadID = @new$CiudadID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$CiudadID, 
                        @old$RegionGeografica_P, 
                        @old$CiudadID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.ciudad.t_CiudadModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'ciudad',
        N'TRIGGER', N'InsteadOfUpdateOn_ciudad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_cliente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_cliente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_cliente
   ON dbo.cliente
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Describible_P int, 
               @old$Describible_P int, 
               @new$Usuario_P int, 
               @old$Usuario_P int, 
               @new$RIF nchar(10), 
               @old$RIF nchar(10), 
               @new$Categoria int, 
               @new$Estatus nchar(9), 
               @new$NombreLegal nvarchar(45), 
               @old$NombreLegal nvarchar(45), 
               @new$NombreComun nvarchar(45), 
               @new$Telefono nchar(12), 
               @new$Edificio_CC nchar(20), 
               @new$Piso nchar(12), 
               @new$Apartamento nchar(12), 
               @new$LocalNo nchar(12), 
               @new$Casa nchar(20), 
               @new$Calle nchar(12), 
               @new$Sector_Urb_Barrio nchar(20), 
               @new$PaginaWeb nchar(40), 
               @new$Facebook nchar(80), 
               @new$Twitter nchar(80)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Describible_P, 
                     i.Usuario_P, 
                     i.RIF, 
                     i.Categoria, 
                     i.Estatus, 
                     i.NombreLegal, 
                     i.NombreComun, 
                     i.Telefono, 
                     i.Edificio_CC, 
                     i.Piso, 
                     i.Apartamento, 
                     i.LocalNo, 
                     i.Casa, 
                     i.Calle, 
                     i.Sector_Urb_Barrio, 
                     i.PaginaWeb, 
                     i.Facebook, 
                     i.Twitter, 
                     d.Rastreable_P, 
                     d.Describible_P, 
                     d.Usuario_P, 
                     d.RIF, 
                     d.NombreLegal, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Describible_P, 
                  @new$Usuario_P, 
                  @new$RIF, 
                  @new$Categoria, 
                  @new$Estatus, 
                  @new$NombreLegal, 
                  @new$NombreComun, 
                  @new$Telefono, 
                  @new$Edificio_CC, 
                  @new$Piso, 
                  @new$Apartamento, 
                  @new$LocalNo, 
                  @new$Casa, 
                  @new$Calle, 
                  @new$Sector_Urb_Barrio, 
                  @new$PaginaWeb, 
                  @new$Facebook, 
                  @new$Twitter, 
                  @old$Rastreable_P, 
                  @old$Describible_P, 
                  @old$Usuario_P, 
                  @old$RIF, 
                  @old$NombreLegal, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Describible_P <> @old$Describible_P
                        SET @new$Describible_P = @old$Describible_P

                     IF @new$Usuario_P <> @old$Usuario_P
                        SET @new$Usuario_P = @old$Usuario_P

                     IF @new$RIF <> @old$RIF
                        SET @new$RIF = @old$RIF

                     IF @new$NombreLegal <> @old$NombreLegal
                        SET @new$NombreLegal = @old$NombreLegal

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.cliente
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Describible_P = @new$Describible_P, 
                        Usuario_P = @new$Usuario_P, 
                        RIF = @new$RIF, 
                        Categoria = @new$Categoria, 
                        Estatus = @new$Estatus, 
                        NombreLegal = @new$NombreLegal, 
                        NombreComun = @new$NombreComun, 
                        Telefono = @new$Telefono, 
                        Edificio_CC = @new$Edificio_CC, 
                        Piso = @new$Piso, 
                        Apartamento = @new$Apartamento, 
                        LocalNo = @new$LocalNo, 
                        Casa = @new$Casa, 
                        Calle = @new$Calle, 
                        Sector_Urb_Barrio = @new$Sector_Urb_Barrio, 
                        PaginaWeb = @new$PaginaWeb, 
                        Facebook = @new$Facebook, 
                        Twitter = @new$Twitter
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Describible_P, 
                        @new$Usuario_P, 
                        @new$RIF, 
                        @new$Categoria, 
                        @new$Estatus, 
                        @new$NombreLegal, 
                        @new$NombreComun, 
                        @new$Telefono, 
                        @new$Edificio_CC, 
                        @new$Piso, 
                        @new$Apartamento, 
                        @new$LocalNo, 
                        @new$Casa, 
                        @new$Calle, 
                        @new$Sector_Urb_Barrio, 
                        @new$PaginaWeb, 
                        @new$Facebook, 
                        @new$Twitter, 
                        @old$Rastreable_P, 
                        @old$Describible_P, 
                        @old$Usuario_P, 
                        @old$RIF, 
                        @old$NombreLegal, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cliente.AntesDeActualizarCliente',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cliente',
        N'TRIGGER', N'InsteadOfUpdateOn_cliente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_cobrable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_cobrable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_cobrable
   ON dbo.cobrable
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$CobrableID int, 
               @old$CobrableID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.CobrableID, d.CobrableID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$CobrableID, @old$CobrableID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$CobrableID <> @old$CobrableID
                        SET @new$CobrableID = @old$CobrableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.cobrable
                     SET 
                        CobrableID = @new$CobrableID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$CobrableID, @old$CobrableID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.cobrable.t_CobrableModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'cobrable',
        N'TRIGGER', N'InsteadOfUpdateOn_cobrable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_consumidor'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_consumidor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_consumidor
   ON dbo.consumidor
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Interlocutor_P int, 
               @old$Interlocutor_P int, 
               @new$Usuario_P int, 
               @old$Usuario_P int, 
               @new$ConsumidorID int, 
               @old$ConsumidorID int, 
               @new$Nombre nvarchar(45), 
               @new$Apellido nvarchar(45), 
               @new$Estatus nchar(9), 
               @new$Sexo nchar(6), 
               @new$FechaDeNacimiento date, 
               @old$FechaDeNacimiento date, 
               @new$GrupoDeEdad nchar(15), 
               @old$GrupoDeEdad nchar(15), 
               @new$GradoDeInstruccion nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Interlocutor_P, 
                     i.Usuario_P, 
                     i.ConsumidorID, 
                     i.Nombre, 
                     i.Apellido, 
                     i.Estatus, 
                     i.Sexo, 
                     i.FechaDeNacimiento, 
                     i.GrupoDeEdad, 
                     i.GradoDeInstruccion, 
                     d.Rastreable_P, 
                     d.Interlocutor_P, 
                     d.Usuario_P, 
                     d.ConsumidorID, 
                     d.FechaDeNacimiento, 
                     d.GrupoDeEdad, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Interlocutor_P, 
                  @new$Usuario_P, 
                  @new$ConsumidorID, 
                  @new$Nombre, 
                  @new$Apellido, 
                  @new$Estatus, 
                  @new$Sexo, 
                  @new$FechaDeNacimiento, 
                  @new$GrupoDeEdad, 
                  @new$GradoDeInstruccion, 
                  @old$Rastreable_P, 
                  @old$Interlocutor_P, 
                  @old$Usuario_P, 
                  @old$ConsumidorID, 
                  @old$FechaDeNacimiento, 
                  @old$GrupoDeEdad, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Interlocutor_P <> @old$Interlocutor_P
                        SET @new$Interlocutor_P = @old$Interlocutor_P

                     IF @new$Usuario_P <> @old$Usuario_P
                        SET @new$Usuario_P = @old$Usuario_P

                     IF @new$ConsumidorID <> @old$ConsumidorID
                        SET @new$ConsumidorID = @old$ConsumidorID

                     IF @new$FechaDeNacimiento <> @old$FechaDeNacimiento
                        SET @new$FechaDeNacimiento = @old$FechaDeNacimiento

                     IF @new$GrupoDeEdad <> @old$GrupoDeEdad
                        SET @new$GrupoDeEdad = @old$GrupoDeEdad

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.consumidor
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Interlocutor_P = @new$Interlocutor_P, 
                        Usuario_P = @new$Usuario_P, 
                        ConsumidorID = @new$ConsumidorID, 
                        Nombre = @new$Nombre, 
                        Apellido = @new$Apellido, 
                        Estatus = @new$Estatus, 
                        Sexo = @new$Sexo, 
                        FechaDeNacimiento = @new$FechaDeNacimiento, 
                        GrupoDeEdad = @new$GrupoDeEdad, 
                        GradoDeInstruccion = @new$GradoDeInstruccion
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Interlocutor_P, 
                        @new$Usuario_P, 
                        @new$ConsumidorID, 
                        @new$Nombre, 
                        @new$Apellido, 
                        @new$Estatus, 
                        @new$Sexo, 
                        @new$FechaDeNacimiento, 
                        @new$GrupoDeEdad, 
                        @new$GradoDeInstruccion, 
                        @old$Rastreable_P, 
                        @old$Interlocutor_P, 
                        @old$Usuario_P, 
                        @old$ConsumidorID, 
                        @old$FechaDeNacimiento, 
                        @old$GrupoDeEdad, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidor.AntesDeActualizarConsumidor',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidor',
        N'TRIGGER', N'InsteadOfUpdateOn_consumidor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_consumidorobjetivo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_consumidorobjetivo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_consumidorobjetivo
   ON dbo.consumidorobjetivo
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PublicidadID int, 
               @old$PublicidadID int, 
               @new$ConsumidorID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.ConsumidorID, d.PublicidadID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$ConsumidorID, @old$PublicidadID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$PublicidadID <> @old$PublicidadID
                        SET @new$PublicidadID = @old$PublicidadID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.consumidorobjetivo
                     SET 
                        PublicidadID = @new$PublicidadID, 
                        ConsumidorID = @new$ConsumidorID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$ConsumidorID, @old$PublicidadID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidorobjetivo.t_ConsumidorObjetivoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidorobjetivo',
        N'TRIGGER', N'InsteadOfUpdateOn_consumidorobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_contadordeexhibiciones'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_contadordeexhibiciones]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_contadordeexhibiciones
   ON dbo.contadordeexhibiciones
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$EstadisticasDeVisitasID int, 
               @old$EstadisticasDeVisitasID int, 
               @new$FechaInicio datetime2(0), 
               @old$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @new$ContadorDeExhibiciones int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.EstadisticasDeVisitasID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.ContadorDeExhibiciones, 
                     d.EstadisticasDeVisitasID, 
                     d.FechaInicio, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$EstadisticasDeVisitasID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$ContadorDeExhibiciones, 
                  @old$EstadisticasDeVisitasID, 
                  @old$FechaInicio, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$EstadisticasDeVisitasID <> @old$EstadisticasDeVisitasID
                        SET @new$EstadisticasDeVisitasID = @old$EstadisticasDeVisitasID

                     IF @new$FechaInicio <> @old$FechaInicio
                        SET @new$FechaInicio = @old$FechaInicio

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.contadordeexhibiciones
                     SET 
                        EstadisticasDeVisitasID = @new$EstadisticasDeVisitasID, 
                        FechaInicio = @new$FechaInicio, 
                        FechaFin = @new$FechaFin, 
                        ContadorDeExhibiciones = @new$ContadorDeExhibiciones
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$EstadisticasDeVisitasID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$ContadorDeExhibiciones, 
                        @old$EstadisticasDeVisitasID, 
                        @old$FechaInicio, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.contadordeexhibiciones.t_ContadorDeExhibicionesModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'contadordeexhibiciones',
        N'TRIGGER', N'InsteadOfUpdateOn_contadordeexhibiciones'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_continente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_continente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_continente
   ON dbo.continente
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$ContinenteID int, 
               @old$ContinenteID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.ContinenteID, 
                     d.RegionGeografica_P, 
                     d.ContinenteID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$ContinenteID, 
                  @old$RegionGeografica_P, 
                  @old$ContinenteID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$ContinenteID <> @old$ContinenteID
                        SET @new$ContinenteID = @old$ContinenteID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.continente
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        ContinenteID = @new$ContinenteID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$ContinenteID, 
                        @old$RegionGeografica_P, 
                        @old$ContinenteID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.continente.t_ContinenteModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'continente',
        N'TRIGGER', N'InsteadOfUpdateOn_continente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_croquis'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_croquis]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_croquis
   ON dbo.croquis
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$CroquisID int, 
               @old$CroquisID int, 
               @new$Area float(24), 
               @new$Perimetro float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.CroquisID, 
                     i.Area, 
                     i.Perimetro, 
                     d.Rastreable_P, 
                     d.CroquisID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$CroquisID, 
                  @new$Area, 
                  @new$Perimetro, 
                  @old$Rastreable_P, 
                  @old$CroquisID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$CroquisID <> @old$CroquisID
                        SET @new$CroquisID = @old$CroquisID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.croquis
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        CroquisID = @new$CroquisID, 
                        Area = @new$Area, 
                        Perimetro = @new$Perimetro
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$CroquisID, 
                        @new$Area, 
                        @new$Perimetro, 
                        @old$Rastreable_P, 
                        @old$CroquisID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.croquis.t_CroquisModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'croquis',
        N'TRIGGER', N'InsteadOfUpdateOn_croquis'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_describible'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_describible]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_describible
   ON dbo.describible
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$DescribibleID int, 
               @old$DescribibleID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.DescribibleID, d.DescribibleID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$DescribibleID, @old$DescribibleID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$DescribibleID <> @old$DescribibleID
                        SET @new$DescribibleID = @old$DescribibleID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.describible
                     SET 
                        DescribibleID = @new$DescribibleID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$DescribibleID, @old$DescribibleID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.describible.t_DescribibleModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'describible',
        N'TRIGGER', N'InsteadOfUpdateOn_describible'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_descripcion'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_descripcion]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_descripcion
   ON dbo.descripcion
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @old$Etiquetable_P int, 
               @new$DescripcionID int, 
               @old$DescripcionID int, 
               @new$Describible int, 
               @old$Describible int, 
               @new$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Etiquetable_P, 
                     i.DescripcionID, 
                     i.Describible, 
                     i.Contenido, 
                     d.Rastreable_P, 
                     d.Etiquetable_P, 
                     d.DescripcionID, 
                     d.Describible, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$DescripcionID, 
                  @new$Describible, 
                  @new$Contenido, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$DescripcionID, 
                  @old$Describible, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Etiquetable_P <> @old$Etiquetable_P
                        SET @new$Etiquetable_P = @old$Etiquetable_P

                     IF @new$DescripcionID <> @old$DescripcionID
                        SET @new$DescripcionID = @old$DescripcionID

                     IF @new$Describible <> @old$Describible
                        SET @new$Describible = @old$Describible

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.descripcion
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Etiquetable_P = @new$Etiquetable_P, 
                        DescripcionID = @new$DescripcionID, 
                        Describible = @new$Describible, 
                        Contenido = @new$Contenido
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$DescripcionID, 
                        @new$Describible, 
                        @new$Contenido, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$DescripcionID, 
                        @old$Describible, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.descripcion.t_DescripcionModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'descripcion',
        N'TRIGGER', N'InsteadOfUpdateOn_descripcion'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_dibujable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_dibujable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_dibujable
   ON dbo.dibujable
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$DibujableID int, 
               @old$DibujableID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.DibujableID, d.DibujableID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$DibujableID, @old$DibujableID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$DibujableID <> @old$DibujableID
                        SET @new$DibujableID = @old$DibujableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.dibujable
                     SET 
                        DibujableID = @new$DibujableID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$DibujableID, @old$DibujableID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.dibujable.t_DibujableModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'dibujable',
        N'TRIGGER', N'InsteadOfUpdateOn_dibujable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_estadisticas'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_estadisticas]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_estadisticas
   ON dbo.estadisticas
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$EstadisticasID int, 
               @old$EstadisticasID int, 
               @new$RegionGeografica int, 
               @old$RegionGeografica int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.EstadisticasID, 
                     i.RegionGeografica, 
                     d.Rastreable_P, 
                     d.EstadisticasID, 
                     d.RegionGeografica, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$EstadisticasID, 
                  @new$RegionGeografica, 
                  @old$Rastreable_P, 
                  @old$EstadisticasID, 
                  @old$RegionGeografica, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$EstadisticasID <> @old$EstadisticasID
                        SET @new$EstadisticasID = @old$EstadisticasID

                     IF @new$RegionGeografica <> @old$RegionGeografica
                        SET @new$EstadisticasID = @old$RegionGeografica

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.estadisticas
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        EstadisticasID = @new$EstadisticasID, 
                        RegionGeografica = @new$RegionGeografica
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$EstadisticasID, 
                        @new$RegionGeografica, 
                        @old$Rastreable_P, 
                        @old$EstadisticasID, 
                        @old$RegionGeografica, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticas.AntesDeActualizarEstadisticas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticas',
        N'TRIGGER', N'InsteadOfUpdateOn_estadisticas'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_estadisticasdeinfluencia'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_estadisticasdeinfluencia]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_estadisticasdeinfluencia
   ON dbo.estadisticasdeinfluencia
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Estadisticas_P int, 
               @old$Estadisticas_P int, 
               @new$EstadisticasDeInfluenciaID int, 
               @old$EstadisticasDeInfluenciaID int, 
               @new$Palabra int, 
               @old$Palabra int, 
               @new$NumeroDeDescripciones int, 
               @new$NumeroDeMensajes int, 
               @new$NumeroDeCategorias int, 
               @new$NumeroDeResenas int, 
               @new$NumeroDePublicidades int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Estadisticas_P, 
                     i.EstadisticasDeInfluenciaID, 
                     i.Palabra, 
                     i.NumeroDeDescripciones, 
                     i.NumeroDeMensajes, 
                     i.NumeroDeCategorias, 
                     i.NumeroDeResenas, 
                     i.NumeroDePublicidades, 
                     d.Estadisticas_P, 
                     d.EstadisticasDeInfluenciaID, 
                     d.Palabra, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDeInfluenciaID, 
                  @new$Palabra, 
                  @new$NumeroDeDescripciones, 
                  @new$NumeroDeMensajes, 
                  @new$NumeroDeCategorias, 
                  @new$NumeroDeResenas, 
                  @new$NumeroDePublicidades, 
                  @old$Estadisticas_P, 
                  @old$EstadisticasDeInfluenciaID, 
                  @old$Palabra, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Estadisticas_P <> @old$Estadisticas_P
                        SET @new$Estadisticas_P = @old$Estadisticas_P

                     IF @new$EstadisticasDeInfluenciaID <> @old$EstadisticasDeInfluenciaID
                        SET @new$EstadisticasDeInfluenciaID = @old$EstadisticasDeInfluenciaID

                     IF @new$Palabra <> @old$Palabra
                        SET @new$Palabra = @old$Palabra

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.estadisticasdeinfluencia
                     SET 
                        Estadisticas_P = @new$Estadisticas_P, 
                        EstadisticasDeInfluenciaID = @new$EstadisticasDeInfluenciaID, 
                        Palabra = @new$Palabra, 
                        NumeroDeDescripciones = @new$NumeroDeDescripciones, 
                        NumeroDeMensajes = @new$NumeroDeMensajes, 
                        NumeroDeCategorias = @new$NumeroDeCategorias, 
                        NumeroDeResenas = @new$NumeroDeResenas, 
                        NumeroDePublicidades = @new$NumeroDePublicidades
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDeInfluenciaID, 
                        @new$Palabra, 
                        @new$NumeroDeDescripciones, 
                        @new$NumeroDeMensajes, 
                        @new$NumeroDeCategorias, 
                        @new$NumeroDeResenas, 
                        @new$NumeroDePublicidades, 
                        @old$Estadisticas_P, 
                        @old$EstadisticasDeInfluenciaID, 
                        @old$Palabra, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdeinfluencia.t_EstadisticasDeInfluenciaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdeinfluencia',
        N'TRIGGER', N'InsteadOfUpdateOn_estadisticasdeinfluencia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_estadisticasdepopularidad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_estadisticasdepopularidad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_estadisticasdepopularidad
   ON dbo.estadisticasdepopularidad
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Estadisticas_P int, 
               @old$Estadisticas_P int, 
               @new$EstadisticasDePopularidadID int, 
               @old$EstadisticasDePopularidadID int, 
               @new$CalificableSeguible int, 
               @old$CalificableSeguible int, 
               @new$NumeroDeCalificaciones int, 
               @new$NumeroDeResenas int, 
               @new$NumeroDeSeguidores int, 
               @new$NumeroDeMenciones int, 
               @new$NumeroDeVendedores int, 
               @new$NumeroDeMensajes int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Estadisticas_P, 
                     i.EstadisticasDePopularidadID, 
                     i.CalificableSeguible, 
                     i.NumeroDeCalificaciones, 
                     i.NumeroDeResenas, 
                     i.NumeroDeSeguidores, 
                     i.NumeroDeMenciones, 
                     i.NumeroDeVendedores, 
                     i.NumeroDeMensajes, 
                     d.Estadisticas_P, 
                     d.EstadisticasDePopularidadID, 
                     d.CalificableSeguible, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDePopularidadID, 
                  @new$CalificableSeguible, 
                  @new$NumeroDeCalificaciones, 
                  @new$NumeroDeResenas, 
                  @new$NumeroDeSeguidores, 
                  @new$NumeroDeMenciones, 
                  @new$NumeroDeVendedores, 
                  @new$NumeroDeMensajes, 
                  @old$Estadisticas_P, 
                  @old$EstadisticasDePopularidadID, 
                  @old$CalificableSeguible, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Estadisticas_P <> @old$Estadisticas_P
                        SET @new$Estadisticas_P = @old$Estadisticas_P

                     IF @new$EstadisticasDePopularidadID <> @old$EstadisticasDePopularidadID
                        SET @new$EstadisticasDePopularidadID = @old$EstadisticasDePopularidadID

                     IF @new$CalificableSeguible <> @old$CalificableSeguible
                        SET @new$CalificableSeguible = @old$CalificableSeguible

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.estadisticasdepopularidad
                     SET 
                        Estadisticas_P = @new$Estadisticas_P, 
                        EstadisticasDePopularidadID = @new$EstadisticasDePopularidadID, 
                        CalificableSeguible = @new$CalificableSeguible, 
                        NumeroDeCalificaciones = @new$NumeroDeCalificaciones, 
                        NumeroDeResenas = @new$NumeroDeResenas, 
                        NumeroDeSeguidores = @new$NumeroDeSeguidores, 
                        NumeroDeMenciones = @new$NumeroDeMenciones, 
                        NumeroDeVendedores = @new$NumeroDeVendedores, 
                        NumeroDeMensajes = @new$NumeroDeMensajes
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDePopularidadID, 
                        @new$CalificableSeguible, 
                        @new$NumeroDeCalificaciones, 
                        @new$NumeroDeResenas, 
                        @new$NumeroDeSeguidores, 
                        @new$NumeroDeMenciones, 
                        @new$NumeroDeVendedores, 
                        @new$NumeroDeMensajes, 
                        @old$Estadisticas_P, 
                        @old$EstadisticasDePopularidadID, 
                        @old$CalificableSeguible, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdepopularidad.t_EstadisticasDePopularidadModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdepopularidad',
        N'TRIGGER', N'InsteadOfUpdateOn_estadisticasdepopularidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_estadisticasdevisitas'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_estadisticasdevisitas]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_estadisticasdevisitas
   ON dbo.estadisticasdevisitas
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Estadisticas_P int, 
               @old$Estadisticas_P int, 
               @new$EstadisticasDeVisitasID int, 
               @old$EstadisticasDeVisitasID int, 
               @new$Buscable int, 
               @old$Buscable int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Estadisticas_P, 
                     i.EstadisticasDeVisitasID, 
                     i.Buscable, 
                     d.Estadisticas_P, 
                     d.EstadisticasDeVisitasID, 
                     d.Buscable, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDeVisitasID, 
                  @new$Buscable, 
                  @old$Estadisticas_P, 
                  @old$EstadisticasDeVisitasID, 
                  @old$Buscable, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Estadisticas_P <> @old$Estadisticas_P
                        SET @new$Estadisticas_P = @old$Estadisticas_P

                     IF @new$EstadisticasDeVisitasID <> @old$EstadisticasDeVisitasID
                        SET @new$EstadisticasDeVisitasID = @old$EstadisticasDeVisitasID

                     IF @new$Buscable <> @old$Buscable
                        SET @new$Buscable = @old$EstadisticasDeVisitasID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.estadisticasdevisitas
                     SET 
                        Estadisticas_P = @new$Estadisticas_P, 
                        EstadisticasDeVisitasID = @new$EstadisticasDeVisitasID, 
                        Buscable = @new$Buscable
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDeVisitasID, 
                        @new$Buscable, 
                        @old$Estadisticas_P, 
                        @old$EstadisticasDeVisitasID, 
                        @old$Buscable, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdevisitas.AntesDeActualizarEstadisticasDeVisitas',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdevisitas',
        N'TRIGGER', N'InsteadOfUpdateOn_estadisticasdevisitas'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_estadisticastemporales'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_estadisticastemporales]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_estadisticastemporales
   ON dbo.estadisticastemporales
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$EstadisticasID int, 
               @old$EstadisticasID int, 
               @new$FechaInicio datetime2(0), 
               @old$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @new$Contador int, 
               @new$Ranking int, 
               @new$Indice int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.EstadisticasID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.Contador, 
                     i.Ranking, 
                     i.Indice, 
                     d.EstadisticasID, 
                     d.FechaInicio, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$EstadisticasID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$Contador, 
                  @new$Ranking, 
                  @new$Indice, 
                  @old$EstadisticasID, 
                  @old$FechaInicio, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$EstadisticasID <> @old$EstadisticasID
                        SET @new$EstadisticasID = @old$EstadisticasID

                     IF @new$FechaInicio <> @old$FechaInicio
                        SET @new$FechaInicio = @old$FechaInicio

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.estadisticastemporales
                     SET 
                        EstadisticasID = @new$EstadisticasID, 
                        FechaInicio = @new$FechaInicio, 
                        FechaFin = @new$FechaFin, 
                        Contador = @new$Contador, 
                        Ranking = @new$Ranking, 
                        Indice = @new$Indice
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$EstadisticasID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$Contador, 
                        @new$Ranking, 
                        @new$Indice, 
                        @old$EstadisticasID, 
                        @old$FechaInicio, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticastemporales.t_EstadisticasTemporalesModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticastemporales',
        N'TRIGGER', N'InsteadOfUpdateOn_estadisticastemporales'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_estado'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_estado]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_estado
   ON dbo.estado
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$EstadoID int, 
               @old$EstadoID int, 
               @new$Pais int, 
               @old$Pais int, 
               @new$HusoHorarioNormal time, 
               @new$HusoHorarioVerano time

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.EstadoID, 
                     i.Pais, 
                     i.HusoHorarioNormal, 
                     i.HusoHorarioVerano, 
                     d.RegionGeografica_P, 
                     d.EstadoID, 
                     d.Pais, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$EstadoID, 
                  @new$Pais, 
                  @new$HusoHorarioNormal, 
                  @new$HusoHorarioVerano, 
                  @old$RegionGeografica_P, 
                  @old$EstadoID, 
                  @old$Pais, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$EstadoID <> @old$EstadoID
                        SET @new$EstadoID = @old$EstadoID

                     IF @new$Pais <> @old$Pais
                        SET @new$Pais = @old$Pais

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.estado
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        EstadoID = @new$EstadoID, 
                        Pais = @new$Pais, 
                        HusoHorarioNormal = @new$HusoHorarioNormal, 
                        HusoHorarioVerano = @new$HusoHorarioVerano
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$EstadoID, 
                        @new$Pais, 
                        @new$HusoHorarioNormal, 
                        @new$HusoHorarioVerano, 
                        @old$RegionGeografica_P, 
                        @old$EstadoID, 
                        @old$Pais, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estado.t_EstadoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estado',
        N'TRIGGER', N'InsteadOfUpdateOn_estado'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_etiqueta'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_etiqueta]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_etiqueta
   ON dbo.etiqueta
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$EtiquetableID int, 
               @old$EtiquetableID int, 
               @new$PalabraID int, 
               @old$PalabraID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.EtiquetableID, 
                     i.PalabraID, 
                     d.EtiquetableID, 
                     d.PalabraID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$EtiquetableID, 
                  @new$PalabraID, 
                  @old$EtiquetableID, 
                  @old$PalabraID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$EtiquetableID <> @old$EtiquetableID
                        SET @new$EtiquetableID = @old$EtiquetableID

                     IF @new$PalabraID <> @old$PalabraID
                        SET @new$PalabraID = @old$PalabraID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.etiqueta
                     SET 
                        EtiquetableID = @new$EtiquetableID, 
                        PalabraID = @new$PalabraID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$EtiquetableID, 
                        @new$PalabraID, 
                        @old$EtiquetableID, 
                        @old$PalabraID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.etiqueta.t_EtiquetaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'etiqueta',
        N'TRIGGER', N'InsteadOfUpdateOn_etiqueta'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_etiquetable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_etiquetable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_etiquetable
   ON dbo.etiquetable
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$EtiquetableID int, 
               @old$EtiquetableID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.EtiquetableID, d.EtiquetableID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$EtiquetableID, @old$EtiquetableID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$EtiquetableID <> @old$EtiquetableID
                        SET @new$EtiquetableID = @old$EtiquetableID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.etiquetable
                     SET 
                        EtiquetableID = @new$EtiquetableID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$EtiquetableID, @old$EtiquetableID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.etiquetable.t_EtiquetableModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'etiquetable',
        N'TRIGGER', N'InsteadOfUpdateOn_etiquetable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_factura'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_factura]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_factura
   ON dbo.factura
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$FacturaID int, 
               @old$FacturaID int, 
               @new$Cliente nchar(10), 
               @old$Cliente nchar(10), 
               @new$InicioDeMedicion datetime2(0), 
               @old$InicioDeMedicion datetime2(0), 
               @new$FinDeMedicion datetime2(0), 
               @old$FinDeMedicion datetime2(0), 
               @new$Subtotal decimal(10, 0), 
               @new$Impuestos decimal(10, 0), 
               @new$Total decimal(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.FacturaID, 
                     i.Cliente, 
                     i.InicioDeMedicion, 
                     i.FinDeMedicion, 
                     i.Subtotal, 
                     i.Impuestos, 
                     i.Total, 
                     d.Rastreable_P, 
                     d.FacturaID, 
                     d.Cliente, 
                     d.InicioDeMedicion, 
                     d.FinDeMedicion, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$FacturaID, 
                  @new$Cliente, 
                  @new$InicioDeMedicion, 
                  @new$FinDeMedicion, 
                  @new$Subtotal, 
                  @new$Impuestos, 
                  @new$Total, 
                  @old$Rastreable_P, 
                  @old$FacturaID, 
                  @old$Cliente, 
                  @old$InicioDeMedicion, 
                  @old$FinDeMedicion, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$FacturaID <> @old$FacturaID
                        SET @new$FacturaID = @old$FacturaID

                     IF @new$Cliente <> @old$Cliente
                        SET @new$Cliente = @old$Cliente

                     IF @new$InicioDeMedicion <> @old$InicioDeMedicion
                        SET @new$InicioDeMedicion = @old$InicioDeMedicion

                     IF @new$FinDeMedicion <> @old$FinDeMedicion
                        SET @new$FinDeMedicion = @old$FinDeMedicion

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.factura
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        FacturaID = @new$FacturaID, 
                        Cliente = @new$Cliente, 
                        InicioDeMedicion = @new$InicioDeMedicion, 
                        FinDeMedicion = @new$FinDeMedicion, 
                        Subtotal = @new$Subtotal, 
                        Impuestos = @new$Impuestos, 
                        Total = @new$Total
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$FacturaID, 
                        @new$Cliente, 
                        @new$InicioDeMedicion, 
                        @new$FinDeMedicion, 
                        @new$Subtotal, 
                        @new$Impuestos, 
                        @new$Total, 
                        @old$Rastreable_P, 
                        @old$FacturaID, 
                        @old$Cliente, 
                        @old$InicioDeMedicion, 
                        @old$FinDeMedicion, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.factura.t_FacturaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'factura',
        N'TRIGGER', N'InsteadOfUpdateOn_factura'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_gradodeinstruccionobjetivo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_gradodeinstruccionobjetivo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_gradodeinstruccionobjetivo
   ON dbo.gradodeinstruccionobjetivo
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PublicidadID int, 
               @old$PublicidadID int, 
               @new$GradoDeInstruccion nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.GradoDeInstruccion, d.PublicidadID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$GradoDeInstruccion, @old$PublicidadID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$PublicidadID <> @old$PublicidadID
                        SET @new$PublicidadID = @old$PublicidadID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.gradodeinstruccionobjetivo
                     SET 
                        PublicidadID = @new$PublicidadID, 
                        GradoDeInstruccion = @new$GradoDeInstruccion
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$GradoDeInstruccion, @old$PublicidadID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.gradodeinstruccionobjetivo.t_GradoDeInstruccionObjetivoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'gradodeinstruccionobjetivo',
        N'TRIGGER', N'InsteadOfUpdateOn_gradodeinstruccionobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_grupodeedadobjetivo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_grupodeedadobjetivo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_grupodeedadobjetivo
   ON dbo.grupodeedadobjetivo
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PublicidadID int, 
               @old$PublicidadID int, 
               @new$GrupoDeEdad nchar(15)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.GrupoDeEdad, d.PublicidadID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$GrupoDeEdad, @old$PublicidadID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$PublicidadID <> @old$PublicidadID
                        SET @new$PublicidadID = @old$PublicidadID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.grupodeedadobjetivo
                     SET 
                        PublicidadID = @new$PublicidadID, 
                        GrupoDeEdad = @new$GrupoDeEdad
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$GrupoDeEdad, @old$PublicidadID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.grupodeedadobjetivo.t_GrupoDeEdadObjetivoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'grupodeedadobjetivo',
        N'TRIGGER', N'InsteadOfUpdateOn_grupodeedadobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_horariodetrabajo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_horariodetrabajo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_horariodetrabajo
   ON dbo.horariodetrabajo
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$TiendaID int, 
               @old$TiendaID int, 
               @new$Dia nchar(9), 
               @old$Dia nchar(9), 
               @new$Laborable smallint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.Dia, 
                     i.Laborable, 
                     d.TiendaID, 
                     d.Dia, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$Dia, 
                  @new$Laborable, 
                  @old$TiendaID, 
                  @old$Dia, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$TiendaID <> @old$TiendaID
                        SET @new$TiendaID = @old$TiendaID

                     IF @new$Dia <> @old$Dia
                        SET @new$Dia = @old$Dia

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.horariodetrabajo
                     SET 
                        TiendaID = @new$TiendaID, 
                        Dia = @new$Dia, 
                        Laborable = @new$Laborable
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$Dia, 
                        @new$Laborable, 
                        @old$TiendaID, 
                        @old$Dia, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.horariodetrabajo.AntesDeActualizarHorarioDeTrabajo',
        N'SCHEMA', N'dbo',
        N'TABLE', N'horariodetrabajo',
        N'TRIGGER', N'InsteadOfUpdateOn_horariodetrabajo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_interlocutor'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_interlocutor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_interlocutor
   ON dbo.interlocutor
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$InterlocutorID int, 
               @old$InterlocutorID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.InterlocutorID, d.InterlocutorID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$InterlocutorID, @old$InterlocutorID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$InterlocutorID <> @old$InterlocutorID
                        SET @new$InterlocutorID = @old$InterlocutorID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.interlocutor
                     SET 
                        InterlocutorID = @new$InterlocutorID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$InterlocutorID, @old$InterlocutorID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.interlocutor.t_InterlocutorModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'interlocutor',
        N'TRIGGER', N'InsteadOfUpdateOn_interlocutor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_inventario'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_inventario]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_inventario
   ON dbo.inventario
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Cobrable_P int, 
               @old$Cobrable_P int, 
               @new$TiendaID int, 
               @old$TiendaID int, 
               @new$Codigo nchar(15), 
               @old$Codigo nchar(15), 
               @new$Descripcion nvarchar(45), 
               @new$Visibilidad nchar(16), 
               @new$ProductoID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Cobrable_P, 
                     i.TiendaID, 
                     i.Codigo, 
                     i.Descripcion, 
                     i.Visibilidad, 
                     i.ProductoID, 
                     d.Rastreable_P, 
                     d.Cobrable_P, 
                     d.TiendaID, 
                     d.Codigo, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Cobrable_P, 
                  @new$TiendaID, 
                  @new$Codigo, 
                  @new$Descripcion, 
                  @new$Visibilidad, 
                  @new$ProductoID, 
                  @old$Rastreable_P, 
                  @old$Cobrable_P, 
                  @old$TiendaID, 
                  @old$Codigo, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Cobrable_P <> @old$Cobrable_P
                        SET @new$Cobrable_P = @old$Cobrable_P

                     IF @new$TiendaID <> @old$TiendaID
                        SET @new$TiendaID = @old$TiendaID

                     IF @new$Codigo <> @old$Codigo
                        SET @new$Codigo = @old$Codigo

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.inventario
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Cobrable_P = @new$Cobrable_P, 
                        TiendaID = @new$TiendaID, 
                        Codigo = @new$Codigo, 
                        Descripcion = @new$Descripcion, 
                        Visibilidad = @new$Visibilidad, 
                        ProductoID = @new$ProductoID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Cobrable_P, 
                        @new$TiendaID, 
                        @new$Codigo, 
                        @new$Descripcion, 
                        @new$Visibilidad, 
                        @new$ProductoID, 
                        @old$Rastreable_P, 
                        @old$Cobrable_P, 
                        @old$TiendaID, 
                        @old$Codigo, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.inventario.t_InventarioModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'inventario',
        N'TRIGGER', N'InsteadOfUpdateOn_inventario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_mensaje'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_mensaje]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_mensaje
   ON dbo.mensaje
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @old$Etiquetable_P int, 
               @new$MensajeID int, 
               @old$MensajeID int, 
               @new$Remitente int, 
               @old$Remitente int, 
               @new$Destinatario int, 
               @old$Destinatario int, 
               @new$Contenido nvarchar(max), 
               @old$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Etiquetable_P, 
                     i.MensajeID, 
                     i.Remitente, 
                     i.Destinatario, 
                     i.Contenido, 
                     d.Rastreable_P, 
                     d.Etiquetable_P, 
                     d.MensajeID, 
                     d.Remitente, 
                     d.Destinatario, 
                     d.Contenido, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$MensajeID, 
                  @new$Remitente, 
                  @new$Destinatario, 
                  @new$Contenido, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$MensajeID, 
                  @old$Remitente, 
                  @old$Destinatario, 
                  @old$Contenido, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Etiquetable_P <> @old$Etiquetable_P
                        SET @new$Etiquetable_P = @old$Etiquetable_P

                     IF @new$MensajeID <> @old$MensajeID
                        SET @new$MensajeID = @old$MensajeID

                     IF @new$Remitente <> @old$Remitente
                        SET @new$Remitente = @old$Remitente

                     IF @new$Destinatario <> @old$Destinatario
                        SET @new$Destinatario = @old$Destinatario

                     IF @new$Contenido <> @old$Contenido
                        SET @new$Destinatario = CAST(@old$Contenido AS bigint)

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.mensaje
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Etiquetable_P = @new$Etiquetable_P, 
                        MensajeID = @new$MensajeID, 
                        Remitente = @new$Remitente, 
                        Destinatario = @new$Destinatario, 
                        Contenido = @new$Contenido
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$MensajeID, 
                        @new$Remitente, 
                        @new$Destinatario, 
                        @new$Contenido, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$MensajeID, 
                        @old$Remitente, 
                        @old$Destinatario, 
                        @old$Contenido, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.mensaje.t_MensajeModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'mensaje',
        N'TRIGGER', N'InsteadOfUpdateOn_mensaje'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_municipio'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_municipio]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_municipio
   ON dbo.municipio
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$MunicipioID int, 
               @old$MunicipioID int, 
               @new$Estado int, 
               @new$Ciudad int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.MunicipioID, 
                     i.Estado, 
                     i.Ciudad, 
                     d.RegionGeografica_P, 
                     d.MunicipioID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$MunicipioID, 
                  @new$Estado, 
                  @new$Ciudad, 
                  @old$RegionGeografica_P, 
                  @old$MunicipioID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$MunicipioID <> @old$MunicipioID
                        SET @new$MunicipioID = @old$MunicipioID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.municipio
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        MunicipioID = @new$MunicipioID, 
                        Estado = @new$Estado, 
                        Ciudad = @new$Ciudad
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$MunicipioID, 
                        @new$Estado, 
                        @new$Ciudad, 
                        @old$RegionGeografica_P, 
                        @old$MunicipioID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.municipio.t_MunicipioModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'municipio',
        N'TRIGGER', N'InsteadOfUpdateOn_municipio'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_pais'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_pais]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_pais
   ON dbo.pais
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$PaisID int, 
               @old$PaisID int, 
               @new$Continente int, 
               @old$Continente int, 
               @new$Capital int, 
               @old$Capital int, 
               @new$Idioma nchar(10), 
               @old$Idioma nchar(10), 
               @new$MonedaLocal nvarchar(45), 
               @new$MonedaLocal_Dolar decimal(10, 2), 
               @new$PIB decimal(15, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.PaisID, 
                     i.Continente, 
                     i.Capital, 
                     i.Idioma, 
                     i.MonedaLocal, 
                     i.MonedaLocal_Dolar, 
                     i.PIB, 
                     d.RegionGeografica_P, 
                     d.PaisID, 
                     d.Continente, 
                     d.Capital, 
                     d.Idioma, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$PaisID, 
                  @new$Continente, 
                  @new$Capital, 
                  @new$Idioma, 
                  @new$MonedaLocal, 
                  @new$MonedaLocal_Dolar, 
                  @new$PIB, 
                  @old$RegionGeografica_P, 
                  @old$PaisID, 
                  @old$Continente, 
                  @old$Capital, 
                  @old$Idioma, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$PaisID <> @old$PaisID
                        SET @new$PaisID = @old$PaisID

                     IF @new$Continente <> @old$Continente
                        SET @new$Continente = @old$Continente

                     IF @new$Capital <> @old$Capital
                        SET @new$Capital = @old$Capital

                     IF @new$Idioma <> @old$Idioma
                        SET @new$Idioma = @old$Idioma

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.pais
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        PaisID = @new$PaisID, 
                        Continente = @new$Continente, 
                        Capital = @new$Capital, 
                        Idioma = @new$Idioma, 
                        MonedaLocal = @new$MonedaLocal, 
                        MonedaLocal_Dolar = @new$MonedaLocal_Dolar, 
                        PIB = @new$PIB
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$PaisID, 
                        @new$Continente, 
                        @new$Capital, 
                        @new$Idioma, 
                        @new$MonedaLocal, 
                        @new$MonedaLocal_Dolar, 
                        @new$PIB, 
                        @old$RegionGeografica_P, 
                        @old$PaisID, 
                        @old$Continente, 
                        @old$Capital, 
                        @old$Idioma, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.pais.t_PaisModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'pais',
        N'TRIGGER', N'InsteadOfUpdateOn_pais'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_paissubcontinente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_paissubcontinente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_paissubcontinente
   ON dbo.paissubcontinente
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$SubcontinenteID int, 
               @old$SubcontinenteID int, 
               @new$PaisID int, 
               @old$PaisID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.SubcontinenteID, 
                     i.PaisID, 
                     d.SubcontinenteID, 
                     d.PaisID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$SubcontinenteID, 
                  @new$PaisID, 
                  @old$SubcontinenteID, 
                  @old$PaisID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$SubcontinenteID <> @old$SubcontinenteID
                        SET @new$SubcontinenteID = @old$SubcontinenteID

                     IF @new$PaisID <> @old$PaisID
                        SET @new$PaisID = @old$PaisID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.paissubcontinente
                     SET 
                        SubcontinenteID = @new$SubcontinenteID, 
                        PaisID = @new$PaisID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$SubcontinenteID, 
                        @new$PaisID, 
                        @old$SubcontinenteID, 
                        @old$PaisID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.paissubcontinente.t_PaisSubcontinenteModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'paissubcontinente',
        N'TRIGGER', N'InsteadOfUpdateOn_paissubcontinente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_palabra'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_palabra]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_palabra
   ON dbo.palabra
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PalabraID int, 
               @old$PalabraID int, 
               @new$Palabra_Frase nchar(15), 
               @old$Palabra_Frase nchar(15)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.PalabraID, 
                     i.Palabra_Frase, 
                     d.PalabraID, 
                     d.Palabra_Frase, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$PalabraID, 
                  @new$Palabra_Frase, 
                  @old$PalabraID, 
                  @old$Palabra_Frase, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$PalabraID <> @old$PalabraID
                        SET @new$PalabraID = @old$PalabraID

                     IF @new$Palabra_Frase <> @old$Palabra_Frase
                        SET @new$Palabra_Frase = @old$Palabra_Frase

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.palabra
                     SET 
                        PalabraID = @new$PalabraID, 
                        Palabra_Frase = @new$Palabra_Frase
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$PalabraID, 
                        @new$Palabra_Frase, 
                        @old$PalabraID, 
                        @old$Palabra_Frase, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.palabra.t_PalabraModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'palabra',
        N'TRIGGER', N'InsteadOfUpdateOn_palabra'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_parroquia'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_parroquia]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_parroquia
   ON dbo.parroquia
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$ParroquiaID int, 
               @old$ParroquiaID int, 
               @new$CodigoPostal nchar(10), 
               @new$Municipio int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.ParroquiaID, 
                     i.CodigoPostal, 
                     i.Municipio, 
                     d.RegionGeografica_P, 
                     d.ParroquiaID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$ParroquiaID, 
                  @new$CodigoPostal, 
                  @new$Municipio, 
                  @old$RegionGeografica_P, 
                  @old$ParroquiaID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$ParroquiaID <> @old$ParroquiaID
                        SET @new$ParroquiaID = @old$ParroquiaID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.parroquia
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        ParroquiaID = @new$ParroquiaID, 
                        CodigoPostal = @new$CodigoPostal, 
                        Municipio = @new$Municipio
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$ParroquiaID, 
                        @new$CodigoPostal, 
                        @new$Municipio, 
                        @old$RegionGeografica_P, 
                        @old$ParroquiaID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.parroquia.t_ParroquiaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'parroquia',
        N'TRIGGER', N'InsteadOfUpdateOn_parroquia'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_patrocinante'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_patrocinante]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_patrocinante
   ON dbo.patrocinante
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Cliente_P nchar(10), 
               @old$Cliente_P nchar(10), 
               @new$PatrocinanteID int, 
               @old$PatrocinanteID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Cliente_P, 
                     i.PatrocinanteID, 
                     d.Cliente_P, 
                     d.PatrocinanteID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Cliente_P, 
                  @new$PatrocinanteID, 
                  @old$Cliente_P, 
                  @old$PatrocinanteID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Cliente_P <> @old$Cliente_P
                        SET @new$Cliente_P = @old$Cliente_P

                     IF @new$PatrocinanteID <> @old$PatrocinanteID
                        SET @new$PatrocinanteID = @old$PatrocinanteID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.patrocinante
                     SET 
                        Cliente_P = @new$Cliente_P, 
                        PatrocinanteID = @new$PatrocinanteID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Cliente_P, 
                        @new$PatrocinanteID, 
                        @old$Cliente_P, 
                        @old$PatrocinanteID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.patrocinante.AntesDeModificarPatrocinante',
        N'SCHEMA', N'dbo',
        N'TABLE', N'patrocinante',
        N'TRIGGER', N'InsteadOfUpdateOn_patrocinante'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_preciocantidad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_preciocantidad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_preciocantidad
   ON dbo.preciocantidad
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$TiendaID int, 
               @old$TiendaID int, 
               @new$Codigo nchar(15), 
               @old$Codigo nchar(15), 
               @new$FechaInicio datetime2(0), 
               @old$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @new$Precio decimal(10, 2), 
               @new$Cantidad int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.Codigo, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.Precio, 
                     i.Cantidad, 
                     d.TiendaID, 
                     d.Codigo, 
                     d.FechaInicio, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$Codigo, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$Precio, 
                  @new$Cantidad, 
                  @old$TiendaID, 
                  @old$Codigo, 
                  @old$FechaInicio, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$TiendaID <> @old$TiendaID
                        SET @new$TiendaID = @old$TiendaID

                     IF @new$Codigo <> @old$Codigo
                        SET @new$Codigo = @old$Codigo

                     IF @new$FechaInicio <> @old$FechaInicio
                        SET @new$FechaInicio = @old$FechaInicio

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.preciocantidad
                     SET 
                        TiendaID = @new$TiendaID, 
                        Codigo = @new$Codigo, 
                        FechaInicio = @new$FechaInicio, 
                        FechaFin = @new$FechaFin, 
                        Precio = @new$Precio, 
                        Cantidad = @new$Cantidad
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$Codigo, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$Precio, 
                        @new$Cantidad, 
                        @old$TiendaID, 
                        @old$Codigo, 
                        @old$FechaInicio, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.preciocantidad.t_PrecioCantidadModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'preciocantidad',
        N'TRIGGER', N'InsteadOfUpdateOn_preciocantidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_producto'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_producto]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_producto
   ON dbo.producto
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Describible_P int, 
               @old$Describible_P int, 
               @new$Buscable_P int, 
               @old$Buscable_P int, 
               @new$CalificableSeguible_P int, 
               @old$CalificableSeguible_P int, 
               @new$ProductoID int, 
               @old$ProductoID int, 
               @new$TipoDeCodigo nchar(7), 
               @old$TipoDeCodigo nchar(7), 
               @new$Codigo nchar(15), 
               @old$Codigo nchar(15), 
               @new$Estatus nchar(9), 
               @new$Fabricante nvarchar(45), 
               @old$Fabricante nvarchar(45), 
               @new$Modelo nvarchar(45), 
               @new$Nombre nvarchar(45), 
               @old$Nombre nvarchar(45), 
               @new$Categoria int, 
               @new$DebutEnElMercado date, 
               @new$Largo float(24), 
               @new$Ancho float(24), 
               @new$Alto float(24), 
               @new$Peso float(24), 
               @new$PaisDeOrigen int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Describible_P, 
                     i.Buscable_P, 
                     i.CalificableSeguible_P, 
                     i.ProductoID, 
                     i.TipoDeCodigo, 
                     i.Codigo, 
                     i.Estatus, 
                     i.Fabricante, 
                     i.Modelo, 
                     i.Nombre, 
                     i.Categoria, 
                     i.DebutEnElMercado, 
                     i.Largo, 
                     i.Ancho, 
                     i.Alto, 
                     i.Peso, 
                     i.PaisDeOrigen, 
                     d.Rastreable_P, 
                     d.Describible_P, 
                     d.Buscable_P, 
                     d.CalificableSeguible_P, 
                     d.ProductoID, 
                     d.TipoDeCodigo, 
                     d.Codigo, 
                     d.Fabricante, 
                     d.Nombre, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Describible_P, 
                  @new$Buscable_P, 
                  @new$CalificableSeguible_P, 
                  @new$ProductoID, 
                  @new$TipoDeCodigo, 
                  @new$Codigo, 
                  @new$Estatus, 
                  @new$Fabricante, 
                  @new$Modelo, 
                  @new$Nombre, 
                  @new$Categoria, 
                  @new$DebutEnElMercado, 
                  @new$Largo, 
                  @new$Ancho, 
                  @new$Alto, 
                  @new$Peso, 
                  @new$PaisDeOrigen, 
                  @old$Rastreable_P, 
                  @old$Describible_P, 
                  @old$Buscable_P, 
                  @old$CalificableSeguible_P, 
                  @old$ProductoID, 
                  @old$TipoDeCodigo, 
                  @old$Codigo, 
                  @old$Fabricante, 
                  @old$Nombre, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Describible_P <> @old$Describible_P
                        SET @new$Describible_P = @old$Describible_P

                     IF @new$Buscable_P <> @old$Buscable_P
                        SET @new$Buscable_P = @old$Buscable_P

                     IF @new$CalificableSeguible_P <> @old$CalificableSeguible_P
                        SET @new$CalificableSeguible_P = @old$CalificableSeguible_P

                     IF @new$ProductoID <> @old$ProductoID
                        SET @new$ProductoID = @old$ProductoID

                     IF @new$TipoDeCodigo <> @old$TipoDeCodigo
                        SET @new$TipoDeCodigo = @old$TipoDeCodigo

                     IF @new$Codigo <> @old$Codigo
                        SET @new$Codigo = @old$Codigo

                     IF @new$Fabricante <> @old$Fabricante
                        SET @new$Fabricante = @old$Fabricante

                     IF @new$Nombre <> @old$Nombre
                        SET @new$Nombre = @old$Nombre

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.producto
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Describible_P = @new$Describible_P, 
                        Buscable_P = @new$Buscable_P, 
                        CalificableSeguible_P = @new$CalificableSeguible_P, 
                        ProductoID = @new$ProductoID, 
                        TipoDeCodigo = @new$TipoDeCodigo, 
                        Codigo = @new$Codigo, 
                        Estatus = @new$Estatus, 
                        Fabricante = @new$Fabricante, 
                        Modelo = @new$Modelo, 
                        Nombre = @new$Nombre, 
                        Categoria = @new$Categoria, 
                        DebutEnElMercado = @new$DebutEnElMercado, 
                        Largo = @new$Largo, 
                        Ancho = @new$Ancho, 
                        Alto = @new$Alto, 
                        Peso = @new$Peso, 
                        PaisDeOrigen = @new$PaisDeOrigen
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Describible_P, 
                        @new$Buscable_P, 
                        @new$CalificableSeguible_P, 
                        @new$ProductoID, 
                        @new$TipoDeCodigo, 
                        @new$Codigo, 
                        @new$Estatus, 
                        @new$Fabricante, 
                        @new$Modelo, 
                        @new$Nombre, 
                        @new$Categoria, 
                        @new$DebutEnElMercado, 
                        @new$Largo, 
                        @new$Ancho, 
                        @new$Alto, 
                        @new$Peso, 
                        @new$PaisDeOrigen, 
                        @old$Rastreable_P, 
                        @old$Describible_P, 
                        @old$Buscable_P, 
                        @old$CalificableSeguible_P, 
                        @old$ProductoID, 
                        @old$TipoDeCodigo, 
                        @old$Codigo, 
                        @old$Fabricante, 
                        @old$Nombre, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.producto.t_ProductoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'producto',
        N'TRIGGER', N'InsteadOfUpdateOn_producto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_publicidad'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_publicidad]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_publicidad
   ON dbo.publicidad
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Buscable_P int, 
               @old$Buscable_P int, 
               @new$Describible_P int, 
               @old$Describible_P int, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @old$Etiquetable_P int, 
               @new$Cobrable_P int, 
               @old$Cobrable_P int, 
               @new$PublicidadID int, 
               @old$PublicidadID int, 
               @new$Patrocinante int, 
               @old$Patrocinante int, 
               @new$TamanoDePoblacionObjetivo int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Buscable_P, 
                     i.Describible_P, 
                     i.Rastreable_P, 
                     i.Etiquetable_P, 
                     i.Cobrable_P, 
                     i.PublicidadID, 
                     i.Patrocinante, 
                     i.TamanoDePoblacionObjetivo, 
                     d.Buscable_P, 
                     d.Describible_P, 
                     d.Rastreable_P, 
                     d.Etiquetable_P, 
                     d.Cobrable_P, 
                     d.PublicidadID, 
                     d.Patrocinante, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Buscable_P, 
                  @new$Describible_P, 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$Cobrable_P, 
                  @new$PublicidadID, 
                  @new$Patrocinante, 
                  @new$TamanoDePoblacionObjetivo, 
                  @old$Buscable_P, 
                  @old$Describible_P, 
                  @old$Rastreable_P, 
                  @old$Etiquetable_P, 
                  @old$Cobrable_P, 
                  @old$PublicidadID, 
                  @old$Patrocinante, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Buscable_P <> @old$Buscable_P
                        SET @new$Buscable_P = @old$Buscable_P

                     IF @new$Describible_P <> @old$Describible_P
                        SET @new$Describible_P = @old$Describible_P

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Etiquetable_P <> @old$Etiquetable_P
                        SET @new$Etiquetable_P = @old$Etiquetable_P

                     IF @new$Cobrable_P <> @old$Cobrable_P
                        SET @new$Cobrable_P = @old$Cobrable_P

                     IF @new$PublicidadID <> @old$PublicidadID
                        SET @new$PublicidadID = @old$PublicidadID

                     IF @new$Patrocinante <> @old$Patrocinante
                        SET @new$Patrocinante = @old$Patrocinante

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.publicidad
                     SET 
                        Buscable_P = @new$Buscable_P, 
                        Describible_P = @new$Describible_P, 
                        Rastreable_P = @new$Rastreable_P, 
                        Etiquetable_P = @new$Etiquetable_P, 
                        Cobrable_P = @new$Cobrable_P, 
                        PublicidadID = @new$PublicidadID, 
                        Patrocinante = @new$Patrocinante, 
                        TamanoDePoblacionObjetivo = @new$TamanoDePoblacionObjetivo
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Buscable_P, 
                        @new$Describible_P, 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$Cobrable_P, 
                        @new$PublicidadID, 
                        @new$Patrocinante, 
                        @new$TamanoDePoblacionObjetivo, 
                        @old$Buscable_P, 
                        @old$Describible_P, 
                        @old$Rastreable_P, 
                        @old$Etiquetable_P, 
                        @old$Cobrable_P, 
                        @old$PublicidadID, 
                        @old$Patrocinante, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.publicidad.t_PublicidadModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'publicidad',
        N'TRIGGER', N'InsteadOfUpdateOn_publicidad'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_punto'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_punto]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_punto
   ON dbo.punto
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PuntoID int, 
               @old$PuntoID int, 
               @new$Latitud decimal(9, 6), 
               @old$Latitud decimal(9, 6), 
               @new$Longitud decimal(9, 6), 
               @old$Longitud decimal(9, 6)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.PuntoID, 
                     i.Latitud, 
                     i.Longitud, 
                     d.PuntoID, 
                     d.Latitud, 
                     d.Longitud, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$PuntoID, 
                  @new$Latitud, 
                  @new$Longitud, 
                  @old$PuntoID, 
                  @old$Latitud, 
                  @old$Longitud, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$PuntoID <> @old$PuntoID
                        SET @new$PuntoID = @old$PuntoID

                     IF @new$Latitud <> @old$Latitud
                        SET @new$Latitud = @old$Latitud

                     IF @new$Longitud <> @old$Longitud
                        SET @new$Longitud = @old$Longitud

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.punto
                     SET 
                        PuntoID = @new$PuntoID, 
                        Latitud = @new$Latitud, 
                        Longitud = @new$Longitud
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$PuntoID, 
                        @new$Latitud, 
                        @new$Longitud, 
                        @old$PuntoID, 
                        @old$Latitud, 
                        @old$Longitud, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.punto.t_PuntoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'punto',
        N'TRIGGER', N'InsteadOfUpdateOn_punto'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_puntodecroquis'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_puntodecroquis]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_puntodecroquis
   ON dbo.puntodecroquis
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$CroquisID int, 
               @old$CroquisID int, 
               @new$PuntoID int, 
               @old$PuntoID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.CroquisID, 
                     i.PuntoID, 
                     d.CroquisID, 
                     d.PuntoID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$CroquisID, 
                  @new$PuntoID, 
                  @old$CroquisID, 
                  @old$PuntoID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$CroquisID <> @old$CroquisID
                        SET @new$CroquisID = @old$CroquisID

                     IF @new$PuntoID <> @old$PuntoID
                        SET @new$PuntoID = @old$PuntoID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.puntodecroquis
                     SET 
                        CroquisID = @new$CroquisID, 
                        PuntoID = @new$PuntoID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$CroquisID, 
                        @new$PuntoID, 
                        @old$CroquisID, 
                        @old$PuntoID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.puntodecroquis.t_PuntoDeCroquisModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'puntodecroquis',
        N'TRIGGER', N'InsteadOfUpdateOn_puntodecroquis'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_rastreable'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_rastreable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_rastreable
   ON dbo.rastreable
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RastreableID int, 
               @old$RastreableID int, 
               @new$FechaDeCreacion datetime2(0), 
               @old$FechaDeCreacion datetime2(0), 
               @new$CreadoPor int, 
               @old$CreadoPor int, 
               @new$FechaDeModificacion datetime2(0), 
               @new$ModificadoPor int, 
               @new$FechaDeEliminacion datetime2(0), 
               @new$EliminadoPor int, 
               @new$FechaDeAcceso datetime2(0), 
               @new$AccesadoPor int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RastreableID, 
                     i.FechaDeCreacion, 
                     i.CreadoPor, 
                     i.FechaDeModificacion, 
                     i.ModificadoPor, 
                     i.FechaDeEliminacion, 
                     i.EliminadoPor, 
                     i.FechaDeAcceso, 
                     i.AccesadoPor, 
                     d.RastreableID, 
                     d.FechaDeCreacion, 
                     d.CreadoPor, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RastreableID, 
                  @new$FechaDeCreacion, 
                  @new$CreadoPor, 
                  @new$FechaDeModificacion, 
                  @new$ModificadoPor, 
                  @new$FechaDeEliminacion, 
                  @new$EliminadoPor, 
                  @new$FechaDeAcceso, 
                  @new$AccesadoPor, 
                  @old$RastreableID, 
                  @old$FechaDeCreacion, 
                  @old$CreadoPor, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RastreableID <> @old$RastreableID
                        SET @new$RastreableID = @old$RastreableID

                     IF @new$FechaDeCreacion <> @old$FechaDeCreacion
                        SET @new$FechaDeCreacion = @old$FechaDeCreacion

                     IF @new$CreadoPor <> @old$CreadoPor
                        SET @new$CreadoPor = @old$CreadoPor

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.rastreable
                     SET 
                        RastreableID = @new$RastreableID, 
                        FechaDeCreacion = @new$FechaDeCreacion, 
                        CreadoPor = @new$CreadoPor, 
                        FechaDeModificacion = @new$FechaDeModificacion, 
                        ModificadoPor = @new$ModificadoPor, 
                        FechaDeEliminacion = @new$FechaDeEliminacion, 
                        EliminadoPor = @new$EliminadoPor, 
                        FechaDeAcceso = @new$FechaDeAcceso, 
                        AccesadoPor = @new$AccesadoPor
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RastreableID, 
                        @new$FechaDeCreacion, 
                        @new$CreadoPor, 
                        @new$FechaDeModificacion, 
                        @new$ModificadoPor, 
                        @new$FechaDeEliminacion, 
                        @new$EliminadoPor, 
                        @new$FechaDeAcceso, 
                        @new$AccesadoPor, 
                        @old$RastreableID, 
                        @old$FechaDeCreacion, 
                        @old$CreadoPor, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.rastreable.t_RastreableModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'rastreable',
        N'TRIGGER', N'InsteadOfUpdateOn_rastreable'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_regiongeografica'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_regiongeografica]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_regiongeografica
   ON dbo.regiongeografica
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$Dibujable_P int, 
               @old$Dibujable_P int, 
               @new$RegionGeograficaID int, 
               @old$RegionGeograficaID int, 
               @new$Nombre nvarchar(45), 
               @new$Poblacion bigint, 
               @new$Consumidores_Poblacion float(24), 
               @new$Tiendas_Poblacion float(24), 
               @new$Tiendas_Consumidores float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.Dibujable_P, 
                     i.RegionGeograficaID, 
                     i.Nombre, 
                     i.Poblacion, 
                     i.Consumidores_Poblacion, 
                     i.Tiendas_Poblacion, 
                     i.Tiendas_Consumidores, 
                     d.Rastreable_P, 
                     d.Dibujable_P, 
                     d.RegionGeograficaID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Dibujable_P, 
                  @new$RegionGeograficaID, 
                  @new$Nombre, 
                  @new$Poblacion, 
                  @new$Consumidores_Poblacion, 
                  @new$Tiendas_Poblacion, 
                  @new$Tiendas_Consumidores, 
                  @old$Rastreable_P, 
                  @old$Dibujable_P, 
                  @old$RegionGeograficaID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$Dibujable_P <> @old$Dibujable_P
                        SET @new$Dibujable_P = @old$Dibujable_P

                     IF @new$RegionGeograficaID <> @old$RegionGeograficaID
                        SET @new$RegionGeograficaID = @old$RegionGeograficaID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.regiongeografica
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        Dibujable_P = @new$Dibujable_P, 
                        RegionGeograficaID = @new$RegionGeograficaID, 
                        Nombre = @new$Nombre, 
                        Poblacion = @new$Poblacion, 
                        Consumidores_Poblacion = @new$Consumidores_Poblacion, 
                        Tiendas_Poblacion = @new$Tiendas_Poblacion, 
                        Tiendas_Consumidores = @new$Tiendas_Consumidores
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Dibujable_P, 
                        @new$RegionGeograficaID, 
                        @new$Nombre, 
                        @new$Poblacion, 
                        @new$Consumidores_Poblacion, 
                        @new$Tiendas_Poblacion, 
                        @new$Tiendas_Consumidores, 
                        @old$Rastreable_P, 
                        @old$Dibujable_P, 
                        @old$RegionGeograficaID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeografica.t_RegionGeograficaModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeografica',
        N'TRIGGER', N'InsteadOfUpdateOn_regiongeografica'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_regiongeograficaobjetivo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_regiongeograficaobjetivo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_regiongeograficaobjetivo
   ON dbo.regiongeograficaobjetivo
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PublicidadID int, 
               @old$PublicidadID int, 
               @new$RegionGeograficaID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.RegionGeograficaID, d.PublicidadID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$RegionGeograficaID, @old$PublicidadID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$PublicidadID <> @old$PublicidadID
                        SET @new$PublicidadID = @old$PublicidadID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.regiongeograficaobjetivo
                     SET 
                        PublicidadID = @new$PublicidadID, 
                        RegionGeograficaID = @new$RegionGeograficaID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$RegionGeograficaID, @old$PublicidadID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeograficaobjetivo.t_RegionGeograficaObjetivoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeograficaobjetivo',
        N'TRIGGER', N'InsteadOfUpdateOn_regiongeograficaobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_registro'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_registro]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_registro
   ON dbo.registro
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegistroID int, 
               @old$RegistroID int, 
               @new$FechaHora datetime2(0), 
               @old$FechaHora datetime2(0), 
               @new$ActorActivo int, 
               @old$ActorActivo int, 
               @new$ActorPasivo int, 
               @old$ActorPasivo int, 
               @new$Accion nchar(13), 
               @old$Accion nchar(13), 
               @new$Parametros nvarchar(max), 
               @old$Parametros nvarchar(max), 
               @new$CodigoDeError nchar(40), 
               @old$CodigoDeError nchar(40)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegistroID, 
                     i.FechaHora, 
                     i.ActorActivo, 
                     i.ActorPasivo, 
                     i.Accion, 
                     i.Parametros, 
                     i.CodigoDeError, 
                     d.RegistroID, 
                     d.FechaHora, 
                     d.ActorActivo, 
                     d.ActorPasivo, 
                     d.Accion, 
                     d.Parametros, 
                     d.CodigoDeError, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegistroID, 
                  @new$FechaHora, 
                  @new$ActorActivo, 
                  @new$ActorPasivo, 
                  @new$Accion, 
                  @new$Parametros, 
                  @new$CodigoDeError, 
                  @old$RegistroID, 
                  @old$FechaHora, 
                  @old$ActorActivo, 
                  @old$ActorPasivo, 
                  @old$Accion, 
                  @old$Parametros, 
                  @old$CodigoDeError, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegistroID <> @old$RegistroID
                        SET @new$RegistroID = @old$RegistroID

                     IF @new$FechaHora <> @old$FechaHora
                        SET @new$FechaHora = @old$FechaHora

                     IF @new$ActorActivo <> @old$ActorActivo
                        SET @new$ActorActivo = @old$ActorActivo

                     IF @new$ActorPasivo <> @old$ActorPasivo
                        SET @new$ActorPasivo = @old$ActorPasivo

                     IF @new$Accion <> @old$Accion
                        SET @new$Accion = @old$Accion

                     IF @new$Parametros <> @old$Parametros
                        SET @new$Parametros = @old$Parametros

                     IF @new$CodigoDeError <> @old$CodigoDeError
                        SET @new$CodigoDeError = @old$CodigoDeError

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.registro
                     SET 
                        RegistroID = @new$RegistroID, 
                        FechaHora = @new$FechaHora, 
                        ActorActivo = @new$ActorActivo, 
                        ActorPasivo = @new$ActorPasivo, 
                        Accion = @new$Accion, 
                        Parametros = @new$Parametros, 
                        CodigoDeError = @new$CodigoDeError
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegistroID, 
                        @new$FechaHora, 
                        @new$ActorActivo, 
                        @new$ActorPasivo, 
                        @new$Accion, 
                        @new$Parametros, 
                        @new$CodigoDeError, 
                        @old$RegistroID, 
                        @old$FechaHora, 
                        @old$ActorActivo, 
                        @old$ActorPasivo, 
                        @old$Accion, 
                        @old$Parametros, 
                        @old$CodigoDeError, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.registro.AntesDeActualizarRegistro',
        N'SCHEMA', N'dbo',
        N'TABLE', N'registro',
        N'TRIGGER', N'InsteadOfUpdateOn_registro'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_relaciondepalabras'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_relaciondepalabras]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_relaciondepalabras
   ON dbo.relaciondepalabras
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Palabra1ID int, 
               @new$Palabra2ID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.Palabra1ID, i.Palabra2ID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Palabra1ID, @new$Palabra2ID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* DML-operation emulation*/
                  UPDATE dbo.relaciondepalabras
                     SET 
                        Palabra1ID = @new$Palabra1ID, 
                        Palabra2ID = @new$Palabra2ID
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Palabra1ID, @new$Palabra2ID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.relaciondepalabras.t_RelacionDePalabrasModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'relaciondepalabras',
        N'TRIGGER', N'InsteadOfUpdateOn_relaciondepalabras'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_resultadodebusqueda'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_resultadodebusqueda]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_resultadodebusqueda
   ON dbo.resultadodebusqueda
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$BusquedaID int, 
               @old$BusquedaID int, 
               @new$BuscableID int, 
               @old$BuscableID int, 
               @new$Visitado smallint, 
               @new$Relevancia float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.BusquedaID, 
                     i.BuscableID, 
                     i.Visitado, 
                     i.Relevancia, 
                     d.BusquedaID, 
                     d.BuscableID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$BusquedaID, 
                  @new$BuscableID, 
                  @new$Visitado, 
                  @new$Relevancia, 
                  @old$BusquedaID, 
                  @old$BuscableID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$BusquedaID <> @old$BusquedaID
                        SET @new$BusquedaID = @old$BusquedaID

                     IF @new$BuscableID <> @old$BuscableID
                        SET @new$BuscableID = @old$BuscableID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.resultadodebusqueda
                     SET 
                        BusquedaID = @new$BusquedaID, 
                        BuscableID = @new$BuscableID, 
                        Visitado = @new$Visitado, 
                        Relevancia = @new$Relevancia
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$BusquedaID, 
                        @new$BuscableID, 
                        @new$Visitado, 
                        @new$Relevancia, 
                        @old$BusquedaID, 
                        @old$BuscableID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.resultadodebusqueda.AntesDeActualizarResultadoDeBusqueda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'resultadodebusqueda',
        N'TRIGGER', N'InsteadOfUpdateOn_resultadodebusqueda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_seguidor'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_seguidor]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_seguidor
   ON dbo.seguidor
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Rastreable_P int, 
               @old$Rastreable_P int, 
               @new$ConsumidorID int, 
               @old$ConsumidorID int, 
               @new$CalificableSeguibleID int, 
               @old$CalificableSeguibleID int, 
               @new$AvisarSi nchar(40)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.ConsumidorID, 
                     i.CalificableSeguibleID, 
                     i.AvisarSi, 
                     d.Rastreable_P, 
                     d.ConsumidorID, 
                     d.CalificableSeguibleID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$ConsumidorID, 
                  @new$CalificableSeguibleID, 
                  @new$AvisarSi, 
                  @old$Rastreable_P, 
                  @old$ConsumidorID, 
                  @old$CalificableSeguibleID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Rastreable_P <> @old$Rastreable_P
                        SET @new$Rastreable_P = @old$Rastreable_P

                     IF @new$ConsumidorID <> @old$ConsumidorID
                        SET @new$ConsumidorID = @old$ConsumidorID

                     IF @new$CalificableSeguibleID <> @old$CalificableSeguibleID
                        SET @new$CalificableSeguibleID = @old$CalificableSeguibleID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.seguidor
                     SET 
                        Rastreable_P = @new$Rastreable_P, 
                        ConsumidorID = @new$ConsumidorID, 
                        CalificableSeguibleID = @new$CalificableSeguibleID, 
                        AvisarSi = @new$AvisarSi
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$ConsumidorID, 
                        @new$CalificableSeguibleID, 
                        @new$AvisarSi, 
                        @old$Rastreable_P, 
                        @old$ConsumidorID, 
                        @old$CalificableSeguibleID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.seguidor.t_SeguidorModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'seguidor',
        N'TRIGGER', N'InsteadOfUpdateOn_seguidor'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_serviciovendido'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_serviciovendido]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_serviciovendido
   ON dbo.serviciovendido
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$FacturaID int, 
               @old$FacturaID int, 
               @new$CobrableID int, 
               @old$CobrableID int, 
               @new$Acumulado decimal(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.FacturaID, 
                     i.CobrableID, 
                     i.Acumulado, 
                     d.FacturaID, 
                     d.CobrableID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$FacturaID, 
                  @new$CobrableID, 
                  @new$Acumulado, 
                  @old$FacturaID, 
                  @old$CobrableID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$FacturaID <> @old$FacturaID
                        SET @new$FacturaID = @old$FacturaID

                     IF @new$CobrableID <> @old$CobrableID
                        SET @new$CobrableID = @old$CobrableID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.serviciovendido
                     SET 
                        FacturaID = @new$FacturaID, 
                        CobrableID = @new$CobrableID, 
                        Acumulado = @new$Acumulado
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$FacturaID, 
                        @new$CobrableID, 
                        @new$Acumulado, 
                        @old$FacturaID, 
                        @old$CobrableID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.serviciovendido.t_ServicioVendidoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'serviciovendido',
        N'TRIGGER', N'InsteadOfUpdateOn_serviciovendido'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_sexoobjetivo'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_sexoobjetivo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_sexoobjetivo
   ON dbo.sexoobjetivo
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$PublicidadID int, 
               @old$PublicidadID int, 
               @new$Sexo nchar(6)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.Sexo, d.PublicidadID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$Sexo, @old$PublicidadID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$PublicidadID <> @old$PublicidadID
                        SET @new$PublicidadID = @old$PublicidadID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.sexoobjetivo
                     SET 
                        PublicidadID = @new$PublicidadID, 
                        Sexo = @new$Sexo
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$Sexo, @old$PublicidadID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.sexoobjetivo.t_SexoObjetivoModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'sexoobjetivo',
        N'TRIGGER', N'InsteadOfUpdateOn_sexoobjetivo'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_subcontinente'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_subcontinente]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_subcontinente
   ON dbo.subcontinente
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeografica_P int, 
               @old$RegionGeografica_P int, 
               @new$SubcontinenteID int, 
               @old$SubcontinenteID int, 
               @new$Continente int, 
               @old$Continente int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.SubcontinenteID, 
                     i.Continente, 
                     d.RegionGeografica_P, 
                     d.SubcontinenteID, 
                     d.Continente, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$SubcontinenteID, 
                  @new$Continente, 
                  @old$RegionGeografica_P, 
                  @old$SubcontinenteID, 
                  @old$Continente, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeografica_P <> @old$RegionGeografica_P
                        SET @new$RegionGeografica_P = @old$RegionGeografica_P

                     IF @new$SubcontinenteID <> @old$SubcontinenteID
                        SET @new$SubcontinenteID = @old$SubcontinenteID

                     IF @new$Continente <> @old$Continente
                        SET @new$Continente = @old$Continente

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.subcontinente
                     SET 
                        RegionGeografica_P = @new$RegionGeografica_P, 
                        SubcontinenteID = @new$SubcontinenteID, 
                        Continente = @new$Continente
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$SubcontinenteID, 
                        @new$Continente, 
                        @old$RegionGeografica_P, 
                        @old$SubcontinenteID, 
                        @old$Continente, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.subcontinente.t_SubcontinenteModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'subcontinente',
        N'TRIGGER', N'InsteadOfUpdateOn_subcontinente'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_tamano'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_tamano]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_tamano
   ON dbo.tamano
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$TiendaID int, 
               @old$TiendaID int, 
               @new$FechaInicio datetime2(0), 
               @old$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @new$NumeroTotalDeProductos int, 
               @new$CantidadTotalDeProductos int, 
               @new$Valor int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.NumeroTotalDeProductos, 
                     i.CantidadTotalDeProductos, 
                     i.Valor, 
                     d.TiendaID, 
                     d.FechaInicio, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$NumeroTotalDeProductos, 
                  @new$CantidadTotalDeProductos, 
                  @new$Valor, 
                  @old$TiendaID, 
                  @old$FechaInicio, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$TiendaID <> @old$TiendaID
                        SET @new$TiendaID = @old$TiendaID

                     IF @new$FechaInicio <> @old$FechaInicio
                        SET @new$FechaInicio = @old$FechaInicio

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.tamano
                     SET 
                        TiendaID = @new$TiendaID, 
                        FechaInicio = @new$FechaInicio, 
                        FechaFin = @new$FechaFin, 
                        NumeroTotalDeProductos = @new$NumeroTotalDeProductos, 
                        CantidadTotalDeProductos = @new$CantidadTotalDeProductos, 
                        Valor = @new$Valor
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$NumeroTotalDeProductos, 
                        @new$CantidadTotalDeProductos, 
                        @new$Valor, 
                        @old$TiendaID, 
                        @old$FechaInicio, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tamano.AntesDeActualizarTamano',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tamano',
        N'TRIGGER', N'InsteadOfUpdateOn_tamano'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_tienda'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_tienda]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_tienda
   ON dbo.tienda
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$Buscable_P int, 
               @old$Buscable_P int, 
               @new$Cliente_P nchar(10), 
               @old$Cliente_P nchar(10), 
               @new$CalificableSeguible_P int, 
               @old$CalificableSeguible_P int, 
               @new$Interlocutor_P int, 
               @old$Interlocutor_P int, 
               @new$Dibujable_P int, 
               @old$Dibujable_P int, 
               @new$TiendaID int, 
               @old$TiendaID int, 
               @new$Abierto smallint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Buscable_P, 
                     i.Cliente_P, 
                     i.CalificableSeguible_P, 
                     i.Interlocutor_P, 
                     i.Dibujable_P, 
                     i.TiendaID, 
                     i.Abierto, 
                     d.Buscable_P, 
                     d.Cliente_P, 
                     d.CalificableSeguible_P, 
                     d.Interlocutor_P, 
                     d.Dibujable_P, 
                     d.TiendaID, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Buscable_P, 
                  @new$Cliente_P, 
                  @new$CalificableSeguible_P, 
                  @new$Interlocutor_P, 
                  @new$Dibujable_P, 
                  @new$TiendaID, 
                  @new$Abierto, 
                  @old$Buscable_P, 
                  @old$Cliente_P, 
                  @old$CalificableSeguible_P, 
                  @old$Interlocutor_P, 
                  @old$Dibujable_P, 
                  @old$TiendaID, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$Buscable_P <> @old$Buscable_P
                        SET @new$Buscable_P = @old$Buscable_P

                     IF @new$Cliente_P <> @old$Cliente_P
                        SET @new$Cliente_P = @old$Cliente_P

                     IF @new$CalificableSeguible_P <> @old$CalificableSeguible_P
                        SET @new$CalificableSeguible_P = @old$CalificableSeguible_P

                     IF @new$Interlocutor_P <> @old$Interlocutor_P
                        SET @new$Interlocutor_P = @old$Interlocutor_P

                     IF @new$Dibujable_P <> @old$Dibujable_P
                        SET @new$Dibujable_P = @old$Buscable_P

                     IF @new$TiendaID <> @old$TiendaID
                        SET @new$TiendaID = @old$TiendaID

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.tienda
                     SET 
                        Buscable_P = @new$Buscable_P, 
                        Cliente_P = @new$Cliente_P, 
                        CalificableSeguible_P = @new$CalificableSeguible_P, 
                        Interlocutor_P = @new$Interlocutor_P, 
                        Dibujable_P = @new$Dibujable_P, 
                        TiendaID = @new$TiendaID, 
                        Abierto = @new$Abierto
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Buscable_P, 
                        @new$Cliente_P, 
                        @new$CalificableSeguible_P, 
                        @new$Interlocutor_P, 
                        @new$Dibujable_P, 
                        @new$TiendaID, 
                        @new$Abierto, 
                        @old$Buscable_P, 
                        @old$Cliente_P, 
                        @old$CalificableSeguible_P, 
                        @old$Interlocutor_P, 
                        @old$Dibujable_P, 
                        @old$TiendaID, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tienda.AntesDeActualizarTienda',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tienda',
        N'TRIGGER', N'InsteadOfUpdateOn_tienda'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_tiendasconsumidores'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_tiendasconsumidores]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_tiendasconsumidores
   ON dbo.tiendasconsumidores
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$RegionGeograficaID int, 
               @old$RegionGeograficaID int, 
               @new$FechaInicio datetime2(0), 
               @old$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @new$NumeroDeConsumidores bigint, 
               @new$NumeroDeTiendas bigint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeograficaID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.NumeroDeConsumidores, 
                     i.NumeroDeTiendas, 
                     d.RegionGeograficaID, 
                     d.FechaInicio, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeograficaID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$NumeroDeConsumidores, 
                  @new$NumeroDeTiendas, 
                  @old$RegionGeograficaID, 
                  @old$FechaInicio, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$RegionGeograficaID <> @old$RegionGeograficaID
                        SET @new$RegionGeograficaID = @old$RegionGeograficaID

                     IF @new$FechaInicio <> @old$FechaInicio
                        SET @new$FechaInicio = @old$FechaInicio

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.tiendasconsumidores
                     SET 
                        RegionGeograficaID = @new$RegionGeograficaID, 
                        FechaInicio = @new$FechaInicio, 
                        FechaFin = @new$FechaFin, 
                        NumeroDeConsumidores = @new$NumeroDeConsumidores, 
                        NumeroDeTiendas = @new$NumeroDeTiendas
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeograficaID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$NumeroDeConsumidores, 
                        @new$NumeroDeTiendas, 
                        @old$RegionGeograficaID, 
                        @old$FechaInicio, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tiendasconsumidores.t_TiendasConsumidoresModificarAntes',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tiendasconsumidores',
        N'TRIGGER', N'InsteadOfUpdateOn_tiendasconsumidores'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_turno'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_turno]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_turno
   ON dbo.turno
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$TiendaID int, 
               @old$TiendaID int, 
               @new$Dia nchar(9), 
               @old$Dia nchar(9), 
               @new$HoraDeApertura time, 
               @new$HoraDeCierre time

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.Dia, 
                     i.HoraDeApertura, 
                     i.HoraDeCierre, 
                     d.TiendaID, 
                     d.Dia, 
                     d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$Dia, 
                  @new$HoraDeApertura, 
                  @new$HoraDeCierre, 
                  @old$TiendaID, 
                  @old$Dia, 
                  @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN

                     IF @new$TiendaID <> @old$TiendaID
                        SET @new$TiendaID = @old$TiendaID

                     IF @new$Dia <> @old$Dia
                        SET @new$Dia = @old$Dia

                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.turno
                     SET 
                        TiendaID = @new$TiendaID, 
                        Dia = @new$Dia, 
                        HoraDeApertura = @new$HoraDeApertura, 
                        HoraDeCierre = @new$HoraDeCierre
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$Dia, 
                        @new$HoraDeApertura, 
                        @new$HoraDeCierre, 
                        @old$TiendaID, 
                        @old$Dia, 
                        @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.turno.AntesDeActualizarTurno',
        N'SCHEMA', N'dbo',
        N'TABLE', N'turno',
        N'TRIGGER', N'InsteadOfUpdateOn_turno'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N'InsteadOfUpdateOn_usuario'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[InsteadOfUpdateOn_usuario]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.InsteadOfUpdateOn_usuario
   ON dbo.usuario
    INSTEAD OF UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @old$ssma$rowid uniqueidentifier, 
               @new$UsuarioID int, 
               @old$UsuarioID int, 
               @new$Parroquia int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.UsuarioID, i.Parroquia, d.UsuarioID, d.ssma$rowid
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$UsuarioID, @new$Parroquia, @old$UsuarioID, @old$ssma$rowid

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF @new$UsuarioID <> @old$UsuarioID
                        SET @new$UsuarioID = @old$UsuarioID
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE dbo.usuario
                     SET 
                        UsuarioID = @new$UsuarioID, 
                        Parroquia = @new$Parroquia
                  WHERE ssma$rowid = @old$ssma$rowid

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$UsuarioID, @new$Parroquia, @old$UsuarioID, @old$ssma$rowid

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.usuario.AntesDeActualizarUsuario',
        N'SCHEMA', N'dbo',
        N'TABLE', N'usuario',
        N'TRIGGER', N'InsteadOfUpdateOn_usuario'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'RegistrarCreacion$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[RegistrarCreacion$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.RegistrarCreacion$IMPL  
   @a_Rastreable int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Parametros varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @ActorActivo int, 
         @Resultado int

      DECLARE
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @Accion char(40), 
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @Error char(40)

      SELECT @ActorActivo = rastreable.CreadoPor
      FROM dbo.rastreable
      WHERE rastreable.RastreableID = @a_Rastreable

      SELECT @Accion = N'Crear'

      SELECT @Error = N'OK'

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRegistro$IMPL 
         @ActorActivo, 
         @a_Rastreable, 
         @Accion, 
         @a_Parametros, 
         @Error, 
         @returnvalue = @procedure_return_value  OUTPUT

      SELECT @Resultado = @procedure_return_value

      SET @returnvalue = @Resultado

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.RegistrarCreacion',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'RegistrarCreacion$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'RegistrarEliminacion$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[RegistrarEliminacion$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.RegistrarEliminacion$IMPL  
   @a_Rastreable int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Parametros varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @ActorActivo int, 
         @Resultado int

      DECLARE
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @Accion char(40), 
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @Error char(40)

      SELECT @ActorActivo = rastreable.EliminadoPor
      FROM dbo.rastreable
      WHERE rastreable.RastreableID = @a_Rastreable

      SELECT @Accion = N'Eliminar'

      SELECT @Error = N'OK'

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRegistro$IMPL 
         @ActorActivo, 
         @a_Rastreable, 
         @Accion, 
         @a_Parametros, 
         @Error, 
         @returnvalue = @procedure_return_value  OUTPUT

      SELECT @Resultado = @procedure_return_value

      SET @returnvalue = @Resultado

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.RegistrarEliminacion',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'RegistrarEliminacion$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc ON so.schema_id = sc.schema_id WHERE so.name = N'RegistrarModificacion$IMPL'  AND sc.name=N'dbo'  AND type in (N'P'))
 DROP PROCEDURE [dbo].[RegistrarModificacion$IMPL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE PROCEDURE dbo.RegistrarModificacion$IMPL  
   @a_Rastreable int,
   /*
   *   SSMA informational messages:
   *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
   */

   @a_Parametros varchar(max),
   @returnvalue int  OUTPUT
AS 
   BEGIN

      SET  XACT_ABORT  ON

      SET  NOCOUNT  ON

      SET @returnvalue = NULL

      DECLARE
         @ActorActivo int, 
         @Resultado int

      DECLARE
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @Accion char(40), 
         /*
         *   SSMA informational messages:
         *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
         */

         @Error char(40)

      SELECT @ActorActivo = rastreable.ModificadoPor
      FROM dbo.rastreable
      WHERE rastreable.RastreableID = @a_Rastreable

      SELECT @Accion = N'Actualizar'

      SELECT @Error = N'OK'

      DECLARE
         @procedure_return_value int

      EXECUTE dbo.InsertarRegistro$IMPL 
         @ActorActivo, 
         @a_Rastreable, 
         @Accion, 
         @a_Parametros, 
         @Error, 
         @returnvalue = @procedure_return_value  OUTPUT

      SELECT @Resultado = @procedure_return_value

      SET @returnvalue = @Resultado

   END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.RegistrarModificacion',
        N'SCHEMA', N'dbo',
        N'PROCEDURE', N'RegistrarModificacion$IMPL'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_CalificacionResenaCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_CalificacionResenaCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_CalificacionResenaCrear_AfterInsert
   ON dbo.calificacionresena
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @new$CalificableSeguibleID int, 
               @new$ConsumidorID int, 
               @new$Calificacion nchar(4), 
               @new$Resena nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Etiquetable_P, 
                     CalificableSeguibleID, 
                     ConsumidorID, 
                     Calificacion, 
                     Resena
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$CalificableSeguibleID, 
                  @new$ConsumidorID, 
                  @new$Calificacion, 
                  @new$Resena

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'CalificacionResena: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Etiquetable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CalificableSeguibleID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$ConsumidorID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Calificacion
                         + 
                        N','
                         + 
                        @new$Resena

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$CalificableSeguibleID, 
                        @new$ConsumidorID, 
                        @new$Calificacion, 
                        @new$Resena

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificacionresena.t_CalificacionResenaCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificacionresena',
        N'TRIGGER', N't_CalificacionResenaCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_CalificacionResenaModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_CalificacionResenaModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_CalificacionResenaModificarDespues_AfterUpdate
   ON dbo.calificacionresena
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$CalificableSeguibleID int, 
               @new$ConsumidorID int, 
               @new$Calificacion nchar(4), 
               @old$Calificacion nchar(4), 
               @new$Resena nvarchar(max), 
               @old$Resena nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.CalificableSeguibleID, 
                     i.ConsumidorID, 
                     i.Calificacion, 
                     i.Resena, 
                     d.Calificacion, 
                     d.Resena
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$CalificableSeguibleID, 
                  @new$ConsumidorID, 
                  @new$Calificacion, 
                  @new$Resena, 
                  @old$Calificacion, 
                  @old$Resena

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Calificacion <> @old$Calificacion
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'CalificacionResena(columna): ('
                               + 
                              CAST(@new$CalificableSeguibleID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N')(Calificacion): '
                               + 
                              CAST(@old$Calificacion AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Calificacion AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Resena <> @old$Resena
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'CalificacionResena(columna): ('
                               + 
                              CAST(@new$CalificableSeguibleID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N')(Calificacion): '
                               + 
                              N' Muy largo... '

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$CalificableSeguibleID, 
                        @new$ConsumidorID, 
                        @new$Calificacion, 
                        @new$Resena, 
                        @old$Calificacion, 
                        @old$Resena

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.calificacionresena.t_CalificacionResenaModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'calificacionresena',
        N'TRIGGER', N't_CalificacionResenaModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_CiudadCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_CiudadCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_CiudadCrear_AfterInsert
   ON dbo.ciudad
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$CiudadID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeografica_P, CiudadID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeografica_P, @new$CiudadID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'RegionGeografica->Ciudad: ' + CAST(@new$RegionGeografica_P AS varchar(50)) + N'->' + CAST(@new$CiudadID AS varchar(50))

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeografica_P, @new$CiudadID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.ciudad.t_CiudadCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'ciudad',
        N'TRIGGER', N't_CiudadCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ConsumidorObjetivoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ConsumidorObjetivoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ConsumidorObjetivoCrear_AfterInsert
   ON dbo.consumidorobjetivo
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$ConsumidorID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT PublicidadID, ConsumidorID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$ConsumidorID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'Publicidad->ConsumidorObjetivo: ' + CAST(@new$PublicidadID AS varchar(50)) + N'->' + CAST(@new$ConsumidorID AS varchar(50))

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$ConsumidorID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidorobjetivo.t_ConsumidorObjetivoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidorobjetivo',
        N'TRIGGER', N't_ConsumidorObjetivoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ConsumidorObjetivoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ConsumidorObjetivoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ConsumidorObjetivoModificarDespues_AfterUpdate
   ON dbo.consumidorobjetivo
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$ConsumidorID int, 
               @old$ConsumidorID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.ConsumidorID, d.ConsumidorID
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$ConsumidorID, @old$ConsumidorID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     IF @new$ConsumidorID <> @old$ConsumidorID
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Publicidad->ConsumidorObjetivo(columna): '
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N'(ConsumidorID): '
                               + 
                              CAST(@old$ConsumidorID AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$ConsumidorID, @old$ConsumidorID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.consumidorobjetivo.t_ConsumidorObjetivoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'consumidorobjetivo',
        N'TRIGGER', N't_ConsumidorObjetivoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ContadorDeExhibicionesCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ContadorDeExhibicionesCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ContadorDeExhibicionesCrear_AfterInsert
   ON dbo.contadordeexhibiciones
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$EstadisticasDeVisitasID int, 
               @new$FechaInicio datetime2(0), 
               @new$ContadorDeExhibiciones int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT EstadisticasDeVisitasID, FechaInicio, ContadorDeExhibiciones
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$EstadisticasDeVisitasID, @new$FechaInicio, @new$ContadorDeExhibiciones

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @EstadisticasID int, 
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @EstadisticasID = estadisticas.EstadisticasID, @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas, dbo.estadisticasdevisitas
                     WHERE estadisticasdevisitas.EstadisticasDeVisitasID = @new$EstadisticasDeVisitasID AND estadisticas.EstadisticasID = estadisticasdevisitas.Estadisticas_P

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Estadisticas->EstadisticasDeVisitas->ContadorDeExhibiciones: '
                         + 
                        CAST(@EstadisticasID AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$EstadisticasDeVisitasID AS varchar(50))
                         + 
                        N'->'
                         + 
                        CONVERT(varchar(20), @new$FechaInicio, 120)
                         + 
                        N': '
                         + 
                        CAST(@new$ContadorDeExhibiciones AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$EstadisticasDeVisitasID, @new$FechaInicio, @new$ContadorDeExhibiciones

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.contadordeexhibiciones.t_ContadorDeExhibicionesCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'contadordeexhibiciones',
        N'TRIGGER', N't_ContadorDeExhibicionesCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ContadorDeExhibicionesModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ContadorDeExhibicionesModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ContadorDeExhibicionesModificarDespues_AfterUpdate
   ON dbo.contadordeexhibiciones
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$EstadisticasDeVisitasID int, 
               @new$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @old$FechaFin datetime2(0), 
               @new$ContadorDeExhibiciones int, 
               @old$ContadorDeExhibiciones int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.EstadisticasDeVisitasID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.ContadorDeExhibiciones, 
                     d.FechaFin, 
                     d.ContadorDeExhibiciones
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$EstadisticasDeVisitasID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$ContadorDeExhibiciones, 
                  @old$FechaFin, 
                  @old$ContadorDeExhibiciones

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Estadisticas_P int, 
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Estadisticas_P = estadisticas.EstadisticasID, @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas, dbo.estadisticasdevisitas
                     WHERE estadisticasdevisitas.EstadisticasDeVisitasID = @new$EstadisticasDeVisitasID AND estadisticasdevisitas.Estadisticas_P = estadisticas.EstadisticasID

                     IF @new$FechaFin <> @old$FechaFin
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeVisitas->ContadorDeExhibiciones(columna): '
                               + 
                              CAST(@Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeVisitasID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(FechaFin): '
                               + 
                              CONVERT(varchar(20), @old$FechaFin, 120)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(20), @new$FechaFin, 120)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$ContadorDeExhibiciones <> @old$ContadorDeExhibiciones
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeVisitas->ContadorDeExhibiciones(columna): '
                               + 
                              CAST(@Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeVisitasID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(ContadorDeExhibiciones): '
                               + 
                              CAST(@old$ContadorDeExhibiciones AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$ContadorDeExhibiciones AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$EstadisticasDeVisitasID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$ContadorDeExhibiciones, 
                        @old$FechaFin, 
                        @old$ContadorDeExhibiciones

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.contadordeexhibiciones.t_ContadorDeExhibicionesModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'contadordeexhibiciones',
        N'TRIGGER', N't_ContadorDeExhibicionesModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ContinenteCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ContinenteCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ContinenteCrear_AfterInsert
   ON dbo.continente
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$ContinenteID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeografica_P, ContinenteID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeografica_P, @new$ContinenteID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'RegionGeografica->Continente: ' + CAST(@new$RegionGeografica_P AS varchar(50)) + N'->' + CAST(@new$ContinenteID AS varchar(50))

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeografica_P, @new$ContinenteID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.continente.t_ContinenteCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'continente',
        N'TRIGGER', N't_ContinenteCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_CroquisCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_CroquisCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_CroquisCrear_AfterInsert
   ON dbo.croquis
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$CroquisID int, 
               @new$Area float(24), 
               @new$Perimetro float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT Rastreable_P, CroquisID, Area, Perimetro
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Rastreable_P, @new$CroquisID, @new$Area, @new$Perimetro

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Croquis: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CroquisID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Area AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Perimetro AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Rastreable_P, @new$CroquisID, @new$Area, @new$Perimetro

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.croquis.t_CroquisCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'croquis',
        N'TRIGGER', N't_CroquisCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_CroquisModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_CroquisModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_CroquisModificarDespues_AfterUpdate
   ON dbo.croquis
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$CroquisID int, 
               @new$Area float(24), 
               @old$Area float(24), 
               @new$Perimetro float(24), 
               @old$Perimetro float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.CroquisID, 
                     i.Area, 
                     i.Perimetro, 
                     d.Area, 
                     d.Perimetro
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$CroquisID, 
                  @new$Area, 
                  @new$Perimetro, 
                  @old$Area, 
                  @old$Perimetro

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Area <> @old$Area
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Croquis(columna): '
                               + 
                              CAST(@new$CroquisID AS varchar(50))
                               + 
                              N'(Area): '
                               + 
                              CAST(@old$Area AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Area AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Perimetro <> @old$Perimetro
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Croquis(columna): '
                               + 
                              CAST(@new$CroquisID AS varchar(50))
                               + 
                              N'(Perimetro): '
                               + 
                              CAST(@old$Perimetro AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Perimetro AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$CroquisID, 
                        @new$Area, 
                        @new$Perimetro, 
                        @old$Area, 
                        @old$Perimetro

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.croquis.t_CroquisModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'croquis',
        N'TRIGGER', N't_CroquisModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_DescripcionCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_DescripcionCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_DescripcionCrear_AfterInsert
   ON dbo.descripcion
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @new$DescripcionID int, 
               @new$Describible int, 
               @new$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Etiquetable_P, 
                     DescripcionID, 
                     Describible, 
                     Contenido
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$DescripcionID, 
                  @new$Describible, 
                  @new$Contenido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Descripcion: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Etiquetable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$DescripcionID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Describible AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Contenido

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$DescripcionID, 
                        @new$Describible, 
                        @new$Contenido

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.descripcion.t_DescripcionCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'descripcion',
        N'TRIGGER', N't_DescripcionCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_DescripcionModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_DescripcionModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_DescripcionModificarDespues_AfterUpdate
   ON dbo.descripcion
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$DescripcionID int, 
               @new$Contenido nvarchar(max), 
               @old$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.Rastreable_P, i.DescripcionID, i.Contenido, d.Contenido
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Rastreable_P, @new$DescripcionID, @new$Contenido, @old$Contenido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Contenido <> @old$Contenido
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = N'Descripcion(columna): ' + CAST(@new$DescripcionID AS varchar(50)) + N'(Contenido): ' + N'Muy largo...'

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Rastreable_P, @new$DescripcionID, @new$Contenido, @old$Contenido

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.descripcion.t_DescripcionModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'descripcion',
        N'TRIGGER', N't_DescripcionModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadisticasDeInfluenciaCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadisticasDeInfluenciaCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadisticasDeInfluenciaCrear_AfterInsert
   ON dbo.estadisticasdeinfluencia
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Estadisticas_P int, 
               @new$EstadisticasDeInfluenciaID int, 
               @new$Palabra int, 
               @new$NumeroDeDescripciones int, 
               @new$NumeroDeMensajes int, 
               @new$NumeroDeCategorias int, 
               @new$NumeroDeResenas int, 
               @new$NumeroDePublicidades int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Estadisticas_P, 
                     EstadisticasDeInfluenciaID, 
                     Palabra, 
                     NumeroDeDescripciones, 
                     NumeroDeMensajes, 
                     NumeroDeCategorias, 
                     NumeroDeResenas, 
                     NumeroDePublicidades
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDeInfluenciaID, 
                  @new$Palabra, 
                  @new$NumeroDeDescripciones, 
                  @new$NumeroDeMensajes, 
                  @new$NumeroDeCategorias, 
                  @new$NumeroDeResenas, 
                  @new$NumeroDePublicidades

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Estadisticas->EstadisticasDeInfluencia: '
                         + 
                        CAST(@new$Estadisticas_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$EstadisticasDeInfluenciaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Palabra AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeDescripciones AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeMensajes AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeCategorias AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeResenas AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDePublicidades AS varchar(50))

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$Estadisticas_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDeInfluenciaID, 
                        @new$Palabra, 
                        @new$NumeroDeDescripciones, 
                        @new$NumeroDeMensajes, 
                        @new$NumeroDeCategorias, 
                        @new$NumeroDeResenas, 
                        @new$NumeroDePublicidades

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdeinfluencia.t_EstadisticasDeInfluenciaCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdeinfluencia',
        N'TRIGGER', N't_EstadisticasDeInfluenciaCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadisticasDeInfluenciaModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadisticasDeInfluenciaModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadisticasDeInfluenciaModificarDespues_AfterUpdate
   ON dbo.estadisticasdeinfluencia
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Estadisticas_P int, 
               @new$EstadisticasDeInfluenciaID int, 
               @new$NumeroDeDescripciones int, 
               @old$NumeroDeDescripciones int, 
               @new$NumeroDeMensajes int, 
               @old$NumeroDeMensajes int, 
               @new$NumeroDeCategorias int, 
               @old$NumeroDeCategorias int, 
               @new$NumeroDeResenas int, 
               @old$NumeroDeResenas int, 
               @new$NumeroDePublicidades int, 
               @old$NumeroDePublicidades int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Estadisticas_P, 
                     i.EstadisticasDeInfluenciaID, 
                     i.NumeroDeDescripciones, 
                     i.NumeroDeMensajes, 
                     i.NumeroDeCategorias, 
                     i.NumeroDeResenas, 
                     i.NumeroDePublicidades, 
                     d.NumeroDeDescripciones, 
                     d.NumeroDeMensajes, 
                     d.NumeroDeCategorias, 
                     d.NumeroDeResenas, 
                     d.NumeroDePublicidades
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDeInfluenciaID, 
                  @new$NumeroDeDescripciones, 
                  @new$NumeroDeMensajes, 
                  @new$NumeroDeCategorias, 
                  @new$NumeroDeResenas, 
                  @new$NumeroDePublicidades, 
                  @old$NumeroDeDescripciones, 
                  @old$NumeroDeMensajes, 
                  @old$NumeroDeCategorias, 
                  @old$NumeroDeResenas, 
                  @old$NumeroDePublicidades

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$Estadisticas_P

                     IF @new$NumeroDeDescripciones <> @old$NumeroDeDescripciones
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeInfluencia(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeInfluenciaID AS varchar(50))
                               + 
                              N'(NumeroDeDescripciones): '
                               + 
                              CAST(@old$NumeroDeDescripciones AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeDescripciones AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$NumeroDeMensajes <> @old$NumeroDeMensajes
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeInfluencia(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeInfluenciaID AS varchar(50))
                               + 
                              N'(NumeroDeMensajes): '
                               + 
                              CAST(@old$NumeroDeMensajes AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeMensajes AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$NumeroDeCategorias <> @old$NumeroDeCategorias
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeInfluencia(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeInfluenciaID AS varchar(50))
                               + 
                              N'(NumeroDeCategorias): '
                               + 
                              CAST(@old$NumeroDeCategorias AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeCategorias AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$NumeroDeResenas <> @old$NumeroDeResenas
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeInfluencia(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeInfluenciaID AS varchar(50))
                               + 
                              N'(NumeroDeResenas): '
                               + 
                              CAST(@old$NumeroDeResenas AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeResenas AS varchar(50))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                     IF @new$NumeroDePublicidades <> @old$NumeroDePublicidades
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDeInfluencia(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDeInfluenciaID AS varchar(50))
                               + 
                              N'(NumeroDePublicidades): '
                               + 
                              CAST(@old$NumeroDePublicidades AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDePublicidades AS varchar(50))

                           DECLARE
                              @procedure_return_value$5 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$5  OUTPUT

                           SELECT @bobo = @procedure_return_value$5

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDeInfluenciaID, 
                        @new$NumeroDeDescripciones, 
                        @new$NumeroDeMensajes, 
                        @new$NumeroDeCategorias, 
                        @new$NumeroDeResenas, 
                        @new$NumeroDePublicidades, 
                        @old$NumeroDeDescripciones, 
                        @old$NumeroDeMensajes, 
                        @old$NumeroDeCategorias, 
                        @old$NumeroDeResenas, 
                        @old$NumeroDePublicidades

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdeinfluencia.t_EstadisticasDeInfluenciaModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdeinfluencia',
        N'TRIGGER', N't_EstadisticasDeInfluenciaModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadisticasDePopularidadCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadisticasDePopularidadCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadisticasDePopularidadCrear_AfterInsert
   ON dbo.estadisticasdepopularidad
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Estadisticas_P int, 
               @new$EstadisticasDePopularidadID int, 
               @new$CalificableSeguible int, 
               @new$NumeroDeCalificaciones int, 
               @new$NumeroDeResenas int, 
               @new$NumeroDeSeguidores int, 
               @new$NumeroDeMenciones int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Estadisticas_P, 
                     EstadisticasDePopularidadID, 
                     CalificableSeguible, 
                     NumeroDeCalificaciones, 
                     NumeroDeResenas, 
                     NumeroDeSeguidores, 
                     NumeroDeMenciones
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDePopularidadID, 
                  @new$CalificableSeguible, 
                  @new$NumeroDeCalificaciones, 
                  @new$NumeroDeResenas, 
                  @new$NumeroDeSeguidores, 
                  @new$NumeroDeMenciones

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Estadisticas->EstadisticasDePopularidad: '
                         + 
                        CAST(@new$Estadisticas_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CalificableSeguible AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeCalificaciones AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeResenas AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeSeguidores AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeMenciones AS varchar(50))

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$Estadisticas_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDePopularidadID, 
                        @new$CalificableSeguible, 
                        @new$NumeroDeCalificaciones, 
                        @new$NumeroDeResenas, 
                        @new$NumeroDeSeguidores, 
                        @new$NumeroDeMenciones

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdepopularidad.t_EstadisticasDePopularidadCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdepopularidad',
        N'TRIGGER', N't_EstadisticasDePopularidadCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadisticasDePopularidadModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadisticasDePopularidadModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadisticasDePopularidadModificarDespues_AfterUpdate
   ON dbo.estadisticasdepopularidad
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Estadisticas_P int, 
               @new$EstadisticasDePopularidadID int, 
               @new$NumeroDeCalificaciones int, 
               @old$NumeroDeCalificaciones int, 
               @new$NumeroDeResenas int, 
               @old$NumeroDeResenas int, 
               @new$NumeroDeSeguidores int, 
               @old$NumeroDeSeguidores int, 
               @new$NumeroDeMenciones int, 
               @old$NumeroDeMenciones int, 
               @new$NumeroDeVendedores int, 
               @old$NumeroDeVendedores int, 
               @new$NumeroDeMensajes int, 
               @old$NumeroDeMensajes int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Estadisticas_P, 
                     i.EstadisticasDePopularidadID, 
                     i.NumeroDeCalificaciones, 
                     i.NumeroDeResenas, 
                     i.NumeroDeSeguidores, 
                     i.NumeroDeMenciones, 
                     i.NumeroDeVendedores, 
                     i.NumeroDeMensajes, 
                     d.NumeroDeCalificaciones, 
                     d.NumeroDeResenas, 
                     d.NumeroDeSeguidores, 
                     d.NumeroDeMenciones, 
                     d.NumeroDeVendedores, 
                     d.NumeroDeMensajes
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Estadisticas_P, 
                  @new$EstadisticasDePopularidadID, 
                  @new$NumeroDeCalificaciones, 
                  @new$NumeroDeResenas, 
                  @new$NumeroDeSeguidores, 
                  @new$NumeroDeMenciones, 
                  @new$NumeroDeVendedores, 
                  @new$NumeroDeMensajes, 
                  @old$NumeroDeCalificaciones, 
                  @old$NumeroDeResenas, 
                  @old$NumeroDeSeguidores, 
                  @old$NumeroDeMenciones, 
                  @old$NumeroDeVendedores, 
                  @old$NumeroDeMensajes

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$Estadisticas_P

                     IF @new$NumeroDeCalificaciones <> @old$NumeroDeCalificaciones
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDePopularidad(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                               + 
                              N'(NumeroDeCalificaciones): '
                               + 
                              CAST(@old$NumeroDeCalificaciones AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeCalificaciones AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$NumeroDeResenas <> @old$NumeroDeResenas
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDePopularidad(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                               + 
                              N'(NumeroDeResenas): '
                               + 
                              CAST(@old$NumeroDeResenas AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeResenas AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$NumeroDeSeguidores <> @old$NumeroDeSeguidores
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDePopularidad(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                               + 
                              N'(NumeroDeSeguidores): '
                               + 
                              CAST(@old$NumeroDeSeguidores AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeSeguidores AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$NumeroDeMenciones <> @old$NumeroDeMenciones
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDePopularidad(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                               + 
                              N'(NumeroDeMenciones): '
                               + 
                              CAST(@old$NumeroDeMenciones AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeMenciones AS varchar(50))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                     IF @new$NumeroDeVendedores <> @old$NumeroDeVendedores
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDePopularidad(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                               + 
                              N'(NumeroDeVendedores): '
                               + 
                              CAST(@old$NumeroDeVendedores AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeVendedores AS varchar(50))

                           DECLARE
                              @procedure_return_value$5 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$5  OUTPUT

                           SELECT @bobo = @procedure_return_value$5

                        END

                     IF @new$NumeroDeMensajes <> @old$NumeroDeMensajes
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasDePopularidad(columna): '
                               + 
                              CAST(@new$Estadisticas_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadisticasDePopularidadID AS varchar(50))
                               + 
                              N'(NumeroDeMensajes): '
                               + 
                              CAST(@old$NumeroDeMensajes AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeMensajes AS varchar(50))

                           DECLARE
                              @procedure_return_value$6 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$6  OUTPUT

                           SELECT @bobo = @procedure_return_value$6

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Estadisticas_P, 
                        @new$EstadisticasDePopularidadID, 
                        @new$NumeroDeCalificaciones, 
                        @new$NumeroDeResenas, 
                        @new$NumeroDeSeguidores, 
                        @new$NumeroDeMenciones, 
                        @new$NumeroDeVendedores, 
                        @new$NumeroDeMensajes, 
                        @old$NumeroDeCalificaciones, 
                        @old$NumeroDeResenas, 
                        @old$NumeroDeSeguidores, 
                        @old$NumeroDeMenciones, 
                        @old$NumeroDeVendedores, 
                        @old$NumeroDeMensajes

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticasdepopularidad.t_EstadisticasDePopularidadModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticasdepopularidad',
        N'TRIGGER', N't_EstadisticasDePopularidadModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadisticasTemporalesCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadisticasTemporalesCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadisticasTemporalesCrear_AfterInsert
   ON dbo.estadisticastemporales
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$EstadisticasID int, 
               @new$FechaInicio datetime2(0), 
               @new$Contador int, 
               @new$Ranking int, 
               @new$Indice int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     EstadisticasID, 
                     FechaInicio, 
                     Contador, 
                     Ranking, 
                     Indice
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$EstadisticasID, 
                  @new$FechaInicio, 
                  @new$Contador, 
                  @new$Ranking, 
                  @new$Indice

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Estadisticas->EstadisticasTemporales: '
                         + 
                        CAST(@new$EstadisticasID AS varchar(50))
                         + 
                        N'->'
                         + 
                        CONVERT(varchar(20), @new$FechaInicio, 120)
                         + 
                        N': '
                         + 
                        CAST(@new$Contador AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Ranking AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Indice AS varchar(50))

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$EstadisticasID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$EstadisticasID, 
                        @new$FechaInicio, 
                        @new$Contador, 
                        @new$Ranking, 
                        @new$Indice

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticastemporales.t_EstadisticasTemporalesCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticastemporales',
        N'TRIGGER', N't_EstadisticasTemporalesCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadisticasTemporalesModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadisticasTemporalesModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadisticasTemporalesModificarDespues_AfterUpdate
   ON dbo.estadisticastemporales
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$EstadisticasID int, 
               @new$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @old$FechaFin datetime2(0), 
               @new$Contador int, 
               @old$Contador int, 
               @new$Ranking int, 
               @old$Ranking int, 
               @new$Indice int, 
               @old$Indice int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.EstadisticasID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.Contador, 
                     i.Ranking, 
                     i.Indice, 
                     d.FechaFin, 
                     d.Contador, 
                     d.Ranking, 
                     d.Indice
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$EstadisticasID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$Contador, 
                  @new$Ranking, 
                  @new$Indice, 
                  @old$FechaFin, 
                  @old$Contador, 
                  @old$Ranking, 
                  @old$Indice

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = estadisticas.Rastreable_P
                     FROM dbo.estadisticas
                     WHERE estadisticas.EstadisticasID = @new$EstadisticasID

                     IF @new$FechaFin <> @old$FechaFin
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasTemporales(columna): '
                               + 
                              CAST(@new$EstadisticasID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(FechaFin): '
                               + 
                              CONVERT(varchar(20), @old$FechaFin, 120)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(20), @new$FechaFin, 120)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Contador <> @old$Contador
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasTemporales(columna): '
                               + 
                              CAST(@new$EstadisticasID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(Contador): '
                               + 
                              CAST(@old$Contador AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Contador AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$Ranking <> @old$Ranking
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasTemporales(columna): '
                               + 
                              CAST(@new$EstadisticasID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(Ranking): '
                               + 
                              CAST(@old$Ranking AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Ranking AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$Indice <> @old$Indice
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Estadisticas->EstadisticasTemporales(columna): '
                               + 
                              CAST(@new$EstadisticasID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(Indice): '
                               + 
                              CAST(@old$Indice AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Indice AS varchar(50))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$EstadisticasID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$Contador, 
                        @new$Ranking, 
                        @new$Indice, 
                        @old$FechaFin, 
                        @old$Contador, 
                        @old$Ranking, 
                        @old$Indice

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estadisticastemporales.t_EstadisticasTemporalesModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estadisticastemporales',
        N'TRIGGER', N't_EstadisticasTemporalesModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadoCrear_AfterInsert
   ON dbo.estado
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$EstadoID int, 
               @new$Pais int, 
               @new$HusoHorarioNormal time

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeografica_P, EstadoID, Pais, HusoHorarioNormal
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeografica_P, @new$EstadoID, @new$Pais, @new$HusoHorarioNormal

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica->Estado: '
                         + 
                        CAST(@new$RegionGeografica_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$EstadoID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Pais AS varchar(50))
                         + 
                        N','
                         + 
                        CONVERT(varchar(8), @new$HusoHorarioNormal, 108)

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeografica_P, @new$EstadoID, @new$Pais, @new$HusoHorarioNormal

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estado.t_EstadoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estado',
        N'TRIGGER', N't_EstadoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_EstadoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_EstadoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_EstadoModificarDespues_AfterUpdate
   ON dbo.estado
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$EstadoID int, 
               @new$HusoHorarioNormal time, 
               @old$HusoHorarioNormal time, 
               @new$HusoHorarioVerano time, 
               @old$HusoHorarioVerano time

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.EstadoID, 
                     i.HusoHorarioNormal, 
                     i.HusoHorarioVerano, 
                     d.HusoHorarioNormal, 
                     d.HusoHorarioVerano
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$EstadoID, 
                  @new$HusoHorarioNormal, 
                  @new$HusoHorarioVerano, 
                  @old$HusoHorarioNormal, 
                  @old$HusoHorarioVerano

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE @new$RegionGeografica_P = regiongeografica.RegionGeograficaID

                     IF @new$HusoHorarioNormal <> @old$HusoHorarioNormal
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Estado(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadoID AS varchar(50))
                               + 
                              N'(HusoHorarioNormal):'
                               + 
                              CONVERT(varchar(8), @old$HusoHorarioNormal, 108)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(8), @new$HusoHorarioNormal, 108)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$HusoHorarioVerano <> @old$HusoHorarioVerano
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Estado(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$EstadoID AS varchar(50))
                               + 
                              N'(HusoHorarioVerano):'
                               + 
                              CONVERT(varchar(8), @old$HusoHorarioVerano, 108)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(8), @new$HusoHorarioVerano, 108)

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$EstadoID, 
                        @new$HusoHorarioNormal, 
                        @new$HusoHorarioVerano, 
                        @old$HusoHorarioNormal, 
                        @old$HusoHorarioVerano

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.estado.t_EstadoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'estado',
        N'TRIGGER', N't_EstadoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_FacturaCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_FacturaCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_FacturaCrear_AfterInsert
   ON dbo.factura
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$FacturaID int, 
               @new$Cliente nchar(10), 
               @new$InicioDeMedicion datetime2(0), 
               @new$FinDeMedicion datetime2(0), 
               @new$Subtotal decimal(10, 0), 
               @new$Impuestos decimal(10, 0), 
               @new$Total decimal(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     FacturaID, 
                     Cliente, 
                     InicioDeMedicion, 
                     FinDeMedicion, 
                     Subtotal, 
                     Impuestos, 
                     Total
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$FacturaID, 
                  @new$Cliente, 
                  @new$InicioDeMedicion, 
                  @new$FinDeMedicion, 
                  @new$Subtotal, 
                  @new$Impuestos, 
                  @new$Total

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Factura: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$FacturaID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Cliente
                         + 
                        N','
                         + 
                        CONVERT(varchar(20), @new$InicioDeMedicion, 120)
                         + 
                        N','
                         + 
                        CONVERT(varchar(20), @new$FinDeMedicion, 120)
                         + 
                        N','
                         + 
                        CAST(@new$Subtotal AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Impuestos AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Total AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$FacturaID, 
                        @new$Cliente, 
                        @new$InicioDeMedicion, 
                        @new$FinDeMedicion, 
                        @new$Subtotal, 
                        @new$Impuestos, 
                        @new$Total

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.factura.t_FacturaCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'factura',
        N'TRIGGER', N't_FacturaCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_FacturaModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_FacturaModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_FacturaModificarDespues_AfterUpdate
   ON dbo.factura
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$FacturaID int, 
               @new$Subtotal decimal(10, 0), 
               @old$Subtotal decimal(10, 0), 
               @new$Impuestos decimal(10, 0), 
               @old$Impuestos decimal(10, 0), 
               @new$Total decimal(10, 0), 
               @old$Total decimal(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.FacturaID, 
                     i.Subtotal, 
                     i.Impuestos, 
                     i.Total, 
                     d.Subtotal, 
                     d.Impuestos, 
                     d.Total
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$FacturaID, 
                  @new$Subtotal, 
                  @new$Impuestos, 
                  @new$Total, 
                  @old$Subtotal, 
                  @old$Impuestos, 
                  @old$Total

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Subtotal <> @old$Subtotal
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Factura(columna): '
                               + 
                              CAST(@new$FacturaID AS varchar(50))
                               + 
                              N'(Subtotal)'
                               + 
                              CAST(@new$Subtotal AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Subtotal AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Impuestos <> @old$Impuestos
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Factura(columna): '
                               + 
                              CAST(@new$FacturaID AS varchar(50))
                               + 
                              N'(Impuestos)'
                               + 
                              CAST(@new$Impuestos AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Impuestos AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$Total <> @old$Total
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Factura(columna): '
                               + 
                              CAST(@new$FacturaID AS varchar(50))
                               + 
                              N'(Total)'
                               + 
                              CAST(@new$Total AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Total AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$FacturaID, 
                        @new$Subtotal, 
                        @new$Impuestos, 
                        @new$Total, 
                        @old$Subtotal, 
                        @old$Impuestos, 
                        @old$Total

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.factura.t_FacturaModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'factura',
        N'TRIGGER', N't_FacturaModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_GradoDeInstruccionObjetivoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_GradoDeInstruccionObjetivoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_GradoDeInstruccionObjetivoCrear_AfterInsert
   ON dbo.gradodeinstruccionobjetivo
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$GradoDeInstruccion nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT PublicidadID, GradoDeInstruccion
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$GradoDeInstruccion

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'Publicidad->GradoDeInstruccionObjetivo: ' + CAST(@new$PublicidadID AS varchar(50)) + N'->' + CAST(@new$GradoDeInstruccion AS char(1))

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$GradoDeInstruccion

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.gradodeinstruccionobjetivo.t_GradoDeInstruccionObjetivoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'gradodeinstruccionobjetivo',
        N'TRIGGER', N't_GradoDeInstruccionObjetivoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_GradoDeInstruccionObjetivoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_GradoDeInstruccionObjetivoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_GradoDeInstruccionObjetivoModificarDespues_AfterUpdate
   ON dbo.gradodeinstruccionobjetivo
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$GradoDeInstruccion nchar(16), 
               @old$GradoDeInstruccion nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.GradoDeInstruccion, d.GradoDeInstruccion
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$GradoDeInstruccion, @old$GradoDeInstruccion

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     IF @new$GradoDeInstruccion <> @old$GradoDeInstruccion
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Publicidad->GradoDeInstruccionObjetivo(columna): '
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$GradoDeInstruccion AS char(1))
                               + 
                              N'(GradoDeInstruccion): '
                               + 
                              CAST(@old$GradoDeInstruccion AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$GradoDeInstruccion AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$GradoDeInstruccion, @old$GradoDeInstruccion

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.gradodeinstruccionobjetivo.t_GradoDeInstruccionObjetivoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'gradodeinstruccionobjetivo',
        N'TRIGGER', N't_GradoDeInstruccionObjetivoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_GrupoDeEdadObjetivoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_GrupoDeEdadObjetivoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_GrupoDeEdadObjetivoCrear_AfterInsert
   ON dbo.grupodeedadobjetivo
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$GrupoDeEdad nchar(15)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT PublicidadID, GrupoDeEdad
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$GrupoDeEdad

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'Publicidad->GrupoDeEdadObjetivo: ' + CAST(@new$PublicidadID AS varchar(50)) + N'->' + CAST(@new$GrupoDeEdad AS char(1))

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$GrupoDeEdad

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.grupodeedadobjetivo.t_GrupoDeEdadObjetivoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'grupodeedadobjetivo',
        N'TRIGGER', N't_GrupoDeEdadObjetivoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_GrupoDeEdadObjetivoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_GrupoDeEdadObjetivoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_GrupoDeEdadObjetivoModificarDespues_AfterUpdate
   ON dbo.grupodeedadobjetivo
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$GrupoDeEdad nchar(15), 
               @old$GrupoDeEdad nchar(15)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.GrupoDeEdad, d.GrupoDeEdad
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$GrupoDeEdad, @old$GrupoDeEdad

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     IF @new$GrupoDeEdad <> @old$GrupoDeEdad
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Publicidad->GrupoDeEdadObjetivo(columna): '
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$GrupoDeEdad AS char(1))
                               + 
                              N'(GrupoDeEdad): '
                               + 
                              CAST(@old$GrupoDeEdad AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$GrupoDeEdad AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$GrupoDeEdad, @old$GrupoDeEdad

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.grupodeedadobjetivo.t_GrupoDeEdadObjetivoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'grupodeedadobjetivo',
        N'TRIGGER', N't_GrupoDeEdadObjetivoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_InventarioCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_InventarioCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_InventarioCrear_AfterInsert
   ON dbo.inventario
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Cobrable_P int, 
               @new$TiendaID int, 
               @new$Codigo nchar(15), 
               @new$Visibilidad nchar(16)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Cobrable_P, 
                     TiendaID, 
                     Codigo, 
                     Visibilidad
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Cobrable_P, 
                  @new$TiendaID, 
                  @new$Codigo, 
                  @new$Visibilidad

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Inventario: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Cobrable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$TiendaID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Codigo
                         + 
                        N','
                         + 
                        @new$Visibilidad

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Cobrable_P, 
                        @new$TiendaID, 
                        @new$Codigo, 
                        @new$Visibilidad

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.inventario.t_InventarioCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'inventario',
        N'TRIGGER', N't_InventarioCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_InventarioModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_InventarioModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_InventarioModificarDespues_AfterUpdate
   ON dbo.inventario
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$TiendaID int, 
               @new$Codigo nchar(15), 
               @new$Descripcion nvarchar(45), 
               @old$Descripcion nvarchar(45), 
               @new$Visibilidad nchar(16), 
               @old$Visibilidad nchar(16), 
               @new$ProductoID int, 
               @old$ProductoID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.TiendaID, 
                     i.Codigo, 
                     i.Descripcion, 
                     i.Visibilidad, 
                     i.ProductoID, 
                     d.Descripcion, 
                     d.Visibilidad, 
                     d.ProductoID
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$TiendaID, 
                  @new$Codigo, 
                  @new$Descripcion, 
                  @new$Visibilidad, 
                  @new$ProductoID, 
                  @old$Descripcion, 
                  @old$Visibilidad, 
                  @old$ProductoID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     IF @new$Descripcion <> @old$Descripcion
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Inventario(columna): ('
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N','
                               + 
                              @new$Codigo
                               + 
                              N'(Descripcion)'
                               + 
                              CAST(@old$Descripcion AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Descripcion AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Visibilidad <> @old$Visibilidad
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Inventario(columna): ('
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N','
                               + 
                              @new$Codigo
                               + 
                              N'(Visibilidad)'
                               + 
                              CAST(@old$Visibilidad AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Visibilidad AS char(1))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$ProductoID <> @old$ProductoID
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Inventario(columna): ('
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N','
                               + 
                              @new$Codigo
                               + 
                              N'(ProductoID)'
                               + 
                              CAST(@old$ProductoID AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$ProductoID AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$TiendaID, 
                        @new$Codigo, 
                        @new$Descripcion, 
                        @new$Visibilidad, 
                        @new$ProductoID, 
                        @old$Descripcion, 
                        @old$Visibilidad, 
                        @old$ProductoID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.inventario.t_InventarioModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'inventario',
        N'TRIGGER', N't_InventarioModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_MensajeCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_MensajeCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_MensajeCrear_AfterInsert
   ON dbo.mensaje
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @new$MensajeID int, 
               @new$Remitente int, 
               @new$Destinatario int, 
               @new$Contenido nvarchar(max)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Etiquetable_P, 
                     MensajeID, 
                     Remitente, 
                     Destinatario, 
                     Contenido
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$MensajeID, 
                  @new$Remitente, 
                  @new$Destinatario, 
                  @new$Contenido

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        @bobo int

                     DECLARE
                        @procedure_return_value int

                     DECLARE
                        @temp nvarchar(4000)

                     SET @temp = 
                        N'Mensaje: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Etiquetable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$MensajeID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Remitente AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Destinatario AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Contenido

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @temp, @returnvalue = @procedure_return_value  OUTPUT

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$MensajeID, 
                        @new$Remitente, 
                        @new$Destinatario, 
                        @new$Contenido

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.mensaje.t_MensajeCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'mensaje',
        N'TRIGGER', N't_MensajeCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_MunicipioCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_MunicipioCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_MunicipioCrear_AfterInsert
   ON dbo.municipio
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$MunicipioID int, 
               @new$Estado int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeografica_P, MunicipioID, Estado
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeografica_P, @new$MunicipioID, @new$Estado

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica->Municipio: '
                         + 
                        CAST(@new$RegionGeografica_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$MunicipioID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Estado AS varchar(50))

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeografica_P, @new$MunicipioID, @new$Estado

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.municipio.t_MunicipioCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'municipio',
        N'TRIGGER', N't_MunicipioCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_MunicipioModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_MunicipioModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_MunicipioModificarDespues_AfterUpdate
   ON dbo.municipio
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$MunicipioID int, 
               @new$Estado int, 
               @old$Estado int, 
               @new$Ciudad int, 
               @old$Ciudad int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.MunicipioID, 
                     i.Estado, 
                     i.Ciudad, 
                     d.Estado, 
                     d.Ciudad
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$MunicipioID, 
                  @new$Estado, 
                  @new$Ciudad, 
                  @old$Estado, 
                  @old$Ciudad

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE @new$RegionGeografica_P = regiongeografica.RegionGeograficaID

                     IF @new$Estado <> @old$Estado
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Municipio(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$MunicipioID AS varchar(50))
                               + 
                              N'(Estado):'
                               + 
                              CAST(@old$Estado AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Estado AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Ciudad <> @old$Ciudad
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Municipio(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$MunicipioID AS varchar(50))
                               + 
                              N'(Ciudad):'
                               + 
                              CAST(@old$Ciudad AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Ciudad AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$MunicipioID, 
                        @new$Estado, 
                        @new$Ciudad, 
                        @old$Estado, 
                        @old$Ciudad

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.municipio.t_MunicipioModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'municipio',
        N'TRIGGER', N't_MunicipioModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PaisCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PaisCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PaisCrear_AfterInsert
   ON dbo.pais
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$PaisID int, 
               @new$Continente int, 
               @new$Capital int, 
               @new$Idioma nchar(10)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     RegionGeografica_P, 
                     PaisID, 
                     Continente, 
                     Capital, 
                     Idioma
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$PaisID, 
                  @new$Continente, 
                  @new$Capital, 
                  @new$Idioma

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica->Pais: '
                         + 
                        CAST(@new$RegionGeografica_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$PaisID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Continente AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Capital AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Idioma

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$PaisID, 
                        @new$Continente, 
                        @new$Capital, 
                        @new$Idioma

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.pais.t_PaisCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'pais',
        N'TRIGGER', N't_PaisCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PaisModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PaisModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PaisModificarDespues_AfterUpdate
   ON dbo.pais
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$PaisID int, 
               @new$MonedaLocal nvarchar(45), 
               @old$MonedaLocal nvarchar(45), 
               @new$MonedaLocal_Dolar decimal(10, 2), 
               @old$MonedaLocal_Dolar decimal(10, 2), 
               @new$PIB decimal(15, 0), 
               @old$PIB decimal(15, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.PaisID, 
                     i.MonedaLocal, 
                     i.MonedaLocal_Dolar, 
                     i.PIB, 
                     d.MonedaLocal, 
                     d.MonedaLocal_Dolar, 
                     d.PIB
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$PaisID, 
                  @new$MonedaLocal, 
                  @new$MonedaLocal_Dolar, 
                  @new$PIB, 
                  @old$MonedaLocal, 
                  @old$MonedaLocal_Dolar, 
                  @old$PIB

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE @new$RegionGeografica_P = regiongeografica.RegionGeograficaID

                     IF @new$MonedaLocal <> @old$MonedaLocal
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Pais(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$PaisID AS varchar(50))
                               + 
                              N'(MonedaLocal):'
                               + 
                              CAST(@old$MonedaLocal AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$MonedaLocal AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$MonedaLocal_Dolar <> @old$MonedaLocal_Dolar
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Pais(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$PaisID AS varchar(50))
                               + 
                              N'(MonedaLocal_Dolar):'
                               + 
                              CAST(@old$MonedaLocal_Dolar AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$MonedaLocal_Dolar AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$PIB <> @old$PIB
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Pais(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$PaisID AS varchar(50))
                               + 
                              N'(PIB):'
                               + 
                              CAST(@old$PIB AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$PIB AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$PaisID, 
                        @new$MonedaLocal, 
                        @new$MonedaLocal_Dolar, 
                        @new$PIB, 
                        @old$MonedaLocal, 
                        @old$MonedaLocal_Dolar, 
                        @old$PIB

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.pais.t_PaisModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'pais',
        N'TRIGGER', N't_PaisModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PaisSubcontinenteCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PaisSubcontinenteCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PaisSubcontinenteCrear_AfterInsert
   ON dbo.paissubcontinente
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$SubcontinenteID int, 
               @new$PaisID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT SubcontinenteID, PaisID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$SubcontinenteID, @new$PaisID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @RegionGeografica_P int, 
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @RegionGeografica_P = regiongeografica.RegionGeograficaID, @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica, dbo.subcontinente
                     WHERE regiongeografica.RegionGeograficaID = subcontinente.RegionGeografica_P AND subcontinente.SubcontinenteID = @new$SubcontinenteID

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica->Subcontinente->PaisSubcontinente: '
                         + 
                        CAST(@RegionGeografica_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$SubcontinenteID AS varchar(50))
                         + 
                        N'->('
                         + 
                        CAST(@new$SubcontinenteID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$PaisID AS varchar(50))
                         + 
                        N')'

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$SubcontinenteID, @new$PaisID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.paissubcontinente.t_PaisSubcontinenteCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'paissubcontinente',
        N'TRIGGER', N't_PaisSubcontinenteCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ParroquiaCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ParroquiaCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ParroquiaCrear_AfterInsert
   ON dbo.parroquia
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$ParroquiaID int, 
               @new$CodigoPostal nchar(10), 
               @new$Municipio int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeografica_P, ParroquiaID, CodigoPostal, Municipio
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeografica_P, @new$ParroquiaID, @new$CodigoPostal, @new$Municipio

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica->Parroquia: '
                         + 
                        CAST(@new$RegionGeografica_P AS varchar(50))
                         + 
                        N'->'
                         + 
                        CAST(@new$ParroquiaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Municipio AS varchar(50))
                         + 
                        N','
                         + 
                        @new$CodigoPostal

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeografica_P, @new$ParroquiaID, @new$CodigoPostal, @new$Municipio

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.parroquia.t_ParroquiaCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'parroquia',
        N'TRIGGER', N't_ParroquiaCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ParroquiaModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ParroquiaModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ParroquiaModificarDespues_AfterUpdate
   ON dbo.parroquia
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$ParroquiaID int, 
               @new$CodigoPostal nchar(10), 
               @old$CodigoPostal nchar(10), 
               @new$Municipio int, 
               @old$Municipio int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeografica_P, 
                     i.ParroquiaID, 
                     i.CodigoPostal, 
                     i.Municipio, 
                     d.CodigoPostal, 
                     d.Municipio
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeografica_P, 
                  @new$ParroquiaID, 
                  @new$CodigoPostal, 
                  @new$Municipio, 
                  @old$CodigoPostal, 
                  @old$Municipio

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE @new$RegionGeografica_P = regiongeografica.RegionGeograficaID

                     IF @new$CodigoPostal <> @old$CodigoPostal
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Parroquia(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$ParroquiaID AS varchar(50))
                               + 
                              N'(CodigoPostal):'
                               + 
                              CAST(@old$CodigoPostal AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$CodigoPostal AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Municipio <> @old$Municipio
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->Parroquia(columna): '
                               + 
                              CAST(@new$RegionGeografica_P AS varchar(50))
                               + 
                              N'->'
                               + 
                              CAST(@new$ParroquiaID AS varchar(50))
                               + 
                              N'(Municipio):'
                               + 
                              CAST(@old$Municipio AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Municipio AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeografica_P, 
                        @new$ParroquiaID, 
                        @new$CodigoPostal, 
                        @new$Municipio, 
                        @old$CodigoPostal, 
                        @old$Municipio

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.parroquia.t_ParroquiaModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'parroquia',
        N'TRIGGER', N't_ParroquiaModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PrecioCantidadCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PrecioCantidadCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PrecioCantidadCrear_AfterInsert
   ON dbo.preciocantidad
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$Codigo nchar(15), 
               @new$FechaInicio datetime2(0), 
               @new$Precio decimal(10, 2), 
               @new$Cantidad int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     TiendaID, 
                     Codigo, 
                     FechaInicio, 
                     Precio, 
                     Cantidad
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$Codigo, 
                  @new$FechaInicio, 
                  @new$Precio, 
                  @new$Cantidad

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Inventario->PrecioCantidad: ('
                         + 
                        CAST(@new$TiendaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Codigo AS char(1))
                         + 
                        N')->'
                         + 
                        CONVERT(varchar(20), @new$FechaInicio, 120)
                         + 
                        N': '
                         + 
                        CAST(@new$Precio AS varchar(50))
                         + 
                        CAST(@new$Cantidad AS varchar(50))

                     SELECT @Rastreable_P = inventario.Rastreable_P
                     FROM dbo.inventario
                     WHERE inventario.TiendaID = @new$TiendaID AND inventario.Codigo = @new$Codigo

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$Codigo, 
                        @new$FechaInicio, 
                        @new$Precio, 
                        @new$Cantidad

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.preciocantidad.t_PrecioCantidadCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'preciocantidad',
        N'TRIGGER', N't_PrecioCantidadCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PrecioCantidadModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PrecioCantidadModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PrecioCantidadModificarDespues_AfterUpdate
   ON dbo.preciocantidad
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$TiendaID int, 
               @new$Codigo nchar(15), 
               @new$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @old$FechaFin datetime2(0), 
               @new$Precio decimal(10, 2), 
               @old$Precio decimal(10, 2), 
               @new$Cantidad int, 
               @old$Cantidad int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.TiendaID, 
                     i.Codigo, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.Precio, 
                     i.Cantidad, 
                     d.FechaFin, 
                     d.Precio, 
                     d.Cantidad
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$TiendaID, 
                  @new$Codigo, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$Precio, 
                  @new$Cantidad, 
                  @old$FechaFin, 
                  @old$Precio, 
                  @old$Cantidad

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = inventario.Rastreable_P
                     FROM dbo.inventario
                     WHERE inventario.TiendaID = @new$TiendaID AND inventario.Codigo = @new$Codigo

                     IF @new$FechaFin <> @old$FechaFin
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Inventario->PrecioCantidad(columna): ('
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$Codigo AS char(1))
                               + 
                              N')->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(FechaFin): '
                               + 
                              CONVERT(varchar(20), @old$FechaFin, 120)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(20), @new$FechaFin, 120)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Precio <> @old$Precio
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Inventario->PrecioCantidad(columna): ('
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$Codigo AS char(1))
                               + 
                              N')->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(Precio): '
                               + 
                              CAST(@old$Precio AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Precio AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$Cantidad <> @old$Cantidad
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Inventario->PrecioCantidad(columna): ('
                               + 
                              CAST(@new$TiendaID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$Codigo AS char(1))
                               + 
                              N')->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(Cantidad): '
                               + 
                              CAST(@old$Cantidad AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Cantidad AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$TiendaID, 
                        @new$Codigo, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$Precio, 
                        @new$Cantidad, 
                        @old$FechaFin, 
                        @old$Precio, 
                        @old$Cantidad

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.preciocantidad.t_PrecioCantidadModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'preciocantidad',
        N'TRIGGER', N't_PrecioCantidadModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ProductoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ProductoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ProductoCrear_AfterInsert
   ON dbo.producto
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Describible_P int, 
               @new$Buscable_P int, 
               @new$CalificableSeguible_P int, 
               @new$ProductoID int, 
               @new$TipoDeCodigo nchar(7), 
               @new$Codigo nchar(15), 
               @new$Estatus nchar(9), 
               @new$Fabricante nvarchar(45), 
               @new$Nombre nvarchar(45), 
               @new$Categoria int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Describible_P, 
                     Buscable_P, 
                     CalificableSeguible_P, 
                     ProductoID, 
                     TipoDeCodigo, 
                     Codigo, 
                     Estatus, 
                     Fabricante, 
                     Nombre, 
                     Categoria
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Describible_P, 
                  @new$Buscable_P, 
                  @new$CalificableSeguible_P, 
                  @new$ProductoID, 
                  @new$TipoDeCodigo, 
                  @new$Codigo, 
                  @new$Estatus, 
                  @new$Fabricante, 
                  @new$Nombre, 
                  @new$Categoria

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Producto: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Describible_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Buscable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CalificableSeguible_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$ProductoID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$TipoDeCodigo
                         + 
                        N','
                         + 
                        @new$Codigo
                         + 
                        N','
                         + 
                        @new$Estatus
                         + 
                        N','
                         + 
                        @new$Fabricante
                         + 
                        N','
                         + 
                        @new$Nombre
                         + 
                        N','
                         + 
                        CAST(@new$Categoria AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Describible_P, 
                        @new$Buscable_P, 
                        @new$CalificableSeguible_P, 
                        @new$ProductoID, 
                        @new$TipoDeCodigo, 
                        @new$Codigo, 
                        @new$Estatus, 
                        @new$Fabricante, 
                        @new$Nombre, 
                        @new$Categoria

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.producto.t_ProductoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'producto',
        N'TRIGGER', N't_ProductoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ProductoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ProductoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ProductoModificarDespues_AfterUpdate
   ON dbo.producto
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$ProductoID int, 
               @new$Estatus nchar(9), 
               @old$Estatus nchar(9), 
               @new$Modelo nvarchar(45), 
               @old$Modelo nvarchar(45), 
               @new$Categoria int, 
               @old$Categoria int, 
               @new$DebutEnElMercado date, 
               @old$DebutEnElMercado date, 
               @new$Largo float(24), 
               @old$Largo float(24), 
               @new$Ancho float(24), 
               @old$Ancho float(24), 
               @new$Alto float(24), 
               @old$Alto float(24), 
               @new$Peso float(24), 
               @old$Peso float(24), 
               @new$PaisDeOrigen int, 
               @old$PaisDeOrigen int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.ProductoID, 
                     i.Estatus, 
                     i.Modelo, 
                     i.Categoria, 
                     i.DebutEnElMercado, 
                     i.Largo, 
                     i.Ancho, 
                     i.Alto, 
                     i.Peso, 
                     i.PaisDeOrigen, 
                     d.Estatus, 
                     d.Modelo, 
                     d.Categoria, 
                     d.DebutEnElMercado, 
                     d.Largo, 
                     d.Ancho, 
                     d.Alto, 
                     d.Peso, 
                     d.PaisDeOrigen
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$ProductoID, 
                  @new$Estatus, 
                  @new$Modelo, 
                  @new$Categoria, 
                  @new$DebutEnElMercado, 
                  @new$Largo, 
                  @new$Ancho, 
                  @new$Alto, 
                  @new$Peso, 
                  @new$PaisDeOrigen, 
                  @old$Estatus, 
                  @old$Modelo, 
                  @old$Categoria, 
                  @old$DebutEnElMercado, 
                  @old$Largo, 
                  @old$Ancho, 
                  @old$Alto, 
                  @old$Peso, 
                  @old$PaisDeOrigen

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     IF @new$Estatus <> @old$Estatus
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Estatus): '
                               + 
                              CAST(@old$Estatus AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Estatus AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Modelo <> @old$Modelo
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Modelo): '
                               + 
                              CAST(@old$Modelo AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Modelo AS char(1))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$Categoria <> @old$Categoria
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Categoria): '
                               + 
                              CAST(@old$Categoria AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Categoria AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$DebutEnElMercado <> @old$DebutEnElMercado
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(DebutEnElMercado): '
                               + 
                              CONVERT(varchar(10), @old$DebutEnElMercado, 120)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(10), @new$DebutEnElMercado, 120)

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                     IF @new$Largo <> @old$Largo
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Largo): '
                               + 
                              CAST(@old$Largo AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Largo AS varchar(50))

                           DECLARE
                              @procedure_return_value$5 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$5  OUTPUT

                           SELECT @bobo = @procedure_return_value$5

                        END

                     IF @new$Ancho <> @old$Ancho
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Ancho): '
                               + 
                              CAST(@old$Ancho AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Ancho AS varchar(50))

                           DECLARE
                              @procedure_return_value$6 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$6  OUTPUT

                           SELECT @bobo = @procedure_return_value$6

                        END

                     IF @new$Alto <> @old$Alto
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Alto): '
                               + 
                              CAST(@old$Alto AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Alto AS varchar(50))

                           DECLARE
                              @procedure_return_value$7 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$7  OUTPUT

                           SELECT @bobo = @procedure_return_value$7

                        END

                     IF @new$Peso <> @old$Peso
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(Peso): '
                               + 
                              CAST(@old$Peso AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Peso AS varchar(50))

                           DECLARE
                              @procedure_return_value$8 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$8  OUTPUT

                           SELECT @bobo = @procedure_return_value$8

                        END

                     IF @new$PaisDeOrigen <> @old$PaisDeOrigen
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Producto(columna): '
                               + 
                              CAST(@new$ProductoID AS varchar(50))
                               + 
                              N'(PaisDeOrigen): '
                               + 
                              CAST(@old$PaisDeOrigen AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Peso AS varchar(50))

                           DECLARE
                              @procedure_return_value$9 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$9  OUTPUT

                           SELECT @bobo = @procedure_return_value$9

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$ProductoID, 
                        @new$Estatus, 
                        @new$Modelo, 
                        @new$Categoria, 
                        @new$DebutEnElMercado, 
                        @new$Largo, 
                        @new$Ancho, 
                        @new$Alto, 
                        @new$Peso, 
                        @new$PaisDeOrigen, 
                        @old$Estatus, 
                        @old$Modelo, 
                        @old$Categoria, 
                        @old$DebutEnElMercado, 
                        @old$Largo, 
                        @old$Ancho, 
                        @old$Alto, 
                        @old$Peso, 
                        @old$PaisDeOrigen

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.producto.t_ProductoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'producto',
        N'TRIGGER', N't_ProductoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PublicidadCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PublicidadCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PublicidadCrear_AfterInsert
   ON dbo.publicidad
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Buscable_P int, 
               @new$Describible_P int, 
               @new$Rastreable_P int, 
               @new$Etiquetable_P int, 
               @new$Cobrable_P int, 
               @new$PublicidadID int, 
               @new$Patrocinante int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Buscable_P, 
                     Describible_P, 
                     Rastreable_P, 
                     Etiquetable_P, 
                     Cobrable_P, 
                     PublicidadID, 
                     Patrocinante
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Buscable_P, 
                  @new$Describible_P, 
                  @new$Rastreable_P, 
                  @new$Etiquetable_P, 
                  @new$Cobrable_P, 
                  @new$PublicidadID, 
                  @new$Patrocinante

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Publicidad: '
                         + 
                        CAST(@new$Buscable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Describible_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Etiquetable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Cobrable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$PublicidadID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Patrocinante AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Buscable_P, 
                        @new$Describible_P, 
                        @new$Rastreable_P, 
                        @new$Etiquetable_P, 
                        @new$Cobrable_P, 
                        @new$PublicidadID, 
                        @new$Patrocinante

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.publicidad.t_PublicidadCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'publicidad',
        N'TRIGGER', N't_PublicidadCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PublicidadModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PublicidadModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PublicidadModificarDespues_AfterUpdate
   ON dbo.publicidad
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$PublicidadID int, 
               @new$TamanoDePoblacionObjetivo int, 
               @old$TamanoDePoblacionObjetivo int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.Rastreable_P, i.PublicidadID, i.TamanoDePoblacionObjetivo, d.TamanoDePoblacionObjetivo
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Rastreable_P, @new$PublicidadID, @new$TamanoDePoblacionObjetivo, @old$TamanoDePoblacionObjetivo

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     IF @new$TamanoDePoblacionObjetivo <> @old$TamanoDePoblacionObjetivo
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Publicidad(columna): '
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N'(TamanoDePoblacionObjetivo): '
                               + 
                              CAST(@old$TamanoDePoblacionObjetivo AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$TamanoDePoblacionObjetivo AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Rastreable_P, @new$PublicidadID, @new$TamanoDePoblacionObjetivo, @old$TamanoDePoblacionObjetivo

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.publicidad.t_PublicidadModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'publicidad',
        N'TRIGGER', N't_PublicidadModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_PuntoDeCroquisCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_PuntoDeCroquisCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_PuntoDeCroquisCrear_AfterInsert
   ON dbo.puntodecroquis
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$CroquisID int, 
               @new$PuntoID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT CroquisID, PuntoID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$CroquisID, @new$PuntoID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @Lat int, 
                        @Lon int, 
                        @bobo int

                     SELECT @Rastreable_P = croquis.Rastreable_P
                     FROM dbo.croquis
                     WHERE croquis.CroquisID = @new$CroquisID

                     SELECT @Lat = CAST(ROUND(punto.Latitud, 0) AS bigint)
                     FROM dbo.punto
                     WHERE punto.PuntoID = @new$PuntoID

                     SELECT @Lon = CAST(ROUND(punto.Longitud, 0) AS bigint)
                     FROM dbo.punto
                     WHERE punto.PuntoID = @new$PuntoID

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Croquis->PuntoDeCroquis: '
                         + 
                        CAST(@new$CroquisID AS varchar(50))
                         + 
                        N'->('
                         + 
                        CAST(@new$CroquisID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$PuntoID AS varchar(50))
                         + 
                        N'): '
                         + 
                        CAST(@Lat AS varchar(50))
                         + 
                        N' lat, '
                         + 
                        CAST(@Lon AS varchar(50))
                         + 
                        N' lon'

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$CroquisID, @new$PuntoID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.puntodecroquis.t_PuntoDeCroquisCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'puntodecroquis',
        N'TRIGGER', N't_PuntoDeCroquisCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_RegionGeograficaCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_RegionGeograficaCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_RegionGeograficaCrear_AfterInsert
   ON dbo.regiongeografica
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$Dibujable_P int, 
               @new$RegionGeograficaID int, 
               @new$Nombre nvarchar(45), 
               @new$Poblacion bigint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     Rastreable_P, 
                     Dibujable_P, 
                     RegionGeograficaID, 
                     Nombre, 
                     Poblacion
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$Dibujable_P, 
                  @new$RegionGeograficaID, 
                  @new$Nombre, 
                  @new$Poblacion

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$Dibujable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$RegionGeograficaID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$Nombre
                         + 
                        N','
                         + 
                        CAST(@new$Poblacion AS varchar(50))

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$Dibujable_P, 
                        @new$RegionGeograficaID, 
                        @new$Nombre, 
                        @new$Poblacion

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeografica.t_RegionGeograficaCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeografica',
        N'TRIGGER', N't_RegionGeograficaCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_RegionGeograficaModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_RegionGeograficaModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_RegionGeograficaModificarDespues_AfterUpdate
   ON dbo.regiongeografica
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$RegionGeograficaID int, 
               @new$Nombre nvarchar(45), 
               @old$Nombre nvarchar(45), 
               @new$Poblacion bigint, 
               @old$Poblacion bigint, 
               @new$Consumidores_Poblacion float(24), 
               @old$Consumidores_Poblacion float(24), 
               @new$Tiendas_Poblacion float(24), 
               @old$Tiendas_Poblacion float(24), 
               @new$Tiendas_Consumidores float(24), 
               @old$Tiendas_Consumidores float(24)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.RegionGeograficaID, 
                     i.Nombre, 
                     i.Poblacion, 
                     i.Consumidores_Poblacion, 
                     i.Tiendas_Poblacion, 
                     i.Tiendas_Consumidores, 
                     d.Nombre, 
                     d.Poblacion, 
                     d.Consumidores_Poblacion, 
                     d.Tiendas_Poblacion, 
                     d.Tiendas_Consumidores
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$RegionGeograficaID, 
                  @new$Nombre, 
                  @new$Poblacion, 
                  @new$Consumidores_Poblacion, 
                  @new$Tiendas_Poblacion, 
                  @new$Tiendas_Consumidores, 
                  @old$Nombre, 
                  @old$Poblacion, 
                  @old$Consumidores_Poblacion, 
                  @old$Tiendas_Poblacion, 
                  @old$Tiendas_Consumidores

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'RegionGeografica(columna): ' + CAST(@new$RegionGeograficaID AS varchar(50)) + N'('

                     IF @new$Nombre <> @old$Nombre
                        BEGIN

                           SELECT @Parametros = @Parametros + N'Nombre): ' + @old$Nombre + N' ahora es ' + @new$Nombre

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$Poblacion <> @old$Poblacion
                        BEGIN

                           SELECT @Parametros = @Parametros + N'Poblacion): ' + CAST(@old$Poblacion AS varchar(50)) + N' ahora es ' + CAST(@new$Poblacion AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$Consumidores_Poblacion <> @old$Consumidores_Poblacion
                        BEGIN

                           SELECT @Parametros = @Parametros + N'Consumidores_Poblacion): ' + CAST(@old$Consumidores_Poblacion AS varchar(50)) + N' ahora es ' + CAST(@new$Consumidores_Poblacion AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                     IF @new$Tiendas_Poblacion <> @old$Tiendas_Poblacion
                        BEGIN

                           SELECT @Parametros = @Parametros + N'Tiendas_Poblacion): ' + CAST(@old$Tiendas_Poblacion AS varchar(50)) + N' ahora es ' + CAST(@new$Tiendas_Poblacion AS varchar(50))

                           DECLARE
                              @procedure_return_value$4 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$4  OUTPUT

                           SELECT @bobo = @procedure_return_value$4

                        END

                     IF @new$Tiendas_Consumidores <> @old$Tiendas_Consumidores
                        BEGIN

                           SELECT @Parametros = @Parametros + N'Tiendas_Consumidores): ' + CAST(@old$Tiendas_Consumidores AS varchar(50)) + N' ahora es ' + CAST(@new$Tiendas_Consumidores AS varchar(50))

                           DECLARE
                              @procedure_return_value$5 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$5  OUTPUT

                           SELECT @bobo = @procedure_return_value$5

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$RegionGeograficaID, 
                        @new$Nombre, 
                        @new$Poblacion, 
                        @new$Consumidores_Poblacion, 
                        @new$Tiendas_Poblacion, 
                        @new$Tiendas_Consumidores, 
                        @old$Nombre, 
                        @old$Poblacion, 
                        @old$Consumidores_Poblacion, 
                        @old$Tiendas_Poblacion, 
                        @old$Tiendas_Consumidores

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeografica.t_RegionGeograficaModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeografica',
        N'TRIGGER', N't_RegionGeograficaModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_RegionGeograficaObjetivoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_RegionGeograficaObjetivoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_RegionGeograficaObjetivoCrear_AfterInsert
   ON dbo.regiongeograficaobjetivo
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$RegionGeograficaID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT PublicidadID, RegionGeograficaID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$RegionGeograficaID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'Publicidad->RegionGeograficaObjetivo: ' + CAST(@new$PublicidadID AS varchar(50)) + N'->' + CAST(@new$RegionGeograficaID AS varchar(50))

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$RegionGeograficaID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeograficaobjetivo.t_RegionGeograficaObjetivoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeograficaobjetivo',
        N'TRIGGER', N't_RegionGeograficaObjetivoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_RegionGeograficaObjetivoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_RegionGeograficaObjetivoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_RegionGeograficaObjetivoModificarDespues_AfterUpdate
   ON dbo.regiongeograficaobjetivo
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$RegionGeograficaID int, 
               @old$RegionGeograficaID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.RegionGeograficaID, d.RegionGeograficaID
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$RegionGeograficaID, @old$RegionGeograficaID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     IF @new$RegionGeograficaID <> @old$RegionGeograficaID
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Publicidad->RegionGeograficaObjetivo(columna): '
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$RegionGeograficaID AS varchar(50))
                               + 
                              N')(RegionGeograficaID): '
                               + 
                              CAST(@old$RegionGeograficaID AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$RegionGeograficaID AS varchar(50))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$RegionGeograficaID, @old$RegionGeograficaID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.regiongeograficaobjetivo.t_RegionGeograficaObjetivoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'regiongeograficaobjetivo',
        N'TRIGGER', N't_RegionGeograficaObjetivoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_SeguidorCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_SeguidorCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_SeguidorCrear_AfterInsert
   ON dbo.seguidor
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$ConsumidorID int, 
               @new$CalificableSeguibleID int, 
               @new$AvisarSi nchar(40)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT Rastreable_P, ConsumidorID, CalificableSeguibleID, AvisarSi
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$Rastreable_P, @new$ConsumidorID, @new$CalificableSeguibleID, @new$AvisarSi

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Seguidor: '
                         + 
                        CAST(@new$Rastreable_P AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$ConsumidorID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CalificableSeguibleID AS varchar(50))
                         + 
                        N','
                         + 
                        @new$AvisarSi

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarCreacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$Rastreable_P, @new$ConsumidorID, @new$CalificableSeguibleID, @new$AvisarSi

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.seguidor.t_SeguidorCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'seguidor',
        N'TRIGGER', N't_SeguidorCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_SeguidorModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_SeguidorModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_SeguidorModificarDespues_AfterUpdate
   ON dbo.seguidor
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$Rastreable_P int, 
               @new$ConsumidorID int, 
               @new$CalificableSeguibleID int, 
               @new$AvisarSi nchar(40), 
               @old$AvisarSi nchar(40)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.Rastreable_P, 
                     i.ConsumidorID, 
                     i.CalificableSeguibleID, 
                     i.AvisarSi, 
                     d.AvisarSi
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$Rastreable_P, 
                  @new$ConsumidorID, 
                  @new$CalificableSeguibleID, 
                  @new$AvisarSi, 
                  @old$AvisarSi

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     IF @new$AvisarSi <> @old$AvisarSi
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Seguidor(columna): ('
                               + 
                              CAST(@new$ConsumidorID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$CalificableSeguibleID AS varchar(50))
                               + 
                              N')(AvisarSi): '
                               + 
                              CAST(@old$AvisarSi AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$AvisarSi AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @new$Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$Rastreable_P, 
                        @new$ConsumidorID, 
                        @new$CalificableSeguibleID, 
                        @new$AvisarSi, 
                        @old$AvisarSi

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.seguidor.t_SeguidorModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'seguidor',
        N'TRIGGER', N't_SeguidorModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ServicioVendidoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ServicioVendidoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ServicioVendidoCrear_AfterInsert
   ON dbo.serviciovendido
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$FacturaID int, 
               @new$CobrableID int, 
               @new$Acumulado decimal(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT FacturaID, CobrableID, Acumulado
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$FacturaID, @new$CobrableID, @new$Acumulado

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'Factura->ServicioVendido: '
                         + 
                        CAST(@new$FacturaID AS varchar(50))
                         + 
                        N'->('
                         + 
                        CAST(@new$FacturaID AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$CobrableID AS varchar(50))
                         + 
                        N'),'
                         + 
                        CAST(@new$Acumulado AS varchar(50))

                     SELECT @Rastreable_P = factura.Rastreable_P
                     FROM dbo.factura
                     WHERE factura.FacturaID = @new$FacturaID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$FacturaID, @new$CobrableID, @new$Acumulado

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.serviciovendido.t_ServicioVendidoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'serviciovendido',
        N'TRIGGER', N't_ServicioVendidoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_ServicioVendidoModificar_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_ServicioVendidoModificar_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_ServicioVendidoModificar_AfterUpdate
   ON dbo.serviciovendido
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$FacturaID int, 
               @new$CobrableID int, 
               @new$Acumulado decimal(10, 0), 
               @old$Acumulado decimal(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.FacturaID, i.CobrableID, i.Acumulado, d.Acumulado
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$FacturaID, @new$CobrableID, @new$Acumulado, @old$Acumulado

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     IF @new$Acumulado <> @old$Acumulado
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Factura->ServicioVendido(columna): '
                               + 
                              CAST(@new$FacturaID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$FacturaID AS varchar(50))
                               + 
                              N','
                               + 
                              CAST(@new$CobrableID AS varchar(50))
                               + 
                              N')(Acumulado): '
                               + 
                              CAST(@old$Acumulado AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Acumulado AS varchar(50))

                           SELECT @Rastreable_P = factura.Rastreable_P
                           FROM dbo.factura
                           WHERE factura.FacturaID = @new$FacturaID

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$FacturaID, @new$CobrableID, @new$Acumulado, @old$Acumulado

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.serviciovendido.t_ServicioVendidoModificar',
        N'SCHEMA', N'dbo',
        N'TABLE', N'serviciovendido',
        N'TRIGGER', N't_ServicioVendidoModificar_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_SexoObjetivoCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_SexoObjetivoCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_SexoObjetivoCrear_AfterInsert
   ON dbo.sexoobjetivo
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$Sexo nchar(6)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT PublicidadID, Sexo
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$Sexo

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'Publicidad->SexoObjetivo: ' + CAST(@new$PublicidadID AS varchar(50)) + N'->' + CAST(@new$Sexo AS char(1))

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$Sexo

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.sexoobjetivo.t_SexoObjetivoCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'sexoobjetivo',
        N'TRIGGER', N't_SexoObjetivoCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_SexoObjetivoModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_SexoObjetivoModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_SexoObjetivoModificarDespues_AfterUpdate
   ON dbo.sexoobjetivo
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$PublicidadID int, 
               @new$Sexo nchar(6), 
               @old$Sexo nchar(6)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT i.PublicidadID, i.Sexo, d.Sexo
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$PublicidadID, @new$Sexo, @old$Sexo

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = publicidad.Rastreable_P
                     FROM dbo.publicidad
                     WHERE publicidad.PublicidadID = @new$PublicidadID

                     IF @new$Sexo <> @old$Sexo
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'Publicidad->SexoObjetivo(columna): '
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N'->('
                               + 
                              CAST(@new$PublicidadID AS varchar(50))
                               + 
                              N','
                               + 
                              @new$Sexo
                               + 
                              N')(Sexo): '
                               + 
                              CAST(@old$Sexo AS char(1))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$Sexo AS char(1))

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$PublicidadID, @new$Sexo, @old$Sexo

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.sexoobjetivo.t_SexoObjetivoModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'sexoobjetivo',
        N'TRIGGER', N't_SexoObjetivoModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_SubcontinenteCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_SubcontinenteCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_SubcontinenteCrear_AfterInsert
   ON dbo.subcontinente
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeografica_P int, 
               @new$SubcontinenteID int

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeografica_P, SubcontinenteID
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeografica_P, @new$SubcontinenteID

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = N'RegionGeografica->Subcontinente: ' + CAST(@new$RegionGeografica_P AS varchar(50)) + N'->' + CAST(@new$SubcontinenteID AS varchar(50))

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeografica_P

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeografica_P, @new$SubcontinenteID

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.subcontinente.t_SubcontinenteCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'subcontinente',
        N'TRIGGER', N't_SubcontinenteCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_TiendasConsumidoresCrear_AfterInsert'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_TiendasConsumidoresCrear_AfterInsert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_TiendasConsumidoresCrear_AfterInsert
   ON dbo.tiendasconsumidores
    AFTER INSERT
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeograficaID int, 
               @new$FechaInicio datetime2(0), 
               @new$NumeroDeConsumidores bigint, 
               @new$NumeroDeTiendas bigint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT RegionGeograficaID, FechaInicio, NumeroDeConsumidores, NumeroDeTiendas
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO @new$RegionGeograficaID, @new$FechaInicio, @new$NumeroDeConsumidores, @new$NumeroDeTiendas

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     /*
                     *   SSMA informational messages:
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                     */

                     SELECT @Parametros = 
                        N'RegionGeografica->TiendasConsumidores: '
                         + 
                        CAST(@new$RegionGeograficaID AS varchar(50))
                         + 
                        N'->'
                         + 
                        CONVERT(varchar(20), @new$FechaInicio, 120)
                         + 
                        N': '
                         + 
                        CAST(@new$NumeroDeTiendas AS varchar(50))
                         + 
                        N','
                         + 
                        CAST(@new$NumeroDeConsumidores AS varchar(50))

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeograficaID

                     DECLARE
                        @procedure_return_value int

                     EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                     SELECT @bobo = @procedure_return_value

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO @new$RegionGeograficaID, @new$FechaInicio, @new$NumeroDeConsumidores, @new$NumeroDeTiendas

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tiendasconsumidores.t_TiendasConsumidoresCrear',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tiendasconsumidores',
        N'TRIGGER', N't_TiendasConsumidoresCrear_AfterInsert'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO

USE spuria
GO
IF  EXISTS (SELECT * FROM sys.objects so JOIN sys.schemas sc on so.schema_id = sc.schema_id WHERE so.name = N't_TiendasConsumidoresModificarDespues_AfterUpdate'  AND sc.name=N'dbo'  AND type in (N'TR'))
 DROP TRIGGER [dbo].[t_TiendasConsumidoresModificarDespues_AfterUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
*   SSMA informational messages:
*   M2SS0003: The following SQL clause was ignored during conversion:
*   DEFINER = `chivo`@`localhost`.
*/

CREATE TRIGGER dbo.t_TiendasConsumidoresModificarDespues_AfterUpdate
   ON dbo.tiendasconsumidores
    AFTER UPDATE
      AS 
         BEGIN

            SET  NOCOUNT  ON

            SET  XACT_ABORT  ON

            /* column variables declaration*/
            DECLARE
               @new$RegionGeograficaID int, 
               @new$FechaInicio datetime2(0), 
               @new$FechaFin datetime2(0), 
               @old$FechaFin datetime2(0), 
               @new$NumeroDeConsumidores bigint, 
               @old$NumeroDeConsumidores bigint, 
               @new$NumeroDeTiendas bigint, 
               @old$NumeroDeTiendas bigint

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT 
                     i.RegionGeograficaID, 
                     i.FechaInicio, 
                     i.FechaFin, 
                     i.NumeroDeConsumidores, 
                     i.NumeroDeTiendas, 
                     d.FechaFin, 
                     d.NumeroDeConsumidores, 
                     d.NumeroDeTiendas
                  FROM 
                     deleted  AS d 
                        INNER JOIN inserted  AS i 
                        ON i.ssma$rowid = d.ssma$rowid

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO 
                  @new$RegionGeograficaID, 
                  @new$FechaInicio, 
                  @new$FechaFin, 
                  @new$NumeroDeConsumidores, 
                  @new$NumeroDeTiendas, 
                  @old$FechaFin, 
                  @old$NumeroDeConsumidores, 
                  @old$NumeroDeTiendas

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* trigger implementation: begin*/
                  BEGIN

                     DECLARE
                        /*
                        *   SSMA informational messages:
                        *   M2SS0055: Data type was converted to VARCHAR(MAX) according to character set mapping for latin1 character set
                        */

                        @Parametros varchar(max)

                     DECLARE
                        @Rastreable_P int, 
                        @bobo int

                     SELECT @Rastreable_P = regiongeografica.Rastreable_P
                     FROM dbo.regiongeografica
                     WHERE regiongeografica.RegionGeograficaID = @new$RegionGeograficaID

                     IF @new$FechaFin <> @old$FechaFin
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->TiendasConsumidores(columna): '
                               + 
                              CAST(@new$RegionGeograficaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(FechaFin): '
                               + 
                              CONVERT(varchar(20), @old$FechaFin, 120)
                               + 
                              N' ahora es '
                               + 
                              CONVERT(varchar(20), @new$FechaFin, 120)

                           DECLARE
                              @procedure_return_value int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value  OUTPUT

                           SELECT @bobo = @procedure_return_value

                        END

                     IF @new$NumeroDeTiendas <> @old$NumeroDeTiendas
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->NumeroDeTiendas(columna): '
                               + 
                              CAST(@new$RegionGeograficaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(NumeroDeTiendas): '
                               + 
                              CAST(@old$NumeroDeTiendas AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeTiendas AS varchar(50))

                           DECLARE
                              @procedure_return_value$2 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$2  OUTPUT

                           SELECT @bobo = @procedure_return_value$2

                        END

                     IF @new$NumeroDeConsumidores <> @old$NumeroDeConsumidores
                        BEGIN

                           /*
                           *   SSMA informational messages:
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           *   M2SS0055: Data type was converted to CHAR according to character set mapping for latin1 character set
                           */

                           SELECT @Parametros = 
                              N'RegionGeografica->NumeroDeTiendas(columna): '
                               + 
                              CAST(@new$RegionGeograficaID AS varchar(50))
                               + 
                              N'->'
                               + 
                              CONVERT(varchar(20), @new$FechaInicio, 120)
                               + 
                              N'(NumeroDeConsumidores): '
                               + 
                              CAST(@old$NumeroDeConsumidores AS varchar(50))
                               + 
                              N' ahora es '
                               + 
                              CAST(@new$NumeroDeConsumidores AS varchar(50))

                           DECLARE
                              @procedure_return_value$3 int

                           EXECUTE dbo.RegistrarModificacion$IMPL @Rastreable_P, @Parametros, @returnvalue = @procedure_return_value$3  OUTPUT

                           SELECT @bobo = @procedure_return_value$3

                        END

                  END
                  /* trigger implementation: end*/

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO 
                        @new$RegionGeograficaID, 
                        @new$FechaInicio, 
                        @new$FechaFin, 
                        @new$NumeroDeConsumidores, 
                        @new$NumeroDeTiendas, 
                        @old$FechaFin, 
                        @old$NumeroDeConsumidores, 
                        @old$NumeroDeTiendas

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END
GO
BEGIN TRY
    EXEC sp_addextendedproperty
        N'MS_SSMA_SOURCE', N'spuria.tiendasconsumidores.t_TiendasConsumidoresModificarDespues',
        N'SCHEMA', N'dbo',
        N'TABLE', N'tiendasconsumidores',
        N'TRIGGER', N't_TiendasConsumidoresModificarDespues_AfterUpdate'
END TRY
BEGIN CATCH
    IF (@@TRANCOUNT > 0) ROLLBACK
    PRINT ERROR_MESSAGE()
END CATCH
GO
